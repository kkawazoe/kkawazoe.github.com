var data = [
{
url: "https://kkawazoe.github.io/amp/blog/2024/05/16/new-road-to-aws-certified-solutions-architect-associate/",
title: "(新) AWS 認定ソリューションアーキテクト - アソシエイトへの道",
image: "images/logo/aws_logo.svg",
date: "2024-05-16",
body: "(新) AWS 認定ソリューションアーキテクト - アソシエイトへの道 AWS 認定ソリューションアーキテクト - アソシエイトを学習する中で間違えやすいポイントを備忘録として残しておく EC2 Auto Scaling 動的スケーリング 簡易スケーリングポリシー(ターゲッツ追跡スケーリングポリシー) 一定の CPU 利用に応じてスケーリングを実行する ステップスケーリングポリシー スケールさせるインスタンス数を段階的に増やすステップを設定する ターミネーションポリシー スケールイン時のインスタンスを終了させる方法を定義する 手動スケーリング 希望する容量を調整して、手動でスケーリングを実施する スケジュールさせたスケーリング スケーリングを実施する日時を指定して、スケーリングを実行する AWS Nitro Enclaves 高度な機密情報の保護や安全措置を向上する、分離されたコンピューティング環境を作成することができる EBS EBS のコピーについて EBS 自体は別リージョンに移動して利用することはできない 以下のような手順が必要 スナップショットを作成 S3 スナップショットが格納される 別リージョンの S3 にコピーする 別リージョンのEBS に復元する EBS の RAID 構成 RAID 0 目的 パフォーマンスを向上させる 複数のディスクを 1 台のディスクのように扱う 読み書きを高速化する構成 ストライピング RAID 1 目的 ボリュームの冗長性を高める 2 つのボリュームを同時にミラーリングする EFS VPC 内の Amazon EFS ファイルシステムにアクセスする VPC に 1 つ以上のマウントターゲットを作成する必要がある リージョンファイルシステム AWS リージョン内の各アベイラビリティーゾーンにマウントターゲットを作成 1 ゾーンファイルシステム ファイルシステムと同じアベイラビリティーゾーンにマウントターゲットを 1 つだけ作成 VPC Direct Connect Direct Connect は AWS とオンプレミス環境間の専用線接続サービス ゲートウェイ型エンドポイント VPC 内の EC2 インスタンスから、プライベートネットワークを経由する VPC 外の Amazon DynamoDB テーブルにアクセスする際に使用 VPC にゲートウェイエンドポイントを構成して、DynamoDB にルートを設定することが必要 DynamoDB と Amazon S3 にのみ適用可能 プライペートリンク型エンドポイント(インターフェース型) プライベート IP アドレスを使用してサービスにプライベートにアクセスする AWS PrivateLink は VPC とサービス間のすべてのネットワークトラフィックを Amazon ネットワークに制限 RDS, EC2 など多くの AWS サービスに適用可能 2022 年より Amazon S3 に対応 ※DynamoDB は未対応 SQS 可視性タイムアウト 他のカスタマーがそのメッセージの受信や処理できなくなる期間 デフォルトは 30 秒 ※最小は 0 秒で最大は 12 時間 デッドレターキュー エラーのためにソフトウェアシステムが処理できないメッセージを一時的に保存する特別なタイプのメッセージキュー デフォルトでは有効でない Kinesis Kinesis Agent Kinesis サービスにデータを簡単に収集して取り込む OSS のスタンドアロン Java アプリケーション Kinesis Producer Library (KPL) Kinesis Streams にデータを送信する OSS の補助ライブラリ Fluent plugin for Amazon Kinesis Kinesis Streams と Kinesis Firehose にイベントを送信する OSS の Fluentd 出力プラグイン Kinesis Data Generator (KDG) KDG を利用して Kinesis Streams or Kinesis Firehose にテストデータを簡単に送信できる Kinesis Client Library (KCL) KCL を利用して Kinesis アプリケーションを作成する OSS のクライアントライブラリで EC2 インスタンスなどにデプロイして利用する ワーカーがシャード数に応じて、レコードプロセッサのライフサイクル管理(生成/終了)を実施 Kinesis のサービス Kinesis Data Analytics SQL や Java(Apache Flink) を使ってストリーミングデータに対してリアルタイム分析を行うことが出来るマネージドサービス Kinesis Data Firehose 実行内容 データ形式の変換 データの配信 処理速度 60 秒感覚のバッチ データ保存 ストリーム配信自体にはデータ保存不可 Kinesis Data Streams 実行内容 高速なデータ処理 データ分析・集計 複雑なストリーム処理 処理速度 ミリ秒単位のリアルタイム データ保存 24 時間 〜 365 日 S3 アクセス制限について 特定の S3 バケットへのアクセス制限は対象によってやり方が異なる 特定 IP の EC2 インスタンス IAM ロールでのアクセス制御 特定ユーザ S3 のバケットポリシー AWS Storage Gateway オンプレミスから実質無制限のクラウドストレージへのアクセスを提供するハイブリッドクラウドストレージサービス Amazon S3 ファイルゲートウェイ 業界標準の NFS および SMB ファイルプロトコルを使用 Amazon S3 にオブジェクトとしてファイルを保存 Amazon FSx ファイルゲートウェイ 業界標準の SMB プロトコルを使用 フルマネージドで、信頼性の高い、スケーラブルなファイル共有を高速かつ低レイテンシーを提供 テープゲートウェイ 既存のバックアップワークフローを変更することなく、オンプレミスの物理テープの使用から AWS の仮想テープに切り替えることができる 仮想テープをオンプレミスでキャッシュすることで、低レイテンシーのデータアクセスを可能にする ゲートウェイと AWS の間のデータを暗号化する Amazon S3 と Amazon S3 Glacier Flexible Retrieval、または Amazon S3 Glacier Deep Archive の間のデータを圧縮する その後、仮想テープを送信して、ストレージコストの最小化を図る ボリュームゲートウェイ オンプレミスアプリケーションにクラウドバックアップの iSCSI ブロックストレージボリュームを提供 キャッシュ型モード プライマリデータは Amazon S3 に保存される 頻繁にアクセスするデータはキャッシュでローカルに保持され、低レイテンシーでのアクセスが実現できる 保管型モード プライマリデータはローカルに保存される オンプレミスでデータセット全体が低レイテンシーでアクセスできると同時に、Amazon S3 に非同期でバックアップさレル Amazon FSx for Lustre Lustre ファイルシステムのスケーラビリティとパフォーマンスを備えたフルマネージド共有ストレージ S3 との双方向同期が可能 ※EBS とは不可 IAM AWS Security Token Service (AWS STS) AWS リソースへのアクセスをコントロールできる一時的セキュリティ認証情報を持つ、信頼されたユーザーを作成および提供する SAML フェデレーション 組織のネットワークのユーザーを認証して、それらのユーザに AWS へのアクセスを提供できる ※再度のサインインが不要 新しい AWS ID を作成 異なるサインイン カスタムフェデレーションブローカー AWS組織の認証システムを使用して リソースへのアクセスを許可することができる SAML 2.0 を使用したフェデレーション AWS 組織の認証システムと SAML を使用して、リソースへのアクセスを許可することができる OpenID Connect (OIDC) フェデレーション モバイルまたはウェブアプリケーションに対してユーザに一般的なサードパーティ ID プロバイダを使用したサインインを求めることができる ECS タスクという単位で、トランザクションをサービス単位に分割して、マイクロサービスとすることができる 他 AWS リソースへのアクセス許可 対象の AWS リソースへのアクセス許可が設定された IAM ポリシーを付与した IAM ロールをタスク IAM ロールとして設定する ※taskRoleArn API オペレーションによって定義 RDS フェールオーバ対策 マルチ AZ 配置 プライマリーDBインスタンスを別のアベイラビリティゾーンに同期的にレプリケートする構成 マルチ AZ クラスター プライマリーDBインスタンスに加えて、それぞれ別のアベイラビリティゾーンに２つのリードレプリカを利用する構成 AWS Elastic Beanstalk PaaS サービスで、Web アプリの実行環境を自動的に作成する Web アプリのデプロイメントと管理が簡単になる CloudFormation の制限版(Web アプリ用)みたいなイメージ AWS Glue 抽出(Extract)・変換(Transform)・ロード(Load)の頭文字を取った ETL を行う完全マネージド型のサービス AWS Glue クローラを利用して S3 バケットを処理して、データをスキャンする データ分類、スキーマ情報を抽出する AWS Glue データカタログにメタデータを保存する"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/05/09/how-to-retrieve-the-list-of-certificates-managed-by-aws-certificate-manager-for-all-regions/",
title: "AWS Certificate Manager で管理している証明書一覧を全リージョンに対して取得する方法",
image: "images/logo/aws_logo.svg",
date: "2024-05-09",
body: "AWS Certificate Manager で管理している証明書一覧を全リージョンに対して取得する方法 AWS Certificate Manager で管理している証明書一覧を全リージョンに対して取得する方法について調査した結果を備忘録として残しておく 実際のコード # AWSのリージョンのリストを取得する REGIONS=(`aws ec2 describe-regions --query Regions[*].RegionName --output text`) # リージョン毎に証明書のリストを出力する # 証明書 Arn, ドメイン名, タイプ, ステータス, 使用中かどうか for region in ${REGIONS[@]} do echo \u0026#34;[${region}]\u0026#34; aws acm list-certificates --output text --region ${region} --query \u0026#34;CertificateSummaryList[].[CertificateArn, DomainName, Type, Status, InUse]\u0026#34; | sort -k 1 | column -t -s \u0026#34;`printf \u0026#39;\\t\u0026#39;`\u0026#34; echo \u0026#34;---------------------\u0026#34; done"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/05/08/how-to-run-github-actions-locally/",
title: "Circle CI で環境変数を切り替える方法",
image: "images/logo/circleci_logo.svg",
date: "2024-05-08",
body: "Circle CI で環境変数を切り替える方法 Circle CI で環境変数を切り替える方法を備忘録として残しておく 実際のコード run ステップを使用して BASH_ENV にエクスポートする ※参考を参照 steps: - run: name: Setup Environment Variables command: |echo \u0026#39;export PATH=\u0026#34;$GOPATH\u0026#34;/bin:\u0026#34;$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; \u0026#34;$BASH_ENV\u0026#34; echo \u0026#39;export GIT_SHA1=\u0026#34;$CIRCLE_SHA1\u0026#34;\u0026#39; \u0026gt;\u0026gt; \u0026#34;$BASH_ENV\u0026#34;"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/05/07/how-to-run-github-actions-locally/",
title: "GitHub Actions をローカルで実行する方法",
image: "images/logo/github_logo.png",
date: "2024-05-07",
body: "GitHub Actions をローカルで実行する方法 GitHub Actions をローカルで実行する方法を備忘録として残しておく 前提 Mac OS OS Version: Sonoma 14.4.1 Chip: Apple M1 Container 管理ツール Rancher Desktop 使用ツール act GitHub Actions 既に作成済想定 act のインストール Home Brew でインストールする brew install act 使用方法 act で実行可能な一覧を表示する act -l WARN ⚠ You are using Apple M-series chip and you have not specified container architecture, you might encounter issues while running act. If so, try running it with \u0026#39;--container-architecture linux/amd64\u0026#39;. ⚠ Stage Job ID Job name Workflow name Workflow file Events 0 ci ci ci ci.yml push,pull_request act コマンドを使用して実行する 例. push 時の Job 確認 ※M1 なので \u0026lsquo;\u0026ndash;container-architecture linux/amd64\u0026rsquo; を付与して実行 act push --container-architecture linux/amd64 Trouble Shooting docker host に関するエラー act push --container-architecture linux/amd64 INFO[0000] Using docker host \u0026#39;127.0.0.1\u0026#39;, and daemon socket \u0026#39;127.0.0.1\u0026#39; [ci/ci] 🚀 Start image=catthehacker/ubuntu:act-latest [ci/ci] 🐳 docker pull image=catthehacker/ubuntu:act-latest platform=linux/amd64 username= forcePull=true Error: failed to connect to docker daemon: unable to parse docker host `127.0.0.1` 参考 を実施する export DOCKER_HOST=$(docker context inspect --format \u0026#39;{{.Endpoints.docker.Host}}\u0026#39;) マウントできないに関するエラー act push --container-architecture linux/amd64 INFO[0000] Using docker host \u0026#39;unix:///Users/\u0026lt;\u0026lt;User Name\u0026gt;\u0026gt;/.rd/docker.sock\u0026#39;, and daemon socket \u0026#39;unix:///Users/\u0026lt;\u0026lt;User Name\u0026gt;\u0026gt;/.rd/docker.sock\u0026#39; [ci/ci] 🚀 Start image=catthehacker/ubuntu:act-latest [ci/ci] 🐳 docker pull image=catthehacker/ubuntu:act-latest platform=linux/amd64 username= forcePull=true Error: failed to list containers: error during connect: Get \u0026#34;http://%2FUsers%2F\u0026lt;\u0026lt;User Name\u0026gt;\u0026gt;%2F.rd%2Fdocker.sock/v1.45/containers/json?all=1\u0026#34;: EOF 参考 を実施する --container-daemon-socket -"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/04/25/about-terraform-commands/",
title: "Terraform のコマンドについて",
image: "images/logo/terraform_logo.svg",
date: "2024-04-25",
body: "Terraform のコマンドについて Terraform のコマンドについて備忘録として残しておく 実際のコード 基本の流れ 初期化 terraform init 検証 terraform validate #=\u0026gt; Success! The configuration is valid. 実行計画確認 terraform plan インフラ構築 terraform apply その他 コード自動整形 terraform fmt リソース確認 terraform show リソース削除 terraform destroy リソース削除の実行計画確認 terraform plan -destroy"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/04/25/links-to-documentation-used-when-learning-terraform/",
title: "Terraform の学習時に使用したドキュメントのリンク集",
image: "images/logo/terraform_logo.svg",
date: "2024-04-25",
body: "Terraform の学習時に使用したドキュメントのリンク集 Terraform の学習時に使用したドキュメントのリンク集を備忘録として残しておく ドキュメントのリンク集 基本 公式ドキュメント AWS Provider コードの記載方法に関するベストプラクティス Terraform Best Practices Terraform Registry AWS VPC terraform-aws-atlantis Trouble Shooting Quick start tutorial でエラーが発生する 以下のコマンド実行時にエラーが発生 terraform apply Error: Error pinging Docker server: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running? │ │ with provider[\u0026#34;registry.terraform.io/kreuzwerker/docker\u0026#34;], │ on main.tf line 10, in provider \u0026#34;docker\u0026#34;: │ 10: provider \u0026#34;docker\u0026#34; { 以下のコマンドで docker の sock のパスを確認する docker context ls NAME DESCRIPTION DOCKER ENDPOINT ERROR default Current DOCKER_HOST based configuration unix:///var/run/docker.sock rancher-desktop * Rancher Desktop moby context unix:///Users/\u0026lt;\u0026lt;user name\u0026gt;\u0026gt;/.rd/docker.sock Rancher Desktop を使用していたためパスが異なっていたのが原因 main.tf ファイルを以下のように修正して再実行する provider \u0026#34;docker\u0026#34; { host = \u0026#34;unix:///Users/\u0026lt;\u0026lt;user name\u0026gt;\u0026gt;/.rd/docker.sock\u0026#34;// 追加 }"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/04/24/determining-whether-a-function-starting-with-amplify-login-in-aws-lambda-is-required-or-not/",
title: "AWS Lambda の amplify-login で始まる関数の要否判断について",
image: "images/logo/aws_logo.svg",
date: "2024-04-24",
body: "AWS Lambda の amplify-login で始まる関数の要否判断について AWS Lambda の amplify-login で始まる関数の要否判断について調査した結果を備忘録として残しておく 調査に至った事象 AWS より以下のメールが配信されていた 対象の Lambda 関数を確認すると掲題のものが指摘を受けていたが、作成した記憶がなかったため、要否の判断がつかなかったため、調査を行なった [アクションが必要です] AWS Lambda での Node.js 16 のサポート終了について | [Action Required] AWS Lambda end of support for Node.js 16 English follows Japanese | 英語のメッセージは日本語の後にございます いつもお世話になっております。 [Amazon Health Dashboard はこのコミュニケーションに関するリマインダー通知を定期的にトリガーする場合があります] お客様の AWS アカウントに現在、Node.js 16 ランタイムを使用する AWS Lambda 関数が 1 つ以上あることが判明したため、ご連絡いたしております。 Lambda での Node.js 16 のサポートは 2024 年 6 月 12 日に終了します。これは、2023 年 9 月 11 日に Node.js 16 がサポート終了 (EOL) したことに続くものです [1]。 Lambda ランタイムサポートポリシー [2] で説明されているように、Lambda の言語ランタイムのサポートはいくつかの段階で終了します。2024 年 6 月 12 日以降、Lambda は Lambda 関数で使用される Node.js 16 ランタイムにセキュリティパッチやその他の更新を適用しなくなり、Node.js 16 を使用する関数はテクニカルサポートの対象ではなくなります。また、Node.js 16 は AWS コンソールで使用できなくなりますが、AWS CloudFormation、AWS CLI、AWS SAM、またはその他のツールを使用して、Node.js 16 を使用する関数を作成および更新することはできます。2025 年 2 月 28 日以降、Node.js 16 ランタイムを使用する新しい Lambda 関数を作成することはできなくなります。2025 年 3 月 31 日以降、Node.js 16 ランタイムを使用する既存の関数を更新することはできなくなります。 2024 年 6 月 12 日までに、既存の Node.js 16 の関数を利用可能な最新の Node.js ランタイムにアップグレードすることをお勧めします。Node.js 16 の関数のリストは、AWS ヘルスダッシュボードの [影響を受けるリソース](Affected resources) タブにあります。 サポートの終了は関数の実行には影響しません。関数は引き続き実行されます。ただし、これらはサポートされていないランタイムで実行されるため、AWS Lambda チームによるメンテナンスやパッチの適用は行われません。 この通知は、$LATEST 関数バージョンに Node.js 16 ランタイムを使用する関数に対して生成されました。次のコマンドは、AWS CLI [3] を使用して、Node.js 16 を使用して特定のリージョンのすべての関数 (公開されている関数バージョンを含む) を一覧表示する方法を示しています。アカウントでこのような関数をすべて見つけるには、各リージョンで次のコマンドを繰り返します。 aws lambda list-functions --region us-west-2 --output text --query \u0026#34;Functions[?Runtime==\u0026#39;nodejs16.x\u0026#39;].FunctionArn\u0026#34; 廃止予定の 180 日前から、Trusted Advisor を使用して、公開されている関数バージョン [4] を含め、Node.js 16 ランタイムを使用するすべての関数を識別することもできます。 ご不明な点やサポートが必要な場合は、AWS サポート [5] までお問い合わせ下さい。 ・・・ amplify-login で始まる Lambda 関数とは？ Amplify Studioを有効化した際に自動的に作成される関数 要否の判断 Amplify Studio を使用していない場合は削除して問題ない また、参考のように Amplify アプリと Lambda 関数の関連性を特定することができる Lamdba 関数名の AppID と Cognito ユーザプール名の AppID が一致しているかどうか Cognito ユーザプール \u0026gt; [ユーザプールのプロパティ] Lambda トリガー で追加されているかどうか ID プール \u0026gt; [ユーザアクセス] \u0026gt; [ID プロバイダ] に追加されているかどうか 全リージョンに存在する Lambda 関数の中で Node 16 を使用しているものを出力する方法 前提条件 Sh が実行可能 AWS CLI がインストール済 以下の権限を実行可能な IAM ユーザ or IAM ロールが設定済 ec2:DescribeRegions lambda:ListFunctions #!/bin/sh CMDNAME=`basename $0` if [ $# -gt 1 ]; then echo \u0026#34;Usage: ${CMDNAME}[profile]\u0026#34; 1\u0026gt;\u0026amp;2 exit 1 fi # 第1引数でプロファイル名が指定されていたら上書きする PROFILE=\u0026#34;default\u0026#34; if [ $# -eq 1 ]; then PROFILE=$1 fi # AWSのリージョンのリストを取得する REGIONS=(`aws --profile ${PROFILE} ec2 describe-regions --query Regions[*].RegionName --output text`) # リージョン毎に Lambda 関数のリストを出力する ※Lambda 関数名 昇順 for region in ${REGIONS[@]} do echo \u0026#34;[${region}]\u0026#34; aws --profile ${PROFILE} lambda list-functions --output text --region ${region} --query \u0026#34;Functions[?Runtime==\u0026#39;nodejs16.x\u0026#39;].[FunctionName, LastModified, Description]\u0026#34; | sort -k 1 | column -t -s \u0026#34;`printf \u0026#39;\\t\u0026#39;`\u0026#34; echo \u0026#34;---------------------\u0026#34; done"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/04/24/tips-for-creating-aws-configuration-diagrams-with-draw-io/",
title: "draw.io で AWS の構成図を作成する際の Tips",
image: "images/logo/drawio_logo.svg",
date: "2024-04-24",
body: "draw.io で AWS の構成図を作成する際の Tips draw.io で AWS の構成図を作成する際の Tips を備忘録として残しておく レイヤー機能を使用して重なり順を気にせずに作業する 図を追加した際に背面に隠れてしまい、重なりを修正する手間を解消する 手順 メニューバーから[表示]＞[レイヤー]を選択する ※初期状態では「背景」というレイヤーが配置されている 例えば以下のようにレイヤーを作成する ※上に表示されているレイヤーが前面に表示される"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/04/19/aws-related-link-summary/",
title: "AWS 関連のリンクまとめ",
image: "images/logo/aws_logo.svg",
date: "2024-04-19",
body: "AWS 関連のリンクまとめ AWS 関連のリンクについて毎回探してしまうためまとめておく ※一度でも調査に使用したものをまとめていく ベストプラクティスおよびサービスの導入理由 Well-Architected セキュリティの柱 検知 インフラストラクチャ保護 データ保護 AWS ホワイトペーバーとガイド DDos 耐性のベストプラクティス サービスの状態 各サービスごとのリンク Cognito ユーザプールの大文字・小文字の区別 RDS Amazon Aurora DB Aurora DB クラスターのバックアップと復元 Amazon Aurora Serverless V1 Amazon Pinpoint プッシュ通知の送信 API Reference SES DMARC 対応 送信制限 本番稼働する際の制限解除について E メール受信時のフィードバックについて SNS 米国製品番号について ACM ACM 証明書について サポートされるリージョンについて 自動更新について VPC AWS サービスが利用する IP アドレス範囲について WAF Managed Rules CloudFront フィールドレベル暗号化を使用した機密データの保護"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/04/15/how-to-perform-a-diff-comparison-in-a-directory-on-a-mac/",
title: "Mac でディレクトリ内の差分比較を行う方法",
image: "images/logo/icons8-mac-os-logo.svg",
date: "2024-04-15",
body: "Mac でディレクトリ内の差分比較を行う方法 普段 Diff ツールに CompareMerge2 を使用しているが無料版だと 200 アイテムまでの制限があるため他の方法を調査した方法を備忘録として残しておく 手順 diff コマンドを使用する 差分ファイル名のみ表示する -r オプション: 再起的に比較する -q オプション: 差分のあるファイルのみ表示 差分の内容は非表示 diff -r -q dir001/ dir002/ 差分ファイル数をカウントする ディレクトリの差分はない前提 diff -r -q dir001/ dir002/ | wc #=\u0026gt; 0 0 0"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/04/04/how-to-build-a-jmeter-environment/",
title: "JMeter の環境構築方法",
image: "images/logo/jmeter_logo.svg",
date: "2024-04-04",
body: "JMeter の環境構築方法 JMeter の環境構築方法を備忘録として残しておく 前提 Mac OS OS Version: Sonoma 14.4.1 Chip: Apple M1 Java Version: OpenJDK 21 手順 Java をインストールする ※Eclipse Temurin™ brew tap homebrew/cask-versions brew install --cask temurin21 JMeter をダウンロードする JMeter でダウンロードしても良い brew install jmeter 以下のコマンドを実行して JMeter を起動する jmeter"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/04/03/how-to-build-a-debugging-environment-for-the-go-language-on-vs-code/",
title: "Go 言語用のデバッグ環境を VS Code 上に構築する方法",
image: "images/logo/golang_logo.png",
date: "2024-04-03",
body: "Go 言語用のデバッグ環境を VS Code 上に構築する方法 Go 言語用のデバッグ環境を VS Code 上に構築する方法を備忘録として残しておく ※環境変数読み込み時にロードエラーになっていた 前提 Mac OS OS Version: Sonoma 14.4.1 Chip: Apple M1 Go をインストール済 $GOPATH を設定済 $GOPATH/bin を環境変数 $PATH へ追加済 サーバ情報 host: 127.0.0.1 port: 3000 ディレクトリ構成 以下のような構成になっている想定 ※デバッグ対象のプログラムと環境変数ファイルが異なるディレクトリに存在する cmd ├── main.go .env 手順 VSCode に Go 言語の拡張機能をインストール コマンドパレットから Go: Install/Update Tools を選択 以下のツールを選択して実行 gopls@latest dlv@latest launch.json を編集 { // IntelliSense を使用して利用可能な属性を学べます。 // 既存の属性の説明をホバーして表示します。 // 詳細情報は次を確認してください: https://go.microsoft.com/fwlink/?linkid=830387 \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Launch Program\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;go\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;debug\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${workspaceFolder}/cmd/\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;port\u0026#34;: 3000, \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34;, // ※1 } ] } ※1 設定することで cwd が移動して .env ファイルがロード可能になる"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/03/30/how-to-connect-with-aws-ec2-instance-connect/",
title: "AWS EC2 Instance Connect で接続する方法",
image: "images/logo/aws_logo.svg",
date: "2024-03-30",
body: "AWS EC2 Instance Connect で接続する方法 AWS EC2 Instance Connect で接続するする際にエラーが発生したため、接続できるように調査した内容を備忘録として残しておく 前提 AWS EC2 Instance Connect をインストールしておく 手順 Amazon EC2 コンソール を開く ナビゲーションペインで、[インスタンス] を選択する インスタンスを選択し、[接続] を選択する [EC2 Instance Connect] を選択する ユーザー名を検証し、[Connect (接続)] を選択してターミナルウィンドウを開く 以下のエラーが発生 インスタンス接続の設定中に問題が発生し、ログインに失敗しました。このインスタンスが開始したばかりの場合は、1～2 分後にもう一度試してください 公式のトラブルシューティングを確認 =\u0026gt; セキュリティグループに、EC2 Instance Connect サービス IP がリストされてないが原因だった 以下のコマンドを実行して EC2 Instance Connect サービス IP を確認する curl -s https://ip-ranges.amazonaws.com/ip-ranges.json| jq -r \u0026#39;.prefixes[] | select(.region==\u0026#34;\u0026lt;\u0026lt;対象リージョン\u0026gt;\u0026gt;\u0026#34;) | select(.service==\u0026#34;EC2_INSTANCE_CONNECT\u0026#34;) | .ip_prefix\u0026#39; セキュリティグループのインバウンドルールを更新して、手順 6 で確認した IP 範囲から TCP ポート 22 にアクセスできるようにルールを更新する 再度、EC2 Instance Connect に接続する"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/03/29/how-to-install-postgresql-13-on-amazon-linux-2/",
title: "Amazon Linux 2 に PostgreSQL 13 をインストールする方法",
image: "images/logo/aws_logo.svg",
date: "2024-03-29",
body: "Amazon Linux 2 に PostgreSQL 13 をインストールする方法 Amazon Linux 2 に PostgreSQL 13 をインストールする際にエラーが発生したため、インストールできるように調査した内容を備忘録として残しておく 手順 postgresql13 を以下のコマンドでインストールする sudo amazon-linux-extras install postgresql13 以下のエラーが発生 failure: repodata/repomd.xml from pgdg-common: [Errno 256] No more mirrors to try. https://download.postgresql.org/pub/repos/yum/common/redhat/rhel-2-x86_64/repodata/repomd.xml: [Errno 14] HTTPS Error 404 - Not Found Installation failed. Check that you have permissions to install. 以下のコマンドで対象ファイルの内容を更新する ※事前にバックアップすること sudo sed -i \u0026quot;s/\\$releasever/7/g\u0026quot; \u0026quot;/etc/yum.repos.d/pgdg-redhat-all.repo\u0026quot; 再度、 postgresql13 をインストールする 以下のエラーが発生 failure: repodata/repomd.xml from pgdg-common: [Errno 256] No more mirrors to try. https://download.postgresql.org/pub/repos/yum/common/redhat/rhel-7-x86_64/repodata/repomd.xml: [Errno -1] repomd.xml signature could not be verified for pgdg-common Installation failed. Check that you have permissions to install. 以下の対象ファイルの内容を更新 ※事前にバックアップすること 更新対象ファイル /etc/pki/rpm-gpg/PGDG-RPM-GPG-KEY-RHEL 更新内容の参照ファイル: PGDG-RPM-GPG-KEY-RHEL7 ダウンロード先 再度、 postgresql13 をインストールする"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/03/08/how-to-control-access-to-some-tables-in-amazon-aurora-postgresql/",
title: "Amazon Aurora PostgreSQL で一部のテーブルに対するアクセス制御を行う方法",
image: "images/logo/aws_logo.svg",
date: "2024-03-08",
body: "Amazon Aurora PostgreSQL で一部のテーブルに対するアクセス制御を行う方法 Amazon RDS で一部のテーブルに対するアクセス制御を行う方法について調査した内容を備忘録として残しておく 前提 構成および RDS Proxy に接続可能な DB ユーザを追加する方法については前回記事を参照 前回の記事: Amazon RDS で RDS Proxy に接続可能な DB ユーザを追加する方法 手順 Role に対して適宜必要な権限を付与 例. public Schema の全テーブルへの全権限を付与 grant all on all tables in schema public to \u0026lt;\u0026lt;DB ユーザ\u0026gt;\u0026gt;; アクセス制御を行うテーブルからアクセス権限を取り消す 例. public T_USER_HISTORY テーブルのアクセス権限を取り消す revoke select on \u0026#34;public\u0026#34;.\u0026#34;T_USER_HISTORY\u0026#34; from \u0026lt;\u0026lt;DB ユーザ\u0026gt;\u0026gt;; 権限の確認 該当テーブルの Access privileges 欄を確認して r(read) がないことを確認する \\dp #=\u0026gt; \u0026lt;\u0026lt;DB ユーザ\u0026gt;\u0026gt;=awdDxt/postgres"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/03/08/how-to-add-a-db-user-that-can-connect-to-rds-proxy-in-amazon-rds/",
title: "Amazon RDS で RDS Proxy に接続可能な DB ユーザを追加する方法",
image: "images/logo/aws_logo.svg",
date: "2024-03-08",
body: "Amazon RDS で RDS Proxy に接続可能な DB ユーザを追加する方法 Amazon RDS で RDS Proxy に接続可能な DB ユーザを追加する方法について調査した内容を備忘録として残しておく 前提 以下の構成を想定 ※RDS は Aurora PostgreSQL Version 13.8 手順 参考 DB ユーザ追加 以下のコマンドを使用してユーザを追加する ※実運用時は、適宜必要な権限を付与する postgres=\u0026gt; CREATE ROLE \u0026lt;\u0026lt;ロール名\u0026gt;\u0026gt; LOGIN PASSWORD \u0026#39;\u0026lt;\u0026lt;パスワード\u0026gt;\u0026gt;\u0026#39;; # 例. ログイン属性, 接続数制限なし, パスワード指定 postgres=\u0026gt; CREATE ROLE \u0026lt;\u0026lt;ロール名\u0026gt;\u0026gt; WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT NOREPLICATION NOBYPASSRLS CONNECTION LIMIT -1 PASSWORD \u0026#39;\u0026lt;\u0026lt;パスワード\u0026gt;\u0026gt;\u0026#39;; Secrets Manager にデータベース認証情報設定 AWS Secrets Manager のマネジメントコンソールから、先ほど登録した DB ユーザに対応するシークレットを作成する 設定 シークレットのタイプ: Amazon RDSデータベースの認証情報 ユーザー名: 該当のもの パスワード: 該当のもの DBインスタンス: 該当のもの RDS Proxy とシークレットの関連付け 3-1. Amazon RDS のマネジメントコンソールから Amazon RDS Proxy に作成したシークレットを関連付ける 3-2. 対象のAmazon RDS Proxy を選択し、アクション \u0026gt; 変更 の順に選択する 3-3. 作成したシークレットを追加し、「プロキシを変更」ボタンを押下する IAM Role の変更 Amazon RDS Proxy で利用している IAM Role に対して、secrets への権限許可を追加する ※Resource に追加 接続確認 psql -h \u0026lt;\u0026lt;RDS Proxy のエンドポイント\u0026gt;\u0026gt; -p 5432 -U \u0026lt;\u0026lt;作成した DB ユーザ\u0026gt;\u0026gt;"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/03/06/how-to-deploy-a-whole-directory-of-static-files-to-aws-s3-with-github-actions/",
title: "GitHub Actions で AWS S3 に静的ファイルのディレクトリごとデプロイする方法",
image: "images/logo/github_logo.png",
date: "2024-03-06",
body: "GitHub Actions で AWS S3 に静的ファイルのディレクトリごとデプロイする方法 GitHub Actions で AWS S3 に静的ファイルのディレクトリごとデプロイする方法を備忘録として残しておく 事前準備 GitHub Actions 用の IAM ユーザを作成 GitHub の Environments に上記 IAM ユーザのシークレットを登録 Environments \u0026gt; Environment Secrets S3 のバケットを作成（ホスティングする場合は公開設定にする） S3 のバケット名はグローバルでユニークにする必要がある 公式ドキュメント 前提 S3 のバケットは作成済 Package Manager は npm を使用(yarn でも可) npm build で dist フォルダ配下にデプロイ資産が作成される 実際のコード name: cd-dev on: push: branches: - \u0026#34;develop\u0026#34; workflow_dispatch: jobs: build-deploy: runs-on: ubuntu-latest environment: develop steps: - name: Checkout uses: actions/checkout@v4 # ① - uses: actions/setup-node@v4 with: node-version: 20 cache: \u0026#39;npm\u0026#39; cache-dependency-path: ${{ github.workspace }}/package-lock.json - name: Install Dependencies run: npm install - name: Build run: npm run build - name: Configure AWS Credentials uses: aws-actions/configure-aws-credentials@v1 with: aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} aws-region: ${{ secrets.AWS_REGION }} - name: Deploy to S3 run: aws s3 sync ./dist s3://\u0026lt;\u0026lt;S3 Buckets Name\u0026gt;\u0026gt; --delete # ② # ③ - name: Clear cache run: aws cloudfront create-invalidation --distribution-id \u0026lt;\u0026lt;CloudFront Distribution ID\u0026gt;\u0026gt; --paths \u0026#34;/*\u0026#34; ポイントの説明 ① 依存パッケージをキャッシュする cache: npm or yarn cache-dependency-path: package-lock.json のパスを指定 ② \u0026ndash;delete を付与するとバケットには存在するが、ディレクトリにはないファイルがあった場合に、バケットのファイルを削除する ③ CloudFront のキャッシュが有効になっている場合は以下も行う"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/02/20/how-to-get-a-list-of-registered-users-in-amazon-iam/",
title: "Amazon IAM で登録されているユーザ一覧を取得する方法",
image: "images/logo/aws_logo.svg",
date: "2024-02-20",
body: "Amazon IAM で登録されているユーザ一覧を取得する方法 Amazon IAM で登録されているユーザ一覧を取得する方法について調査した内容を備忘録として残しておく 方法 該当の AWS Console にログインして AWS Cloud Shell 上で以下のコマンドを実行する 実際のコード aws iam list-users \\ | jq -r \u0026#39;.Users[] | [.UserName, .CreateDate, .PasswordLastUsed] | @csv\u0026#39; \\ | tr -d \u0026#39;\u0026#34;\u0026#39; \\ \u0026gt; iam_users_list.csv"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/02/08/configuring-rancher-desktop/",
title: "Rancher Desktop の設定について",
image: "images/logo/docker_logo.png",
date: "2024-02-08",
body: "Rancher Desktop の設定について 普段個人で開発している時は Docker Desktop を使用しているが仕事で使用する場合には従業員数等で有償となる そのため、代替ツールとして Rancher Desktop を調査した結果を備忘録として残しておく 設定について 以下の設定を変更することで動作が速くなる可能性がある 「Preferences」ボタンを押下 Virtual Machine \u0026gt; Volumes \u0026gt; Mount Type を以下に変更する Mount Type: virtiofs"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/02/08/building-a-development-environment-with-visual-studio-code-dev-containers/",
title: "Visual Studio Code Dev Containers での開発環境構築について",
image: "images/logo/vscode_logo.png",
date: "2024-02-08",
body: "Visual Studio Code Dev Containers での開発環境構築について Visual Studio Code Dev Containers での開発環境構築について調査した結果を備忘録として残しておく Dev Containers について 以下のような構成になる 引用元: https://code.visualstudio.com/docs/devcontainers/containers 以下のようなメリットがある プロジェクトごとのミドルウェアなどをコンテナに閉じ込めることができる ホスト環境を汚さない VS Code の Extention もコンテナに閉じ込められる 環境構築を自動化できる 新規に作成したり、別のPCでの作り直しが簡単 環境構築について 前提条件 VS Code で以下の Extention をインストールする Remote Development Dev Containers ※テンプレートを使用する場合 Docker Docker Desktop or Rancher Desktop 実際の例 新規で作成する場合 VS Code の左下の「\u0026gt;\u0026lt;」ボタンを押下 「新しい開発コンテナー\u0026hellip;」 を選択 ベースとなる設定を選択する 基本的には Dockerfile or Docker Compose の話になるのでそちらに慣れていれば問題なくできると思われる テンプレートの使用 コマンドパレットで「Add Dev Container Configuration Files\u0026hellip;」を選択 「ワークスペースに構成を追加する」を選択 「すべての定義を表示\u0026hellip;」を選択 以降は新規で作成する場合と同様 4-1. ℹ️を押下することでテンプレートの使い方やカスタマイズ方法が表示される Tips ホスト側の DB クライアントから接続したい場合 以下の２つのファイルの設定を修正する必要がある ※ポート番号はホスト側と被らないようにしておくこと ソースコードでの設定 設定変更した際はリビルドを行うこと version: \u0026#39;3\u0026#39; services: # 省略・・・ db: # 省略・・・ ports: - \u0026#34;5433:5432\u0026#34; # 省略・・・ { // 省略・・・ \u0026#34;forwardPorts\u0026#34;: [\u0026#34;5433:5432\u0026#34;], // 省略・・・ } DB クライアントでの設定 ポイントとなる設定は以下 ホスト名/アドレス: 127.0.0.1 ポート番号: 5433 ※ソースコード側でマッピングした値 VS Code の設定および拡張機能の追加 以下を設定することで開発者間で同じ設定と拡張機能をインストールした状態で開発が行える { \u0026#34;customizations\u0026#34;: { \u0026#34;vscode\u0026#34;: { // 設定値は、拡張機能 \u0026gt; ⚙️ \u0026gt; 拡張機能 ID のコピーで取得 \u0026#34;extensions\u0026#34;: [ \u0026#34;misogi.ruby-rubocop\u0026#34; ], // 設定値は、 settings.json で取得 \u0026#34;settings\u0026#34;: { \u0026#34;editor.tabSize\u0026#34;: 2, \u0026#34;editor.renderWhitespace\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;files.trimTrailingWhitespace\u0026#34;: true, \u0026#34;files.insertFinalNewline\u0026#34;: true, \u0026#34;diffEditor.ignoreTrimWhitespace\u0026#34;: false } } } }"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/02/06/how-to-dmarc-support-for-custom-domains-in-amazon-ses/",
title: "Amazon SES でカスタムドメインに対して DMARC 対応を行う方法",
image: "images/logo/aws_logo.svg",
date: "2024-02-06",
body: "Amazon SES でカスタムドメインに対して DMARC 対応を行う方法 Amazon SES でカスタムドメインに対して DMARC 対応を行う方法について調査した内容を備忘録として残しておく 前提 対象のドメインを「検証済み ID」として作成済 DKIM が設定済 DNS サービスの提供元が Route 53 方法 Amazon SES \u0026gt; 設定: 検証済み ID を選択 対象の ID を選択 カスタム MAIL FROM ドメイン \u0026gt; 「編集」ボタンを押下 以下のように設定して「保存」ボタンを押下 カスタム MAIL FROM ドメインの使用: チェック MAIL FROM ドメイン: 任意の値 MX 障害時の動作: 以下のどちらか デフォルトの MAIL FROM ドメインの使用 メッセージの拒否 DNS レコードの発行を行う Route 53 \u0026gt; ホストゾーン \u0026gt; {対象のドメイン} を選択 「レコードを作成」を押下 以下を設定する レコード名: _dmarc レコードタイプ: TXT 値: v=DMARC1; p=none テストEメール確認して OK なら値を「v=DMARC1; p=reject」に変更 Amazon SES の DMARC 認証プロトコルへの準拠参照 確認方法 例えば、以下のような方法で確認する テスト E メールを送信して SPF, DKIM, DMARC が pass になっていることを確認 DMARC Inspector"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/02/01/how-to-backup-and-restore-an-amazon-cognito-user-pool/",
title: "Amazon Cognito のユーザプールのバックアップおよびリストアを行う方法",
image: "images/logo/aws_logo.svg",
date: "2024-02-01",
body: "Amazon Cognito のユーザプールのバックアップおよびリストアを行う方法 Amazon Cognito のユーザプールのバックアップおよびリストアを行う方法について調査した内容を備忘録として残しておく 方法 以下の２つの方法が考えられる Cognito User Profiles Export リファレンスアーキテクチャ Lambda でユーザプールの一覧を取得して csv で出力して S3 に保存する ※リストアはユーザ CSV インポート機能で行う 実際のコード const { stringify } = require(\u0026#34;csv-stringify/sync\u0026#34;); module.exports = async (params) =\u0026gt; { const csvString = stringify(params, { header: true, quoted_string: false }) return csvString; }; const { CognitoIdentityProvider } = require(\u0026#34;@aws-sdk/client-cognito-identity-provider\u0026#34;); const cognito = new CognitoIdentityProvider(); module.exports = async (param) =\u0026gt; { let cognitoUsers = new Array(); let cognitoData; try { let params = { UserPoolId: process.env.USER_POOL_ID, }; let paginationToken = \u0026#34;\u0026#34;; while (paginationToken !== undefined) { cognitoData = await cognito.listUsers(params); paginationToken = cognitoData.PaginationToken; params.PaginationToken = paginationToken; if (cognitoData.Users.length \u0026gt; 0) { cognitoData.Users.forEach((user) =\u0026gt; { // ① を参照 let userAttributes = {}; userAttributes[\u0026#34;email\u0026#34;] = (user[\u0026#34;Attributes\u0026#34;].find(attr =\u0026gt; attr[\u0026#34;Name\u0026#34;] === \u0026#34;email\u0026#34;) || {})[\u0026#34;Value\u0026#34;] || \u0026#34;\u0026#34;; userAttributes[\u0026#34;email_verified\u0026#34;] = (user[\u0026#34;Attributes\u0026#34;].find(attr =\u0026gt; attr[\u0026#34;Name\u0026#34;] === \u0026#34;email_verified\u0026#34;) || {})[\u0026#34;Value\u0026#34;]; userAttributes[\u0026#34;cognito:mfa_enabled\u0026#34;] = \u0026#34;FALSE\u0026#34;; userAttributes[\u0026#34;cognito:username\u0026#34;] = userAttributes[\u0026#34;email\u0026#34;]; cognitoUsers.push(userAttributes); }); } else { console.error(\u0026#34;登録ユーザーが存在しません。\u0026#34;); return cognitoUsers; } } } catch (error) { console.error(error); return cognitoUsers; } return cognitoUsers; }; ※① CSV ファイルヘッダーのダウンロード (AWS CLI)で必要な項目を取得して設定する const { S3Client, PutObjectCommand } = require(\u0026#34;@aws-sdk/client-s3\u0026#34;); const convertCsvString = require(\u0026#34;./convertCsvString\u0026#34;); const getCognitoUsers = require(\u0026#34;./getCognitoUsers\u0026#34;); exports.handler = async (event) =\u0026gt; { let statusCode = 200; const headers = { \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, }; let cognitoUsers = await getCognitoUsers() if (cognitoUsers.length === 0) { return { isBase64Encoded: false, statusCode: 404, headers: headers, multiValueHeaders: {}, body: `{\u0026#34;message\u0026#34; : \u0026#34;登録ユーザーが存在しません。\u0026#34;}`, }; } const csvString = await convertCsvString(cognitoUsers); const client = new S3Client({ region: process.env.AWS_REGION }); const input = { Bucket: process.env.BUCKET, Key: \u0026#34;{任意の S3 フォルダパス}/backup_user_pool.csv\u0026#34;, Body: csvString }; const command = new PutObjectCommand(input) statusCode = await client.send(command) return { isBase64Encoded: false, statusCode: statusCode, headers: headers, multiValueHeaders: {}, body: `{\u0026#34;message\u0026#34; : \u0026#34;Cognito User Pool のバックアップが完了しました。\u0026#34;}`, }; };"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/01/31/how-to-combine-with-cognito-authentication-when-deploying-aws-synthetics-canary-for-external-monitoring/",
title: "外形監視に AWS Synthetics Canary を導入する場合に Cognito 認証と組み合わせる方法",
image: "images/logo/aws_logo.svg",
date: "2024-01-31",
body: "外形監視に AWS Synthetics Canary を導入する場合に Cognito 認証と組み合わせる方法 外形監視に AWS Synthetics Canary を導入する場合に Cognito 認証と組み合わせる方法について調査した内容を備忘録として残しておく 方法 CloudWatch \u0026gt; Synthetics Canary を選択 「Canary を作成」ボタンを押下 以下を設定 設計図を使用する 設計図: API Canary Canary ビルダー: 任意の Canary 名 Amazon API Gateway API を使用中: チェックを入れる API を選択: API Gateway から API とステージを選択 使用している API, ステージを選択 Host Name: 使用している Host Name を指定 HTTP リクエスト HTTP リクエストを追加ボタンを押下 監視したい API の情報を設定 スクリプトエディタ: スクリプトを参照 スケジュール: 任意のスケジュールを選択 アクセス許可 IAM ロール: 既存のロールを選択 ポリシーを参照 「保存」ボタンを押下 実際のコード スクリプト 基本的にはデフォルトのままで良いが Request Header に Cognito の ID トークンを付与する必要がある const synthetics = require(\u0026#39;Synthetics\u0026#39;); const log = require(\u0026#39;SyntheticsLogger\u0026#39;); const syntheticsConfiguration = synthetics.getConfiguration(); const AWS = require(\u0026#39;aws-sdk\u0026#39;); // 追加 const apiCanaryBlueprint = async function () { const response = getIdToken(); // 追加 const bearerToken = (await response).AuthenticationResult.IdToken; // 追加 syntheticsConfiguration.setConfig({ restrictedHeaders: [], // Value of these headers will be redacted from logs and reports restrictedUrlParameters: [] // Values of these url parameters will be redacted from logs and reports }); // Handle validation for positive scenario const validateSuccessful = async function(res) { return new Promise((resolve, reject) =\u0026gt; { if (res.statusCode \u0026lt; 200 || res.statusCode \u0026gt; 299) { throw new Error(res.statusCode + \u0026#39; \u0026#39; + res.statusMessage); } let responseBody = \u0026#39;\u0026#39;; res.on(\u0026#39;data\u0026#39;, (d) =\u0026gt; { responseBody += d; }); res.on(\u0026#39;end\u0026#39;, () =\u0026gt; { // Add validation on \u0026#39;responseBody\u0026#39; here if required. resolve(); }); }); }; // Set request option for 検証 https://api.xxx-xxx.com let requestOptionsStep1 = { hostname: \u0026#39;api.xxx-xxx.com\u0026#39;, method: \u0026#39;GET\u0026#39;, path: \u0026#39;/users/xxx\u0026#39;, port: \u0026#39;443\u0026#39;, protocol: \u0026#39;https:\u0026#39;, body: \u0026#34;\u0026#34;, headers: { \u0026#39;Authorization\u0026#39;: \u0026#39;Bearer \u0026#39; + bearerToken, // 追加 } }; requestOptionsStep1[\u0026#39;headers\u0026#39;][\u0026#39;User-Agent\u0026#39;] = [synthetics.getCanaryUserAgentString(), requestOptionsStep1[\u0026#39;headers\u0026#39;][\u0026#39;User-Agent\u0026#39;]].join(\u0026#39; \u0026#39;); // Set step config option for 検証 https://api.xxx-xxx.com let stepConfig1 = { includeRequestHeaders: true, includeResponseHeaders: true, restrictedHeaders: [\u0026#39;X-Amz-Security-Token\u0026#39;, \u0026#39;Authorization\u0026#39;], // Restricted header values do not appear in report generated. includeRequestBody: true, includeResponseBody: true, continueOnHttpStepFailure: true }; // 修正 Value contains non-ASCII characters. になるので 検証 =\u0026gt; 削除 await synthetics.executeHttpStep(\u0026#39;https://api.xxx-xxx.com\u0026#39;, requestOptionsStep1, validateSuccessful, stepConfig1); }; exports.handler = async () =\u0026gt; { return await apiCanaryBlueprint(); }; // 以下の関数追加 // ID トークン取得 async function getIdToken() { const secretsManager = new AWS.SecretsManager({ region: {RegionName}, }); const sec_response = await secretsManager .getSecretValue({ SecretId: {SecretId}, }) .promise(); const secretObject = JSON.parse(sec_response.SecretString); try { const cognito = new AWS.CognitoIdentityServiceProvider(); return await cognito.initiateAuth({ AuthFlow: \u0026#39;USER_PASSWORD_AUTH\u0026#39;, ClientId: secretObject.client_id, AuthParameters: { USERNAME: secretObject.email, PASSWORD: secretObject.password, }, }).promise(); } catch (err) { throw err; } } ポリシー 追加部分のみ抜粋 cognito-idp:InitiateAuth へのアクセス許可が必要 ※Secret Manager は必要に応じて追加 { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ ・・・ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;secretsmanager:GetResourcePolicy\u0026#34;, \u0026#34;secretsmanager:GetSecretValue\u0026#34;, \u0026#34;secretsmanager:DescribeSecret\u0026#34;, \u0026#34;secretsmanager:ListSecretVersionIds\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:secretsmanager:ap-northeast-1:xxxxxxxxxxxx:secret:*\u0026#34; ] }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;cognito-idp:InitiateAuth\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:cognito-idp:ap-northeast-1:xxxxxxxxxxxx:userpool/ap-northeast-1_xxxxxxxxx\u0026#34; ] } ] }"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/01/29/how-to-register-users-and-set-passwords-with-amazon-cognito-from-command/",
title: "Amazon Cognito でコマンドからユーザ登録およびパスワード設定を行う方法",
image: "images/logo/aws_logo.svg",
date: "2024-01-29",
body: "Amazon Cognito でコマンドからユーザ登録およびパスワード設定を行う方法 Amazon Cognito でコマンドからユーザ登録およびパスワード設定を行う方法について調査した内容を備忘録として残しておく 方法 該当の AWS Console にログインして AWS Cloud Shell 上で以下のコマンドを実行する 実際のコード ユーザ登録 \u0026ndash;user-attributes は必要に応じて増やす ※「\u0026ndash;message-action SUPPRESS」のオプションを付与することで対象ユーザへの通知を止めることが可能 aws cognito-idp admin-create-user \\ --user-pool-id {ユーザプール ID} \\ --username {E メールアドレス ※E メールアドレスをユーザ名に設定した場合} \\ --user-attributes Name=email,Value={E メールアドレス} \\ Name=email_verified,Value=TRUE \\ --message-action SUPPRESS パスワード設定 \u0026ndash;no-permanent は仮パスワード扱い ※「\u0026ndash;permanent」オプションを付与で恒久パスワード扱いになる aws cognito-idp admin-set-user-password \\ --user-pool-id {ユーザプール ID} \\ --username {ユーザ名 or sub} \\ --password {password} \\ --no-permanent"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/01/17/tips-about-aws/",
title: "AWS についての Tips",
image: "images/logo/aws_logo.svg",
date: "2024-01-17",
body: "AWS についての Tips AWS についての Tips について備忘録として残しておく ※適宜、更新予定 DB の接続情報の確認 EC2 踏み台の Public IP を確認 ※通常は Elastic IP を付与しているので固定のはず EC2 \u0026gt; リソース \u0026gt; 該当のリソースを選択 パブリック IPv4 アドレス を確認 RDS RDS \u0026gt; データベース \u0026gt; 該当の DB 識別子を選択 接続とセキュリティ \u0026gt; エンドポイントを確認 RDS プロキシを設定している場合は以下 RDS \u0026gt; データベース \u0026gt; 該当の DB 識別子を選択 プロキシ \u0026gt; 該当のプロキシ識別子を選択 プロキシエンドポイント \u0026gt; エンドポイントを確認 Secret Manager DB のパスワードの設定確認方法 AWS Secrets Manager \u0026gt; DB のユーザパスワードを選択 シークレットの値 \u0026gt; [シークレットの値を取得する]ボタンを押下 パスワードを確認する バッチ処理について AWS 内で定期実行バッチの有無を確認する場合は以下を確認する Amazon EventBridge Scheduler Amazon EventBridge \u0026gt; スケジューラ \u0026gt; スケジュール \u0026gt; 該当のスケジュールを選択 スケジュール \u0026gt; cron 式 を確認 Amazon EventBridge Rule Cloud Formation で設定した場合はこっちを確認する ※Cloud Formation の定義を見た方が良いと思われる Amazon EventBridge \u0026gt; バス \u0026gt; ルール \u0026gt; 該当の関数を選択 イベントスケジュール \u0026gt; cron 式を確認 ECS 割愛 ※使用パターンが出た時に改めて記載 AWS Batch 割愛 ※使用パターンが出た時に改めて記載 ソース ソース内で cron あるいは schedule で検索 環境変数について CloudFormation CloudFormation を使用している場合には以下を確認することで設定値を確認可能 CloudFormation \u0026gt; スタック \u0026gt; 該当のスタック [パラメータ]タブの該当の値を確認 Cognito のメールについて 送信元メールアドレスの変更 Amazon Cognito \u0026gt; ユーザープール \u0026gt; {対象のユーザプール} を選択 メッセージング \u0026gt; E メール \u0026gt; 「編集」ボタンを押下 以下のように設定 E メールプロバイダー: Amazon SES で E メールを送信 - 推奨 送信元の E メールアドレス: 任意の E メールアドレス SES で検証済である必要あり 送信者の名前 - オプション 任意のメールアドレス メッセージ本文の変更 Amazon Cognito \u0026gt; ユーザープール \u0026gt; {対象のユーザプール} を選択 メッセージング \u0026gt; メッセージテンプレート \u0026gt; メッセージタイプを選択 検証メッセージ: 確認コード 招待メッセージ: 仮パスワード MFA メッセージ: 2 段階認証 「編集」ボタンを押下 件名, メッセージを修正して「変更を保存」ボタンを押下 HTML コードでカスタマイズ可能なため、改行は\u0026lt;br\u0026gt;タグで行う Cognito の検索について 検索に使用できる属性 検索に使用できる属性は以下の通り ※カスタム属性は使用できない username ※大文字/小文字区別 email phone_number name given_name family_name preferred_username cognito:user_status コンソールでは status 大文字/小文字区別しない status コンソールでは有効 大文字/小文字区別 sub 検索条件について 以下の条件が指定可能 ※部分一致は不可 完全一致 = 前方一致 ^= S3 について 空オブジェクトの扱いについて aws s3 cp や aws s3 sync では空オブジェクト(空フォルダ等)は同期されないため注意が必要 ※ダミーファイルを置く等しないといけない"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/01/16/how-to-get-a-list-of-users-registered-in-user-pool-in-amazon-cognito/",
title: "Amazon Cognito でユーザプールに登録されているユーザ一覧を取得する方法",
image: "images/logo/aws_logo.svg",
date: "2024-01-16",
body: "Amazon Cognito でユーザプールに登録されているユーザ一覧を取得する方法 Amazon Cognito でユーザプールに登録されているユーザ一覧を取得する方法について調査した内容を備忘録として残しておく 方法 該当の AWS Console にログインして AWS Cloud Shell 上で以下のコマンドを実行する 実際のコード aws cognito-idp list-users \\ --user-pool-id {該当のユーザプール ID} \\ --filter \u0026#34;{検索に使用する属性} = \\\u0026#34;{検索文字列}\\\u0026#34;\u0026#34; \\ --attributes-to-get \u0026#34;{取得する属性(スペース区切りで複数指定可)}\u0026#34; \\ | jq -r \u0026#39;.Users[] | [.Username, .Attributes[].Value] | @csv\u0026#39; \\ | tr -d \u0026#39;\u0026#34;\u0026#39; \\ \u0026gt; user_pool_list.csv"
},
{
url: "https://kkawazoe.github.io/amp/blog/2024/01/16/how-to-get-a-list-of-registered-functions-in-amazon-lambda/",
title: "Amazon Lambda で登録されている関数一覧を取得する方法",
image: "images/logo/aws_logo.svg",
date: "2024-01-16",
body: "Amazon Lambda で登録されている関数一覧を取得する方法 Amazon Lambda で登録されている関数一覧を取得する方法について調査した内容を備忘録として残しておく 方法 該当の AWS Console にログインして AWS Cloud Shell 上で以下のコマンドを実行する 実際のコード aws lambda list-functions --region {リージョン名} \\ | jq \u0026#39;.Functions[] | [.FunctionName]\u0026#39; \\ | jq -rs \u0026#39;map([.[]])[] | @csv\u0026#39; \\ | tr -d \u0026#39;\u0026#34;\u0026#39; \\ \u0026gt; lambda-functions-list.csv"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/12/28/how-to-send-push-notifications-with-amazon-pinpoint-api/",
title: "Amazon Pinpoint API で push 通知を送信する方法",
image: "images/logo/aws_logo.svg",
date: "2023-12-28",
body: "Amazon Pinpoint API で push 通知を送信する方法 Amazon Pinpoint API で push 通知を送信する方法について調査した内容を備忘録として残しておく 前提構成: 前回記事を参照 方法 デベロッパーガイドを参照 ※上記の以下の部分はパラメータがほとんど同じため共通化した方が良さそう リファクタリング前 ・・・ if (service == \u0026#39;GCM\u0026#39;) { var messageRequest = { \u0026#39;Addresses\u0026#39;: { [token]: { \u0026#39;ChannelType\u0026#39;: \u0026#39;GCM\u0026#39; } }, \u0026#39;MessageConfiguration\u0026#39;: { \u0026#39;GCMMessage\u0026#39;: { \u0026#39;Action\u0026#39;: action, \u0026#39;Body\u0026#39;: message, \u0026#39;Priority\u0026#39;: priority, \u0026#39;SilentPush\u0026#39;: silent, \u0026#39;Title\u0026#39;: title, \u0026#39;TimeToLive\u0026#39;: ttl, \u0026#39;Url\u0026#39;: url } } }; } else if (service == \u0026#39;APNS\u0026#39;) { var messageRequest = { \u0026#39;Addresses\u0026#39;: { [token]: { \u0026#39;ChannelType\u0026#39; : \u0026#39;APNS\u0026#39; } }, \u0026#39;MessageConfiguration\u0026#39;: { \u0026#39;APNSMessage\u0026#39;: { \u0026#39;Action\u0026#39;: action, \u0026#39;Body\u0026#39;: message, \u0026#39;Priority\u0026#39;: priority, \u0026#39;SilentPush\u0026#39;: silent, \u0026#39;Title\u0026#39;: title, \u0026#39;TimeToLive\u0026#39;: ttl, \u0026#39;Url\u0026#39;: url } } }; } ・・・ リファクタリング後 ・・・ var messageRequest = { \u0026#39;Addresses\u0026#39;: { [token]: { \u0026#39;ChannelType\u0026#39;: service } }, \u0026#39;MessageConfiguration\u0026#39;: { /** * リファクタリングポイント: * []とテンプレートリテラルを使用して連装配列の key を動的に生成する */ [`${service}Message`]: { \u0026#39;Action\u0026#39;: action, \u0026#39;Body\u0026#39;: message, \u0026#39;Priority\u0026#39;: priority, \u0026#39;SilentPush\u0026#39;: silent, \u0026#39;Title\u0026#39;: title, \u0026#39;TimeToLive\u0026#39;: ttl, \u0026#39;Url\u0026#39;: url } } }; ・・・"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/12/20/how-to-set-up-push-notification-with-aws-and-firebase/",
title: "AWS と Firebase を連携して Push 通知を行う場合の設定について",
image: "images/logo/aws_logo.svg",
date: "2023-12-20",
body: "AWS と Firebase を連携して Push 通知を行う場合の設定について AWS と Firebase を連携して Push 通知を行う場合の設定について調査した内容を備忘録として残しておく 方法 Amazon Pinpoint を使用 Amazon Pinpoint \u0026gt; 使用を開始する \u0026gt; Pinpoint campaign orchestration を選択 [プロジェクトを管理]ボタンを押下 該当のプロジェクト名を選択 設定 \u0026gt; プッシュ通知 を選択 [編集]ボタンを押下 Apple Push Notification service (APNs) デフォルトの認証タイプ キー認証情報(推奨) 有効にする APN チャネルを選択 任意のチャネルを選択 キー ID Apple Developer Programで確認 バンドル識別子 Apple Developer Programで確認 チーム識別子 Apple Developer Programで確認 認証キー(.p8 ファイル) Apple Developer Programで取得 Firebase Cloud Messaging (FCM) デフォルトの認証タイプ トークン認証情報(推奨) サービス json (.json ファイル) Firebase で発行可能な秘密鍵を選択 ※google-services.json ではないので注意"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/12/20/how-to-access-postgresql-built-in-aws-ec2-with-pgadmin4/",
title: "pgAdmin4 で AWS の EC2 内に構築された PostgreSQL にアクセスする方法",
image: "images/logo/postgre_sql_logo.png",
date: "2023-12-20",
body: "pgAdmin4 で AWS の EC2 内に構築された PostgreSQL にアクセスする方法 pgAdmin4 で AWS の EC2 内に構築された PostgreSQL にアクセスする方法を毎回手順を確認するため備忘録として残しておく 方法 事前作業 AWS Console にて接続に必要な情報を控えておく EC2 踏み台の Public IP を確認 EC2 \u0026gt; リソース \u0026gt; 該当のリソースを選択 パブリック IPv4 アドレス を確認 Elastic IP が紐付けられている場合は以下を確認する EC2 \u0026gt; Elastic IP を選択 関連付けられたインスタンス ID が一致するものを検索する 割り当てられた IPv4 アドレス を確認 RDS プロキシの設定がされている場合は以下を確認する RDS \u0026gt; プロキシ \u0026gt; {該当の DB 識別子} を選択 プロキシエンドポイントを確認 その他 DB のパスワード (Secrets Manager)の設定確認方法 AWS Secrets Manager \u0026gt; DB のユーザパスワードを選択 シークレットの値 \u0026gt; [シークレットの値を取得する]ボタンを押下 パスワードを確認する pgAdmin4 での作業 プロパティにそれぞれ以下の値を設定する 接続 ホスト名/アドレス: {事前作業で確認した RDS の DB 識別子} ポート番号: 5432 ※別のを指定している場合はそちらに従う 管理用データベース: postgres ※別のを指定している場合はそちらに従う ユーザ名: postgres ※別のを指定している場合はそちらに従う パスワード: {事前作業で確認した DB のパスワード} SSH トンネル SSH トンネリングを使用: オン トンネルホスト: {事前作業で確認した EC2 の Public IP} トンネルポート番号: 22 ユーザ名: ec2-user 認証: 識別情報ファイルを選択 識別情報ファイル: 該当 EC2 接続用の pem キーを選択"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/12/02/how-to-measure-and-display-event-parameters-set-by-gtm-in-ga/",
title: "Google Analytics で Google Tag Manager で設定したイベントパラメータを計測および表示を行う方法",
image: "images/logo/google_analytics_logo.png",
date: "2023-12-02",
body: "Google Analytics で Google Tag Manager で設定したイベントパラメータを計測および表示を行う方法 Google Analytics(GA) で Google Tag Manager(以下 GTM) で設定したイベントパラメータを計測および表示を行う方法を備忘録として残しておく 前提 ソースコードに GTM との連携用のスクリプトが導入済であること ソースコード上に以下のようなカスタムイベント発火のコードが設定されていること pushDataLayer({ event: \u0026#34;watch_video\u0026#34;, userID: userId, datetime: `${date}${time}`, }); 方法 [管理] \u0026gt; [データの収集と修正] \u0026gt; [データ ストリーム]を選択 対象のサイトを選択 測定 ID をコピーして退避しておく [Google マーケティング プラットフォーム] \u0026gt; [タグマネージャー]を選択 GTM での作業 変数の登録 [変数] \u0026gt; [ユーザ定義変数] \u0026gt; [新規]ボタンを押下 変数名に「user_id」と入力 変数のタイプに[データレイヤーの変数]を選択 データレイヤーの変数名に「userId」を入力 [保存]ボタンを押下 「datetime」も同じように登録する トリガーの登録 [トリガー] \u0026gt; [新規]ボタンを押下 名称に「動画再生」と入力 [トリガーの設定]の中央アイコンを押下 [その他] \u0026gt; [カスタムイベント]を選択 イベント名に「watch_video」を入力 [保存]ボタンを押下 タグの登録 [タグ] \u0026gt; [新規]ボタンを押下 名称に「動画再生」と入力 [トリガー]の中央アイコンを押下 トリガーの登録で登録した「動画再生」を選択 [タグの設定]の中央アイコンを押下 [Google アナリティクス] \u0026gt; [Google アナリティクス: GA4 イベント]を選択 測定 ID に事前に退避しておいた測定 ID を入力 イベント名に「watch_video」を入力 イベント パラメータに 「user_id」を入力 値に「{{user_id}}」を入力 イベント パラメータに 「datetime」を入力 値に「{{datetime}}」を入力 [保存]ボタンを押下 [プレビュー]ボタンを押下してカスタムイベントが測定されることを確認 [公開]ボタンを押下 GA での作業 カスタムディメンションの設定 Google Analytics にログイン [管理]\u0026gt;[データの表示]\u0026gt;[カスタム定義]を選択 [カスタム ディメンションを作成]を押下 ディメンション名に「ユーザID」と入力 範囲に「イベント」を選択 説明に任意の値を入力 イベント パラメータに「user_id」を入力 「保存」ボタンを押下 datetime も同じように登録 ※ディメンション名は「イベント実行時間」 動画再生時間収集用の探索の設定 ※探索は前日までのデータしか対象にできないため設定の確認は後日に行うことになる [探索]を選択 [空白]を選択 ディメンションの右横にある[+]ボタンを押下 [カスタム]\u0026gt;[ユーザID]のチェックを入れる [カスタム]\u0026gt;[イベント実行時間]のチェックを入れる [インポート]ボタンを押下 期間を対象期間に変更する [フィルタ]\u0026gt;[イベント名]を選択 [条件]\u0026gt;[マッチ タイプを選択してください]に「次と完全一致」を選択 [条件]\u0026gt;「式を入力」に「watch_video」を入力 後は、表示したい項目を行、列、値に組み込んでいく"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/12/01/debug-to-local-environment-with-gtm/",
title: "Google Tag Manager でローカル環境のデバッグを行う方法",
image: "images/logo/google_tag_manager_logo.svg",
date: "2023-12-01",
body: "Google Tag Manager でローカル環境のデバッグを行う方法 Google Tag Manager でローカル環境のデバッグを行う方法を備忘録として残しておく 前提 Google Tag Manager(以下 GTM) に検証用のコンテナを準備して コンテナ ID をローカル環境に設定してあること ローカル環境を起動してブラウザでアクセスできる状態であること 方法 GTM にログイン [プレビュー]リンクから Tag Assistant を起動 Tag Assistantの「Your website’s URL」にローカル環境のURLを入力 [Connect] ボタンを押下"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/11/26/refactoring-to-multi-search-conditional-with-rails/",
title: "rails で複数検索条件のリファクタリング",
image: "images/logo/rails_logo.svg",
date: "2023-11-26",
body: "rails で複数検索条件のリファクタリング 検索条件の入力が複数あるような画面で入力があった条件のみを AND 条件としたい場合、メソッド内に if 文が乱立してしまい、可読性が下がってしまう そのため、将来的に条件が追加された場合でも、可読性が下がらないようにリファクタリングした内容を備忘録として残しておく 環境 ruby: 3.0.5 rails: 6.1.7 方法 検索条件をそれぞれ scope に切り出す scope 内で skip 条件を next if で記載する メソッドでそれぞれの scope を呼び出す 前提 検索条件はメソッドの引数として Hash 形式で渡される 実際の例 タイトルと内容で入力があった場合に AND 条件で検索を行い、条件にあった本を取得する ※全ての条件が未入力の場合は全件表示 class Book \u0026lt; ApplicationRecord scope :with_title, -\u0026gt; (title) do next if title.blank? where(\u0026#39;title LIKE ?\u0026#39;, \u0026#34;%#{title}%\u0026#34;) end scope :with_summary, -\u0026gt; (summary) do next if summary.blank? where(\u0026#39;summary LIKE ?\u0026#39;, \u0026#34;%#{summary}%\u0026#34;) end def self.search(options: {}) with_title(options[:title]) .with_summary(options[:summary]) end end"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/11/13/how-to-install-warp-with-mac/",
title: "Mac に Warp をインストールする方法",
image: "images/logo/icons8-mac-os-logo.svg",
date: "2023-11-13",
body: "Mac に Warp をインストールする方法 Mac に Warp をインストールする方法を備忘録として残しておく 手順 home brew を使用してインストール $ brew install --cask warp 設定 公式サイト を参照"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/06/05/how-to-run-go-tour-locally/",
title: "Go Tour のローカルでの実行方法",
image: "images/logo/golang_logo.png",
date: "2023-06-05",
body: "Go Tour のローカルでの実行方法 Go Tour をローカルで実行しようとした際に手順通りに行った際にエラーが発生したため調査を行った際の調査結果を備忘録として残しておく 環境 OS : MacOS Ventura(13.4) golang: go1.20.4 エラー内容 go get github.com/atotto/go-tour-jp/gotour gotour #=\u0026gt; zsh: command not found: gotour 対応方法 以下のコマンドで実行する tour"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/04/29/how-to-manage-split-routes-with-rails/",
title: "rails で routes.rb を分割管理する方法",
image: "images/logo/rails_logo.svg",
date: "2023-04-29",
body: "rails で routes.rb を分割管理する方法 プロジェクト自体が大きくなってきた際に routes.rb にまとめて記載すると見づらくて追加しようとした際にわかりずらい課題が発生した そのため、rails で routes.rb を分割管理する方法を備忘録として残しておく 参考 環境 ruby: 3.0.5 rails: 6.1.7 方法 concern を使用して共通の routes を定義する draw を使用して別ファイルに分割する 前提 config |-routes | |-concerns.rb # プロジェクト共通の routes | |-foo_service_provider.rb # Foo サービス用の routes | |-hoge_service_provider.rb # Hoge サービス用の routes | |-service_provider_common.rb # サービス共通の routes |-routes.rb 実際の例 concern :loggable do get \u0026#34;login\u0026#34;, to: \u0026#34;sessions#new\u0026#34; post \u0026#34;login\u0026#34;, to: \u0026#34;sessions#create\u0026#34; delete \u0026#34;logout\u0026#34;, to: \u0026#34;sessions#destroy\u0026#34; end concern :data do namespace :data do get \u0026#34;download\u0026#34; end end namespace :service_provider, path: \u0026#34;services\u0026#34; do concerns :loggable scope :home, as: :home do get \u0026#34;/\u0026#34;, to: \u0026#34;home#index\u0026#34; end end draw(:service_provider_common) namespace :service_provider, path: \u0026#34;services\u0026#34; do concerns :data end draw(:service_provider_common) namespace :service_provider, path: \u0026#34;services\u0026#34; do resources :users, only: [:index, :show] end # == Route Map # # Prefix Verb URI Pattern Controller#Action # admin_login GET /admin/login(.:format) admin/sessions#new # POST /admin/login(.:format) admin/sessions#create # admin_logout DELETE /admin/logout(.:format) admin/sessions#destroy # foo_service_provider_login GET /foo/services/login(.:format) foo/service_provider/sessions#new # POST /foo/services/login(.:format) foo/service_provider/sessions#create # foo_service_provider_logout DELETE /foo/services/logout(.:format) foo/service_provider/sessions#destroy # foo_service_provider_home GET /foo/services/home(.:format) foo/service_provider/home#index # foo_service_provider_users GET /foo/services/users(.:format) foo/service_provider/users#index # foo_service_provider_user GET /foo/services/users/:id(.:format) foo/service_provider/users#show # hoge_service_provider_data_download GET /hoge/services/data/download(.:format) hoge/service_provider/data#download # hoge_service_provider_users GET /hoge/services/users(.:format) hoge/service_provider/users#index # hoge_service_provider_user GET /hoge/services/users/:id(.:format) hoge/service_provider/users#show Rails.application.routes.draw do draw(:concerns) namespace :admin do concerns :loggable end namespace :foo do draw(:foo_service_provider) end namespace :hoge do draw(:hoge_service_provider) end end"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/04/12/not-displayed-image-jpeg-for-production-with-rails/",
title: "rails で本番環境で画像が表示されない場合に確認すること(jpeg)",
image: "images/logo/rails_logo.svg",
date: "2023-04-12",
body: "rails で本番環境で画像が表示されない場合に確認すること(jpeg) rails で本番環境で画像が表示されない場合に確認することを備忘録として残しておく ※表示されない画像が jpeg の場合 環境 ruby: 3.0.5 rails: 6.1.7 事象について 開発環境では表示されていた画像が本番環境にデプロイしてみると画像が表示されない事象が発生した。 ※scss の background-image の image-url かと思ったが view ファイルの image_tag で発生していた sass-rails 原因について assets-precompile 時に xxx.jpeg =\u0026gt; xxx.jpg に統一されるため、 Not Found 扱いになるらしい 上記のため、 image_tag で指定している拡張子を jpg に指定してあげる必要がある ※可能であれば、画像自体の拡張子を jpg に統一してあげると手戻りがないと思われる"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/02/11/migration-active-model-serializers-to-panko-serializer-with-rails/",
title: "rails で ActiveModelSerializers から PankoSerializer に移行する",
image: "images/logo/rails_logo.svg",
date: "2023-02-11",
body: "rails で ActiveModelSerializers から PankoSerializer に移行する rails で ActiveModelSerializers から PankoSerializer に移行する手順を備忘録として残しておく ※今回のは、単純な serializer のみのため、panko_serializer について検証が必要 環境 ruby: 3.0.5 rails: 6.1.7 active_model_serializers: 0.10.13 panko_serializer: 0.7.9 実際のソース [Gemfile] - gem \u0026#39;active_model_serializers\u0026#39; + gem \u0026#39;panko_serializer\u0026#39; [serializer] 継承するクラスを変更 - class Book::ListSerializer \u0026lt; ActiveModel::Serializer + class Book::ListSerializer \u0026lt; Panko::Serializer attributes( :id, :title, :summary, :restrict, :to_favorite_registered_count ) def restrict Book.restricts[object.restrict] end end [controller] each_serializer を使用する場合 def index @books = Book.all - render json: @books, each_serializer: Book::ListSerializer + render json: Panko::ArraySerializer.new(@books, each_serializer: Book::ListSerializer).to_json end 単一の serializer を使用する場合 def show @book = Book.find(params[:id]) - render json: @book, serializer: BookSerializer + render json: BookSerializer.new.serialize_to_json(@book) end 性能比較について 参考 を参照"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/02/08/how-to-redirect-to-get-transition-url-with-rails/",
title: "rails で遷移元の URL を取得してリダイレクトする方法",
image: "images/logo/rails_logo.svg",
date: "2023-02-08",
body: "rails で遷移元の URL を取得してリダイレクトする方法 rails で遷移元の URL を取得してリダイレクトする方法を備忘録として残しておく 環境 ruby: 2.7.6 rails: 5.2.8.1 仕様 お気に入り登録のようにDB更新を行いたいが、画面遷移はさせたくない (遷移元が複数ある かつ ユーザビリティ的に良くない)ため 画面遷移させないようにしたい 実際のソース controller の該当アクションを以下のようにする class FavoritesController \u0026lt; ApplicationController def create redirect_back fallback_location: root_path end end # 以下も上手くいくが referer が取得できなかった場合を考えると上が良さそう class FavoritesController \u0026lt; ApplicationController def create redirect_to request.referer end end"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/02/03/how-to-validate-unique-for-multi-columns-with-rails/",
title: "rails で複合項目で一意性チェックを行う方法",
image: "images/logo/rails_logo.svg",
date: "2023-02-03",
body: "rails で複合項目で一意性チェックを行う方法 rails で複合項目で一意性チェックを行う方法を備忘録として残しておく 環境 ruby: 3.0.5 rails: 6.1.7 実際のコード [ER 図] [model] uniqueness + scope で validate を行う class Book has_many :book_categories, dependent: :destroy has_many :categories, through: :book_categories end class BookCategory belongs_to :book belongs_to :category # book_id + category_id で一意かどうかをチェック validates :book_id, uniqueness: { scope: :category_id } end class Category has_many :book_categories has_many :books, through: :book_categories end [migrate] unique index を追加する class CreateBookCategoriess \u0026lt; ActiveRecord::Migration[6.1] def change create_table :book_categories do |t| t.references :book, foreign_key: true t.references :category, foreign_key: true t.timestamps end add_index :book_categories, [:book_id, :category_id], unique: true change_table_comment :book_categories, \u0026#39;本のカテゴリー\u0026#39; end end [rspec] FactoryBot + shoulda-matchers 導入している場合 require \u0026#39;rails_helper\u0026#39; describe BookCategory, type: :model do describe \u0026#39;validations\u0026#39; do subject { FactoryBot.build(:book_category) } context \u0026#39;book_id\u0026#39; do it { is_expected.to validate_uniqueness_of(:book_id).scoped_to(:category_id) } end end end"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/01/27/how-to-accordion-content-with-pr-for-github/",
title: "GitHub の PR で折りたたみコンテンツを使用する方法",
image: "images/logo/github_logo.png",
date: "2023-01-27",
body: "GitHub の PR で折りたたみコンテンツを使用する方法 GitHub の PR を作成する際に縦に長くなりすぎるため、折りたたみコンテンツを使用している その方法を備忘録として残しておく 実際のコード html タグの details, summary タグを使用する ※画像を入れる場合は、1行空行を入れないと展開されないため要注意 \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;その１\u0026lt;/summary\u0026gt; ![画像1](/images/logo/github_logo.png) \u0026lt;/details\u0026gt;"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/01/25/how-to-through-a-path-with-m1-for-mac/",
title: "Mac(M1) で Path を通す方法",
image: "images/logo/icons8-mac-os-logo.svg",
date: "2023-01-25",
body: "Mac(M1) で Path を通す方法 Mac(M1) でパスを通す際に Intel の場合と同じ手順では上手くいかなかったので備忘録として残しておく 手順 例. mysql の path を通す場合 ※Homebrew でインストールしたもの インストール先の path を確認 $ brew --prefix mysql@5.7 #=\u0026gt; /opt/homebrew/opt/mysql@5.7 ~/.zshrc に追記する $ echo \u0026#39;export PATH=\u0026#34;$PATH:/opt/homebrew/opt/mysql@5.7/bin\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc $ source ~/.zshrc 動作確認 $ mysql--version #=\u0026gt; mysql Ver 14.14 Distrib 5.7.40, for osx10.17 (x86_64) using EditLine wrapper"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/01/12/how-to-omit-0s-in-decimals-when-displaying-on-screen-in-rails/",
title: "rails で画面表示時に小数部分の0を省略して表示する方法",
image: "images/logo/rails_logo.svg",
date: "2023-01-12",
body: "rails で画面表示時に小数部分の0を省略して表示する方法 rails で画面表示時に小数部分の0を省略して表示する方法を備忘録として残しておく 環境 ruby: 3.0.4 rails: 6.1.0 実際のコード number_to_human メソッドを使用する ※参考 ※strip_insignidicant_zeros オプションのデフォルトが true のため その他のヘルパーについてはNumberHelperを参照 # erb ファイルに記載する場合は ActiveSupport::NumberHelper. は省略可 ActiveSupport::NumberHelper.number_to_human(1.0) #=\u0026gt; \u0026#34;1\u0026#34; ActiveSupport::NumberHelper.number_to_human(1.5) #=\u0026gt; \u0026#34;1.5\u0026#34; ActiveSupport::NumberHelper.number_to_human(1.530) #=\u0026gt; \u0026#34;1.53\u0026#34; ActiveSupport::NumberHelper.number_to_human(1.5301) #=\u0026gt; \u0026#34;1.53\u0026#34; ActiveSupport::NumberHelper.number_to_human(\u0026#39;1.0\u0026#39;) #=\u0026gt; \u0026#34;1\u0026#34; ActiveSupport::NumberHelper.number_to_human(\u0026#39;1.5\u0026#39;) #=\u0026gt; \u0026#34;1.5\u0026#34; ActiveSupport::NumberHelper.number_to_human(\u0026#39;1.530\u0026#39;) #=\u0026gt; \u0026#34;1.53\u0026#34; ActiveSupport::NumberHelper.number_to_human(\u0026#39;1.5301\u0026#39;) #=\u0026gt; \u0026#34;1.53\u0026#34; ActiveSupport::NumberHelper.number_to_human(Date.parse(\u0026#39;2023-01-12\u0026#39;)) #=\u0026gt; Thu, 12 Jan 2023 ActiveSupport::NumberHelper.number_to_human(\u0026#39;2023-01-12\u0026#39;) #=\u0026gt; \u0026#34;2023-01-12\u0026#34; ActiveSupport::NumberHelper.number_to_human(\u0026#39;2023.01.12\u0026#39;) #=\u0026gt; \u0026#34;2023-01-12\u0026#34; ActiveSupport::NumberHelper.number_to_human(\u0026#39;2023.01.12\u0026#39;) #=\u0026gt; \u0026#34;2023.01.12\u0026#34;"
},
{
url: "https://kkawazoe.github.io/amp/blog/2023/01/11/how-to-change-behavior-with-initializer-often-seen-in-gem/",
title: "Gem でよく見る initializer で動作を変更する方法",
image: "images/logo/rails_logo.svg",
date: "2023-01-11",
body: "Gem でよく見る initializer で動作を変更する方法 Gem でよく見る initializer で動作を変更する方法を備忘録として残しておく 環境 ruby: 3.0.4 前提 以下のような構成になっている想定 lib ├── sample_gem │ └── configuration.rb └── sample_gem.rb spec ├── configration_spec.rb └── spec_helper.rb 実際のコード 以下のようなクラスを定義する module SampleGem # gem のクラス名 class Configuration attr_accessor :sample_confime_name # config で使用する config 名 def initialize @sample_confime_name = false end end def self.configuration @configuration ||= Configuration.new end def self.configuration=(config) @configuration = config end # ``` # SampleGem.configure do |config| # config.sample_confime_name = false # end # ``` def self.configure yield configuration end end 以下のように、require する require \u0026#39;sample_gem/configuration\u0026#39; とすると initializer 側で以下のように設定を変更できる SampleGem.configure do |config| config.sample_confime_name = true end RSpec spec_helper で以下を設定しておかないと、設定が引き継がれた状態でテストが実行される RSpec.configure do |config| config.before { restore_default_config } end def restore_default_config SampleGem.configuration = nil end 設定のテストは以下のようにする require File.expand_path(\u0026#39;../lib/sample_gem/configuration\u0026#39;, File.dirname(__FILE__)) require File.expand_path(\u0026#39;spec_helper\u0026#39;, File.dirname(__FILE__)) describe SampleGem::Configuration do let(:config) { SampleGem.configuration } context \u0026#34;when sample_confime_name is set to true\u0026#34; do it \u0026#34;returns true\u0026#34; do SampleGem.configure { |config| config.sample_confime_name = true } expect(SampleGem.configuration.sample_confime_name).to eq true end end context \u0026#34;when sample_confime_name is not specified\u0026#34; do it \u0026#34;defaults to false\u0026#34; do expect(SampleGem.configuration.sample_confime_name).to eq false end end end"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/12/27/how-to-assignment-multiple-sort-key-with-ransack/",
title: "Ransack でソートキーを複数指定する方法",
image: "images/logo/rails_logo.svg",
date: "2022-12-27",
body: "Ransack でソートキーを複数指定する方法 Ransack でソートキーを複数指定する方法を備忘録として残しておく 環境 ruby: 3.0.4 rails: 6.1.0 実際のコード sort_link ヘルパーメソッドの第三引数に指定する ※その他の機能については参考を参照 # ソート順序 第1ソートキー: last_name, 第2ソートキー: first_name # 画面上のソートリンクをクリックする度に両方のキーの昇順、降順が入れ替わる \u0026lt;%= sort_link(@q, :last_name, %i(last_name first_name), \u0026#39;Last Name\u0026#39;) %\u0026gt; 第2ソートキーを常に昇順 or 降順固定にする場合は以下のようにする \u0026lt;%= sort_link(@q, :last_name, [:last_name, \u0026#39;first_name asc\u0026#39;], \u0026#39;Last Name\u0026#39;) %\u0026gt;"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/12/18/how-to-convert-mov-to-gif-with-mac-os/",
title: "Mac OS で mov を gif に変換する方法",
image: "images/logo/icons8-mac-os-logo.svg",
date: "2022-12-18",
body: "Mac OS で mov を gif に変換する方法 Mac OS で mov を gif に変換する方法を備忘録として残しておく 手順 ffmpeg を使用する ※ファイルのリサイズのために Image Magick も使用 ffmpeg, Image Magick のインストール brew install ffmpeg brew install imagemagick gif に変換 ファイルサイズを少なくするために圧縮も行う cd 動画のあるディレクトリ ffmpeg -i {変換対象}.mov -an -r 20 %06d.png # 20 frames/secでpng作成 ※6 桁連番の png ファイルを生成 convert *.png -resize 50% output_%06d.png # 作成した png を 50% にリサイズ convert output_*.png result.gif # gif に変換 # 生成された gif の確認は以下で行える ※Google Chrome インストールしている場合 open -a /Applications/Google\\ Chrome.app result.gif 画像が多少荒くても良いのであれば以下 ffmpeg -i {変換対象}.mov -r 24 result.gif Mac Os Logo icon by Icons8"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/12/17/how-to-auto-deploy-configure-hugo-and-github-pages/",
title: "Hugo と GitHub Pages の構成で自動デプロイを行う方法",
image: "images/logo/github_logo.png",
date: "2022-12-17",
body: "Hugo と GitHub Pages の構成で自動デプロイを行う方法 元々バッチを使用して手動でデプロイを行っていたが、自動デプロイする方法がないか調査を行った その結果を備忘録として残しておく 前提 [構成] Hugo + GitHub Pages(master ブランチが対象) ※source ブランチを Hugo で変換して master ブランチに静的サイト用の資産を配置する Hugo テーマは submodule として取り込み 実際のコード GitHub Actions を使用する リポジトリ直下に .github/workflows フォルダを作成して配下に yml ファイルを配置することで GitHub Actions が登録される ※ source ブランチの push をトリガーに自動デプロイを行う source ブランチをチェックアウト Hugo(Docker) を使用して、静的サイト用の資産を作成 master ブランチに push して GitHub Pages にデプロイする name: Deploy on: push: branches: - source # Target Branch Name jobs: deploy: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Deleting old publication run: rm -rf public - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.91.2\u0026#39; extended: true - name: Build run: hugo - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: master publish_dir: ./public 定期実行する場合は、以下のようにする name: Scheduled Post on: schedule: - cron: \u0026#39;0 4 * * *\u0026#39; # Run every day at 13:00pm(JST). jobs: deploy: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v3 with: ref: \u0026#39;source\u0026#39; # Checkout Branch Name submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Deleting old publication run: rm -rf public - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.91.2\u0026#39; extended: true - name: Build run: hugo - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: master publish_dir: ./public"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/12/16/how-to-convert-active-record-to-hash-with-rails/",
title: "Rails で Active Record のデータを hash 形式に変換する方法",
image: "images/logo/rails_logo.svg",
date: "2022-12-16",
body: "Rails で Active Record のデータを hash 形式に変換する方法 Rails で Active Record のデータを キーが id, 値が Active Record であるような Hash を作る方法を備忘録として残しておく 環境 ruby: 3.0.4 rails: 6.1.0 実際のコード index_by, inject, pluck + to_h メソッドのいずれかを使用する 前提 データの登録状態 id book_id name 1 1 少年誌 2 1 青年誌 3 1 ビジネス 4 1 自己啓発 [Rails Console] categories = Category.all.index_by(\u0026amp;:id) #=\u0026gt; { #=\u0026gt; 1=\u0026gt; #=\u0026gt; #\u0026lt;Category:0x0000562b92c5fcb0 #=\u0026gt; id: 1, #=\u0026gt; book_id: 1, #=\u0026gt; name: \u0026#34;少年誌\u0026#34;, #=\u0026gt; created_at: Wed, 24 Aug 2022 02:54:05.711796000 UTC +00:00, #=\u0026gt; updated_at: Wed, 24 Aug 2022 02:54:05.711796000 UTC +00:00\u0026gt;, #=\u0026gt; 2=\u0026gt; #=\u0026gt; #\u0026lt;Category:0x0000562b92c97160 #=\u0026gt; id: 2, #=\u0026gt; book_id: 1, #=\u0026gt; name: \u0026#34;青年誌\u0026#34;, #=\u0026gt; created_at: Wed, 24 Aug 2022 02:54:45.283884000 UTC +00:00, #=\u0026gt; updated_at: Wed, 24 Aug 2022 02:54:45.283884000 UTC +00:00\u0026gt;, #=\u0026gt; 3=\u0026gt; #=\u0026gt; #\u0026lt;Category:0x0000562b92c97098 #=\u0026gt; id: 3, #=\u0026gt; book_id: 2, #=\u0026gt; name: \u0026#34;ビジネス\u0026#34;, #=\u0026gt; created_at: Wed, 24 Aug 2022 03:13:14.155937000 UTC +00:00, #=\u0026gt; updated_at: Wed, 24 Aug 2022 03:13:14.155937000 UTC +00:00\u0026gt;, #=\u0026gt; 4=\u0026gt; #=\u0026gt; #\u0026lt;Category:0x0000562b92c96f80 #=\u0026gt; id: 4, #=\u0026gt; book_id: 2, #=\u0026gt; name: \u0026#34;自己啓発\u0026#34;, #=\u0026gt; created_at: Wed, 24 Aug 2022 03:13:21.284702000 UTC +00:00, #=\u0026gt; updated_at: Wed, 24 Aug 2022 03:13:21.284702000 UTC +00:00\u0026gt; #=\u0026gt; } index_by メソッドの引数はブロックなのでキーの加工も可能 categories = Category.all.index_by { |c| \u0026#34;category_#{c.id}\u0026#34; } #=\u0026gt; { #=\u0026gt; \u0026#34;category_1\u0026#34;=\u0026gt; #=\u0026gt; #\u0026lt;Category:0x0000562b9325f598 #=\u0026gt; id: 1, #=\u0026gt; book_id: 1, #=\u0026gt; name: \u0026#34;少年誌\u0026#34;, #=\u0026gt; created_at: Wed, 24 Aug 2022 02:54:05.711796000 UTC +00:00, #=\u0026gt; updated_at: Wed, 24 Aug 2022 02:54:05.711796000 UTC +00:00\u0026gt;, #=\u0026gt; \u0026#34;category_2\u0026#34;=\u0026gt; #=\u0026gt; #\u0026lt;Category:0x0000562b9325f4d0 #=\u0026gt; id: 2, #=\u0026gt; book_id: 1, #=\u0026gt; name: \u0026#34;青年誌\u0026#34;, #=\u0026gt; created_at: Wed, 24 Aug 2022 02:54:45.283884000 UTC +00:00, #=\u0026gt; updated_at: Wed, 24 Aug 2022 02:54:45.283884000 UTC +00:00\u0026gt;, #=\u0026gt; \u0026#34;category_3\u0026#34;=\u0026gt; #=\u0026gt; #\u0026lt;Category:0x0000562b9325f3e0 #=\u0026gt; id: 3, #=\u0026gt; book_id: 2, #=\u0026gt; name: \u0026#34;ビジネス\u0026#34;, #=\u0026gt; created_at: Wed, 24 Aug 2022 03:13:14.155937000 UTC +00:00, #=\u0026gt; updated_at: Wed, 24 Aug 2022 03:13:14.155937000 UTC +00:00\u0026gt;, #=\u0026gt; \u0026#34;category_4\u0026#34;=\u0026gt; #=\u0026gt; #\u0026lt;Category:0x0000562b9325f318 #=\u0026gt; id: 4, #=\u0026gt; book_id: 2, #=\u0026gt; name: \u0026#34;自己啓発\u0026#34;, #=\u0026gt; created_at: Wed, 24 Aug 2022 03:13:21.284702000 UTC +00:00, #=\u0026gt; updated_at: Wed, 24 Aug 2022 03:13:21.284702000 UTC +00:00\u0026gt; #=\u0026gt; } value の方も加工したい場合には inject メソッドを使用する categories = Category.all.inject({}) do |hash, c| hash[c.id] = c.name hash end #=\u0026gt; {1=\u0026gt;\u0026#34;少年誌\u0026#34;, 2=\u0026gt;\u0026#34;青年誌\u0026#34;, 3=\u0026gt;\u0026#34;ビジネス\u0026#34;, 4=\u0026gt;\u0026#34;自己啓発\u0026#34;} ちなみに上記のような出し方がしたいのであれば下記でも良い categories = Category.all.pluck(:id, :name).to_h #=\u0026gt; {1=\u0026gt;\u0026#34;少年誌\u0026#34;, 2=\u0026gt;\u0026#34;青年誌\u0026#34;, 3=\u0026gt;\u0026#34;ビジネス\u0026#34;, 4=\u0026gt;\u0026#34;自己啓発\u0026#34;}"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/12/05/road-to-ruby-gold-ver-3-part5/",
title: "Ruby Gold 認定試験 Ver 3 への道 その5",
image: "images/logo/ruby_logo.png",
date: "2022-12-05",
body: "Ruby Gold 認定試験 Ver 3 への道 その5 Ruby Gold 認定試験の Ver 3 の勉強時に学んだことを備忘録として残しておく [前回までの記事] Ruby Gold 認定試験 Ver 3 への道 Ruby Gold 認定試験 Ver 3 への道 その2 Ruby Gold 認定試験 Ver 3 への道 その3 Ruby Gold 認定試験 Ver 3 への道 その4 受験結果 無事に合格した 前回、 ver 2 受験時と難易度的には同じくらいだったように思う なので、基本的にはオブジェクト指向周りを再確認する 3 系から追加された 「hash 明示(**hash)」などはリリースノートで確認して置いた方が良いが 2.2 〜 2.7 系での変更点についても押さえておくとより良いと思う NEWS for Ruby 3.0.0 Ruby 3.0.0 リリースノート 勉強に使用したもの 公式の模擬問題 基本的には、上記をやって該当のコードを自分でコーディングしながら、色々変更して動作確認するのが一番良さそう"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/12/02/about-enum-in-rails/",
title: "Rails における Enum について",
image: "images/logo/rails_logo.svg",
date: "2022-12-02",
body: "Rails における Enum について Rails における Enum の挙動について調査した内容を備忘録として残しておく 環境 ruby: 2.7.6 rails: 5.2.8.1 実際のコード DB のカラムに対応する enum を定義した場合、自動的に scope が定義される ※Rails 6 では not_* の scope も自動的に定義される 参考 ※Rails 7 では新しい構文が追加されたため、今後オプションの指定が従来のやり方だと非推奨になる可能性がある 参考 [モデル定義] class Article \u0026lt; ApplicationRecord enum status: { draft: 0, # 下書き published: 1, # 公開中 closed: 2, # 掲載終了 }, _prefix: true end [Rails Console] # enum 確認 Article.statuses #=\u0026gt; {\u0026#34;draft\u0026#34;=\u0026gt;0, \u0026#34;published\u0026#34;=\u0026gt;1, \u0026#34;closed\u0026#34;=\u0026gt;2} # scope Article.status_published #=\u0026gt; Article Load (7.8ms) SELECT `articles`.* FROM `articles` WHERE `articles`.`status` = 1 # 以下と同義 Article.where(status: :published).to_sql #=\u0026gt; \u0026#34;SELECT `articles`.* FROM `articles` WHERE `articles`.`status` = 1\u0026#34; 他にも以下のヘルパーが使用できる article = Article.status_published.first # status が published かどうか article.status_published? #=\u0026gt; true # status を closed に更新 article.status_closed! #=\u0026gt; TRANSACTION (0.5ms) BEGIN #=\u0026gt; Article Update (0.9ms) UPDATE \u0026#34;articles\u0026#34; SET \u0026#34;status\u0026#34; = $1, \u0026#34;updated_at\u0026#34; = $2 #=\u0026gt; WHERE \u0026#34;articles\u0026#34;.\u0026#34;id\u0026#34; #=\u0026gt;= $3 [[\u0026#34;status\u0026#34;, 2], [\u0026#34;updated_at\u0026#34;, \u0026#34;2022-12-04 10:17:57.666814\u0026#34;], [\u0026#34;id\u0026#34;, 1]] #=\u0026gt; TRANSACTION (8.0ms) COMMIT #=\u0026gt; true article #=\u0026gt; \u0026lt;Article:0x000055a42ece8f38 #=\u0026gt; id: 1, #=\u0026gt; name: \u0026#34;サンプル記事\u0026#34;, #=\u0026gt; status: \u0026#34;closed\u0026#34;, #=\u0026gt; created_at: Sun, 04 Dec 2022 10:10:22.903934000 UTC +00:00, #=\u0026gt; updated_at: Sun, 04 Dec 2022 10:17:57.666814000 UTC +00:00\u0026gt;"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/12/01/road-to-ruby-gold-ver-3-part4/",
title: "Ruby Gold 認定試験 Ver 3 への道 その4",
image: "images/logo/ruby_logo.png",
date: "2022-12-01",
body: "Ruby Gold 認定試験 Ver 3 への道 その4 Ruby Gold 認定試験の Ver 3 の勉強時に学んだことを備忘録として残しておく [前回までの記事] Ruby Gold 認定試験 Ver 3 への道 Ruby Gold 認定試験 Ver 3 への道 その2 Ruby Gold 認定試験 Ver 3 への道 その3 環境 ruby: 3.1.2 キーワード引数 キーワード引数で a: のようなデフォルト値を指定しない場合、構文エラーにはならないが、呼び出し時に指定しなかった場合に ArgumentError になる class KeywordArgument def foo(a:, b: \u0026#39;bbb\u0026#39;) puts \u0026#34;a: #{a}, b: #{b}\u0026#34; end end keyword_argument = KeywordArgument.new keyword_argument.foo(a: \u0026#39;aaa\u0026#39;, b: \u0026#39;BBB\u0026#39;) #=\u0026gt; a: aaa, b: BBB keyword_argument.foo(a: \u0026#39;aaa\u0026#39;) #=\u0026gt; a: aaa, b: bbb keyword_argument.foo #=\u0026gt; ./keyword_argument.rb:2:in `foo\u0026#39;: missing keyword: :a (ArgumentError) #=\u0026gt;\tfrom ./keyword_argument.rb:8:in `\u0026lt;main\u0026gt;\u0026#39; グローバル変数, クラス変数, インスタンス変数 グローバル変数 グローバル変数のため全体で同じ変数を参照 class GlobalArgument $count = 0 def increment $count = $count + 1 puts $count end def self.increment $count = $count + 1 puts $count end end class ExtendGlobalArgument \u0026lt; GlobalArgument def increment $count = $count + 2 puts $count end end global_argument = GlobalArgument.new global_argument2 = ExtendGlobalArgument.new global_argument.increment #=\u0026gt; 1 global_argument2.increment #=\u0026gt; 3 global_argument.increment #=\u0026gt; 4 global_argument2.increment #=\u0026gt; 6 クラス変数 クラスごとに変数が管理される class ClassVariable @@count = 0 def increment @@count = @@count + 1 puts @@count end def self.increment @@count = @@count + 1 puts @@count end end class ExtendClassVariable \u0026lt; ClassVariable def increment @@count = @@count + 2 puts @@count end end class_argument = ClassVariable.new class_argument2 = ExtendClassVariable.new class_argument.increment #=\u0026gt; 1 class_argument2.increment #=\u0026gt; 3 class_argument.increment #=\u0026gt; 4 class_argument2.increment #=\u0026gt; 6 インスタンス変数 グローバル変数、クラス変数と同じ要領で書くとエラー class InstanceVariable @count = 0 def increment @count = @count + 1 puts @count end def self.increment @count = @count + 1 puts @count end end class ExtendInstanceVariable \u0026lt; InstanceVariable def increment @count = @count + 2 puts @count end end instance_variable = InstanceVariable.new instance_variable2 = ExtendInstanceVariable.new instance_variable.increment #=\u0026gt; ./instance_variable.rb:5:in `increment\u0026#39;: undefined method `+\u0026#39; for nil:NilClass (NoMethodError) #=\u0026gt; @count = @count + 1 accessor もしくは initialize メソッドでの初期化が必要 ※インスタンスごとに変数が管理される class InstanceVariable def initialize @count = 0 end def increment @count = @count + 1 puts @count end def self.increment @count = @count + 1 puts @count end end class ExtendInstanceVariable \u0026lt; InstanceVariable def increment @count = @count + 2 puts @count end end instance_variable = InstanceVariable.new instance_variable2 = ExtendInstanceVariable.new instance_variable.increment #=\u0026gt; 1 instance_variable2.increment #=\u0026gt; 2 instance_variable.increment #=\u0026gt; 2 instance_variable2.increment #=\u0026gt; 4 singleton を include した場合は同一インスタンスを返却するようになる require \u0026#39;singleton\u0026#39; class SingletonInstanceVariable include Singleton def initialize @count = 0 end def increment @count = @count + 1 puts @count end def self.increment @count = @count + 1 puts @count end end class ExtendSingletonInstanceVariable \u0026lt; SingletonInstanceVariable def increment @count = @count + 2 puts @count end end # SingletonInstanceVariable.new は使えない =\u0026gt; NoMethodError instance_variable = SingletonInstanceVariable.instance instance_variable2 = ExtendSingletonInstanceVariable.instance instance_variable3 = SingletonInstanceVariable.instance instance_variable.increment #=\u0026gt; 1 instance_variable2.increment #=\u0026gt; 2 instance_variable3.increment #=\u0026gt; 2 instance_variable.increment #=\u0026gt; 3 instance_variable2.increment #=\u0026gt; 4 instance_variable3.increment #=\u0026gt; 4 引数の異なるメソッドを継承先のクラスで定義した際の super の挙動 super 指定時に () を省略した場合は super と同じ指定がされたものと見なされるため Arguments Error となる class Foo def foo(a, b) puts \u0026#34;Foo#foo a=#{a}, b=#{b}\u0026#34; end end class Bar \u0026lt; Foo def foo(a) super puts \u0026#34;Bar#foo a=#{a}\u0026#34; end end foo = Foo.new foo.foo(\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;) #=\u0026gt; Foo#foo a=A, b=B bar = Bar.new bar.foo(\u0026#39;aaa\u0026#39;) #=\u0026gt; ./inheritance_method.rb:2:in `foo\u0026#39;: wrong number of arguments (given 1, expected 2) (ArgumentError) #=\u0026gt; from ./inheritance_method.rb:9:in `foo\u0026#39; #=\u0026gt; from ./inheritance_method.rb:19:in `\u0026lt;main\u0026gt;\u0026#39; デフォルト値を指定してある場合は呼び出せる class Foo def foo(a, b = \u0026#39;BBB\u0026#39;) puts \u0026#34;Foo#foo a=#{a}, b=#{b}\u0026#34; end end class Bar \u0026lt; Foo def foo(a) super puts \u0026#34;Bar#foo a=#{a}\u0026#34; end end foo = Foo.new foo.foo(\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;) #=\u0026gt; Foo#foo a=A, b=B bar = Bar.new bar.foo(\u0026#39;aaa\u0026#39;) #=\u0026gt; Foo#foo a=aaa, b=BBB #=\u0026gt; Bar#foo a=aaa もしくは、super に渡す引数を指定する class Foo def foo(a, b) puts \u0026#34;Foo#foo a=#{a}, b=#{b}\u0026#34; end end class Bar \u0026lt; Foo def foo(a) super(a, \u0026#39;BB\u0026#39;) puts \u0026#34;Bar#foo a=#{a}\u0026#34; end end foo = Foo.new foo.foo(\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;) #=\u0026gt; Foo#foo a=A, b=B bar = Bar.new bar.foo(\u0026#39;aaa\u0026#39;) #=\u0026gt; Foo#foo a=aaa, b=BB #=\u0026gt; Bar#foo a=aaa method_missing 該当のメソッドが存在しなかった場合に呼び出されるメソッド module M def method_missing(id, *args) puts \u0026#34;C#method_missing\u0026#34; end end class A include M def method_missing(id, *args) puts \u0026#34;A#method_missing\u0026#34; end end class B \u0026lt; A def method_missing(id, *args) puts \u0026#34;B#method_missing\u0026#34; end end obj = B.new obj.test_method #=\u0026gt; \u0026#34;B#method_missing\u0026#34; Object クラスに定義したメソッドについて クラス定義に使用する Class クラスは、 Object クラスの子孫にあたるため Object クラスに定義したメソッドは呼び出し可能 [Class クラスの継承リスト] Class \u0026lt; Module \u0026lt; Object \u0026lt; Kernel \u0026lt; BasicObject class Object def foo puts \u0026#39;Object#foo\u0026#39; end end class Foo def foo super puts \u0026#39;Foo#foo\u0026#39; end end class Bar \u0026lt; Foo def foo super puts \u0026#39;Bar#foo\u0026#39; end end bar = Bar.new bar.foo #=\u0026gt; Object#foo #=\u0026gt; Foo#foo #=\u0026gt; Bar#foo 定数の探索範囲 module M CONSTANT_A = \u0026#39;A\u0026#39;.freeze end class A include M CONSTANT_A = \u0026#39;AAA\u0026#39;.freeze def foo puts M::CONSTANT_A puts CONSTANT_A end end class B \u0026lt; A CONSTANT_A = \u0026#39;BBB\u0026#39;.freeze def foo super puts CONSTANT_A end end class C \u0026lt; B CONSTANT_C = \u0026#39;CCC\u0026#39;.freeze def foo super puts CONSTANT_A end class D CONSTANT_D = \u0026#39;DDD\u0026#39;.freeze def foo puts CONSTANT_C # puts CONSTANT_A #=\u0026gt; uninitialized constant C::D::CONSTANT_A (NameError) #=\u0026gt; Did you mean? C::D::CONSTANT_D #=\u0026gt; C::CONSTANT_C # puts ::CONSTANT_A #=\u0026gt; uninitialized constant CONSTANT_A (NameError) super #=\u0026gt; super: no superclass method `foo\u0026#39; for #\u0026lt;C::D:0x000000010502f840\u0026gt; (NoMethodError) #=\u0026gt; Did you mean? for puts ::A::CONSTANT_A puts ::B::CONSTANT_A end end end a = A.new b = B.new c = C.new d = C::D.new a.foo #=\u0026gt; A #=\u0026gt; AAA b.foo #=\u0026gt; A #=\u0026gt; AAA #=\u0026gt; BBB c.foo #=\u0026gt; A #=\u0026gt; AAA #=\u0026gt; BBB #=\u0026gt; BBB d.foo #=\u0026gt; CCC #=\u0026gt; AAA #=\u0026gt; BBB"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/11/25/road-to-ruby-gold-ver-3-part3/",
title: "Ruby Gold 認定試験 Ver 3 への道 その3",
image: "images/logo/ruby_logo.png",
date: "2022-11-25",
body: "Ruby Gold 認定試験 Ver 3 への道 その3 Ruby Gold 認定試験の Ver 3 の勉強時に学んだことを備忘録として残しておく [前回までの記事] Ruby Gold 認定試験 Ver 3 への道 Ruby Gold 認定試験 Ver 3 への道 その2 環境 ruby: 3.1.2 public_send メソッド Object#public_send メソッドは private メソッドを呼び出せない private_send メソッドは存在しない ※private メソッドを 呼び出す場合は Object#send or BasicObject#__send__ メソッドを使用する class PublicTest def public_method puts \u0026#39;call public methods\u0026#39; end private def private_method puts \u0026#39;call private methods\u0026#39; end end test = PublicTest.new test.public_method test.private_method #=\u0026gt; call public methods #=\u0026gt; public_send.rb:17:in `\u0026lt;main\u0026gt;\u0026#39;: private method `private_method\u0026#39; called for #\u0026lt;PublicTest:0x00000001046769e8\u0026gt; (NoMethodError) #=\u0026gt; test.private_method #=\u0026gt; Did you mean? private_methods begin \u0026amp; rescue でエラークラスを省略した際の動作 class ExceptionTest def foo begin exit rescue =\u0026gt; e puts \u0026#39;Default Rescue\u0026#39; rescue SystemExit =\u0026gt; e puts \u0026#39;System Exit\u0026#39; ensure puts \u0026#39;Ensure\u0026#39; end puts \u0026#39;End\u0026#39; end end t = ExceptionTest.new t.foo #=\u0026gt; System Exit #=\u0026gt; Ensure #=\u0026gt; End 定数の書き換え メソッド内での書き換えは不可 class Foo AAA = \u0026#39;AAA\u0026#39; BBB = \u0026#39;BBB\u0026#39; def foo puts AAA end end class Bar \u0026lt; Foo def foo AAA = \u0026#39;aaa\u0026#39; puts AAA end end b = Bar.new b.foo #=\u0026gt; modified_constants.rb:12: dynamic constant assignment #=\u0026gt; AAA = \u0026#39;aaa\u0026#39; メソッド外であれば書き換え可能 class Foo AAA = \u0026#39;AAA\u0026#39; BBB = \u0026#39;BBB\u0026#39; def foo puts AAA end end class Buzz \u0026lt; Foo AAA = \u0026#39;aaa\u0026#39; def foo puts AAA end end b = Buzz.new b.foo #=\u0026gt; aaa 同クラス内で定義している場合は warning が発生する ※freeze している/していない 関係なく class Hoge AAA = \u0026#39;AAA\u0026#39;.freeze def foo puts AAA end end class Fuga \u0026lt; Hoge AAA = \u0026#39;aaa\u0026#39;.freeze AAA = \u0026#39;bbb\u0026#39; def foo puts AAA end end f = Fuga.new f.foo #=\u0026gt; modified_constants.rb:11: warning: already initialized constant Fuga::AAA #=\u0026gt; modified_constants.rb:10: warning: previous definition of AAA was here #=\u0026gt; bbb filter_map メソッド p [1.34, -1.49, 2.7].filter_map {|n| n.round if 0 \u0026lt; n } # これがリファレンスにも乗っているパターン #=\u0026gt; [1, 3] p [1.34, -1.49, 2.7].filter_map {|n| 0 \u0026lt; n \u0026amp;\u0026amp; n.round } # 上と同じ結果 #=\u0026gt; [1, 3] p [1.34, -1.49, 2.7].filter_map {|n| 0 \u0026lt; n } #=\u0026gt; [true, true] p [1.34, -1.49, 2.7].filter_map {|n| 0 \u0026lt; n || n.round } #=\u0026gt; [true, -1, true]"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/11/24/road-to-ruby-gold-ver-3-part2/",
title: "Ruby Gold 認定試験 Ver 3 への道 その2",
image: "images/logo/ruby_logo.png",
date: "2022-11-24",
body: "Ruby Gold 認定試験 Ver 3 への道 その2 Ruby Gold 認定試験の Ver 3 の勉強時に学んだことを備忘録として残しておく [前回までの記事] Ruby Gold 認定試験 Ver 3 への道 環境 ruby: 3.1.2 __FILE__ __FILE__ が書いてあるファイルのファイル名を表す 似たようなので $0 があるがこちらは直接実行したファイルのファイル名を表す puts __FILE__ puts $0 require_relative \u0026#39;./file_name\u0026#39; $ ruby file_name.rb __FILE__: file_name.rb $0: file_name.rb $ ruby require_file_name.rb __FILE__: file_name.rb $0: require_file_name.rb 累乗の計算 def exponentiation(n) n ** n end puts exponentiation(-1) #=\u0026gt; -1 puts exponentiation(1i) #=\u0026gt; 0.20787957635076193+0.0i 複素数 正規表現 =~ の $1 等 \u0026#39;www.ruby.co.jp\u0026#39;.match(%r(www(\\.ruby\\.co)(\\.jp))) do |e| puts \u0026#34;match e= #{e}\u0026#34; puts \u0026#34;match e[0]= #{e[0]}\u0026#34; puts \u0026#34;match e[1]= #{e[1]}\u0026#34; puts \u0026#34;match e[2]= #{e[2]}\u0026#34; puts \u0026#34;match $0 #{$0}\u0026#34; puts \u0026#34;match $\u0026amp; #{$\u0026amp;}\u0026#34; puts \u0026#34;match $1 #{$1}\u0026#34; puts \u0026#34;match $2 #{$2}\u0026#34; end #=\u0026gt; match e= www.ruby.co.jp #=\u0026gt; match e[0]= www.ruby.co.jp #=\u0026gt; match e[1]= .ruby.co #=\u0026gt; match e[2]= .jp #=\u0026gt; match $0 regex.rb # 実行ファイル名 #=\u0026gt; match $\u0026amp; www.ruby.co.jp #=\u0026gt; match $1 .ruby.co #=\u0026gt; match $2 .jp"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/11/23/road-to-ruby-gold-ver-3/",
title: "Ruby Gold 認定試験 Ver 3 への道",
image: "images/logo/ruby_logo.png",
date: "2022-11-23",
body: "Ruby Gold 認定試験 Ver 3 への道 Ruby Gold 認定試験の Ver 3 の勉強時に学んだことを備忘録として残しておく 環境 ruby: 3.1.2 Numbered parameters _1 から始まる _1, _2 で 第一引数, 第二引数の意味となる 以下は同じ意味 h = { a: 1, b: 2, c: 3 } h.transform_values{|v| v * 2} #=\u0026gt; {:a=\u0026gt;2, :b=\u0026gt;4, :c=\u0026gt;6} h.transform_values{_1 * 2} #=\u0026gt; {:a=\u0026gt;2, :b=\u0026gt;4, :c=\u0026gt;6} h = { a: 1, b: 2, c: 3 } h.map{|key, value| [key, value * 2]}.to_h #=\u0026gt; {:a=\u0026gt;2, :b=\u0026gt;4, :c=\u0026gt;6} h = { a: 1, b: 2, c: 3 } h.map{[_1, _2 * 2]}.to_h #=\u0026gt; {:a=\u0026gt;2, :b=\u0026gt;4, :c=\u0026gt;6} #=\u0026gt; hash に対して map! はエラーとなる \u0026lt;\u0026lt;EOF, \u0026lt;\u0026lt;-EOF, \u0026lt;\u0026lt;~EOF の動作の違い 詳細は ヒアドキュメント 参照 ・\u0026lt;\u0026lt;EOF print \u0026lt;\u0026lt;EOF # 識別子 EOF までがリテラルになる the string next line EOF 以下と同じ意味 print \u0026#34; the string\\nnext line\\n\u0026#34; ・\u0026lt;\u0026lt;-EOF if need_define_foo eval \u0026lt;\u0026lt;-EOF # \u0026#39;\u0026lt;\u0026lt;-\u0026#39; を使うと…… def foo print \u0026#34;foo\\n\u0026#34; end EOF #↑終端行をインデントできる end ・\u0026lt;\u0026lt;~EOF 最もインデントが少ない行を基準にして、全ての行の先頭から空白を取り除く インデントの深さを決定するため、タブやスペースで構成された行は無視されるので注意が必要 ただし、エスケープされたタブやスペースは通常の文字と同じように扱われる expected_result = \u0026lt;\u0026lt;~SQUIGGLY_HEREDOC This would contain specially formatted text. That might span many lines SQUIGGLY_HEREDOC # =\u0026gt; \u0026#34;This would contain specially formatted text.\\n\u0026#34; + \u0026#34;\\n\u0026#34; + \u0026#34;That might span many lines\\n\u0026#34;"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/11/22/how-to-modified-config-value-for-extensions-with-visual-studio-code/",
title: "Visual Studio Code で拡張子毎に設定値を変更する方法",
image: "images/logo/vscode_logo.png",
date: "2022-11-22",
body: "Visual Studio Code で拡張子毎に設定値を変更する方法 経緯 Visual Studio Code にて保存時の空白のトリミングの挙動を markdown の場合のみ変えたくなったため調査を行なった その結果を備忘録として残しておく 手順 コマンドパレットを開く Configure language specific settings を入力して選択する 拡張子を質問されるので markdown を選択する settings.json ファイルに以下のように編集する 実際の設定ファイル { \u0026#34;[markdown]\u0026#34;: { \u0026#34;files.trimTrailingWhitespace\u0026#34;: false } }"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/11/22/how-to-disable-auto-complete-with-rails-console/",
title: "rails console で オートコンプリートを無効にする方法",
image: "images/logo/rails_logo.svg",
date: "2022-11-22",
body: "rails console で オートコンプリートを無効にする方法 ruby 3.1 以降から irb でオートコンプリートが効くようになったがそれを無効にする方法を調査した その結果を備忘録として残しておく 環境 ruby: 3.1.2 rails: 6.1.7 方法 カレントディレクトに .irbrc ファイルを作成して以下のように編集する ※他の設定値については 参考 を参照 IRB.conf[:USE_AUTOCOMPLETE] = false IRB.conf[:SAVE_HISTORY] = nil"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/11/03/how-to-select-check-box-for-create-through-table-with-rails/",
title: "rails で中間テーブルをチェックボックス複数選択させて生成する方法",
image: "images/logo/rails_logo.svg",
date: "2022-11-03",
body: "rails で中間テーブルをチェックボックス複数選択させて生成する方法 環境 ruby: 2.7.6 rails: 5.2.8.1 前提 rails で has_many の ids を使用して中間テーブルの関連付けを行う方法 の構成を参照 実際のコード erb で行うパターンと javascript で行うパターンはそれぞれ以下 ※基本的には erb で行うと思うが、 erb の構成に対して値を受け渡す場合にjavascript のパターンを使用する erb のパターン association を使用して as: :check_boxes オプションを指定する \u0026lt;%= simple_form_for @book do |f| %\u0026gt; \u0026lt;%= f.association :categories, as: :check_boxes %\u0026gt; \u0026lt;%= f.button :submit %\u0026gt; \u0026lt;% end %\u0026gt; javascript のパターン 最終的に生成される params が以下のようになるように組み立てる [\u0026quot;\u0026quot;, 1, 3] $(\u0026#39;form\u0026#39;).append( `\u0026lt;input type=\u0026#34;hidden\u0026#34; value=\u0026#34;\u0026#34; name=\u0026#34;book[category_ids][]\u0026#34; /\u0026gt;`, ); book.category_ids.forEach((category_id) =\u0026gt; { $(\u0026#39;form\u0026#39;).append( `\u0026lt;input type=\u0026#34;hidden\u0026#34; value=\u0026#34;${category_id}\u0026#34; name=\u0026#34;book[category_ids][]\u0026#34; id=\u0026#34;book_category_ids_${category_id}\u0026#34; /\u0026gt;`, ); }); erb + javascript javascript のパターンの \u0026lt;input type=\u0026quot;hidden\u0026quot; value=\u0026quot;\u0026quot; name=\u0026quot;book[category_ids][]\u0026quot; /\u0026gt; 部分を erb で行うパターン [erb] \u0026lt;%= simple_form_for @book do |f| %\u0026gt; \u0026lt;%= f.hidden_field :category_ids, multiple: true, value: nil %\u0026gt; \u0026lt;%= f.button :submit %\u0026gt; \u0026lt;% end %\u0026gt; [javascript] $(\u0026#39;form\u0026#39;).append( `\u0026lt;input type=\u0026#34;hidden\u0026#34; value=\u0026#34;\u0026#34; name=\u0026#34;book[category_ids][]\u0026#34; /\u0026gt;`, ); book.category_ids.forEach((category_id) =\u0026gt; { $(\u0026#39;form\u0026#39;).append( `\u0026lt;input type=\u0026#34;hidden\u0026#34; value=\u0026#34;${category_id}\u0026#34; name=\u0026#34;book[category_ids][]\u0026#34; id=\u0026#34;book_category_ids_${category_id}\u0026#34; /\u0026gt;`, ); });"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/11/01/how-to-use-has-many-ids-for-create-relation-through-table-with-rails/",
title: "rails で has_many の ids を使用して中間テーブルの関連付けを行う方法",
image: "images/logo/rails_logo.svg",
date: "2022-11-01",
body: "rails で has_many の ids を使用して中間テーブルの関連付けを行う方法 環境 ruby: 2.7.6 rails: 5.2.8.1 実際のコード [ER 図] [model] class Book has_many :book_categories, dependent: :destroy has_many :categories, through: :book_categories end class BookCategory belongs_to :book belongs_to :category end class Category has_many :book_categories has_many :books, through: :book_categories end [controller] category_ids を配列形式で許可する def create @book = Book.save!(book_params) end private def book_params params.require(:book).permit( :title, category_ids: [] ) end"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/11/01/how-to-user-scope-for-link-to-with-ransack/",
title: "ransack で scope を使用して link_to で表示する方法",
image: "images/logo/rails_logo.svg",
date: "2022-11-01",
body: "ransack で scope を使用して link_to で表示する方法 方法 ransackable_scopes メソッドを使用して実現する 環境 ruby: 2.7.6 rails: 5.2.8.1 実際のコード 例. User モデルの created_at カラムを基準として N 以内に作成されたユーザを取得する [model] # 引数なし scope :within_one_month, -\u0026gt; { where(\u0026#39;created_at \u0026gt;=\u0026#39;, Time.zone.now - 1.months) } # 引数あり scope :within_days, -\u0026gt; (day) { where(\u0026#39;created_at \u0026gt;=\u0026#39;, Time.zone.now - (day).days) } def self.ransackable_scopes(_auth_object = nil) %i(within_days within_one_month) end [erb] \u0026lt;%= link_to( \u0026#34;1ヶ月以内に作成されたユーザ一覧\u0026#34;, users_path(@q, q: { within_one_month: true }), class: \u0026#34;btn btn-primary mr-5\u0026#34; ) link_to( \u0026#34;7日以内に作成されたユーザ一覧\u0026#34;, users_path(@q, q: { within_days: 7 }), class: \u0026#34;btn btn-primary mr-5\u0026#34; ) %\u0026gt; [controller] 通常通りで動作する User.ransack(@q).result"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/10/30/how-to-dynamic-create-test-data-for-factory-bot-with-rspec/",
title: "rspec で factory bot を使用して複数テストを作成すると同時に関連するクラスを紐づけて動的に生成する方法",
image: "images/logo/rails_logo.svg",
date: "2022-10-30",
body: "rspec で factory bot を使用して複数テストを作成すると同時に関連するクラスを紐づけて動的に生成する方法 方法 create_list と send メソッドを使用して実現する 環境 ruby: 2.7.6 rails: 5.2.8.1 rspec 3.7.0 実際のコード user のテストデータを3つ作成 かつ 関連する user_status のテストデータを紐付けおよびカラム status を動的に生成する let(:user_status1) { UserStatus::Active } let(:user_status2) { UserStatus::Locked } let(:user_status3) { UserStatus::InActive } before do create_list(:user, 3).each.with_index(1) do |user, i| create( :user_status, user: user, status: send(\u0026#34;user_status#{i}\u0026#34;), ) end end rspec 5.2 以降であれば以下も可能 参考 let(:user_status1) { UserStatus::Active } let(:user_status2) { UserStatus::Locked } let(:user_status3) { UserStatus::InActive } before do create_list(:user, 3) do |user, i| create( :user_status, user: user, status: send(\u0026#34;user_status#{i + 1}\u0026#34;), ) end end"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/09/14/text-align-left-center-with-css/",
title: "CSS テキストを左揃えのまま中央寄せにする方法",
image: "images/logo/html_logo.svg",
date: "2022-09-14",
body: "CSS テキストを左揃えのまま中央寄せにする方法 css でテキストを左揃えのまま中央寄せにする方法を備忘録として残しておく 実際のソースおよび実行結果 中央寄せかつテキストの行頭を揃える"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/09/03/how-to-excute-stream-too-big-file-size-csv-with-rails/",
title: "rails で 巨大な csv ファイルをストリーム処理する方法",
image: "images/logo/rails_logo.svg",
date: "2022-09-03",
body: "rails で 巨大な csv ファイルをストリーム処理する方法 1 GB を超えるような csv ファイルを一度に読み込むとメモリエラーが発生する場合がある さらに処理時間もすごくかかるため、ストリーム処理に変更などして処理の高速化した際の方法を備忘録として残しておく 方法 File#open メソッドと CSV#new メソッドを組み合わせて実現する 環境 ruby: 3.0.4 rails: 6.1.6.1 実際のコード csv ファイルの特定の文字列を置換する処理 前提 header 付の csv ファイル リファクタリング前 class Converter def self.convert # 読み取り専用でファイルを開く read_only_file = File.open(\u0026#34;{ファイルパス}\u0026#34; , \u0026#34;r\u0026#34;) # 保存用バッファ buffer = read_only_file.read() # バッファの中身を変換 buffer.gsub!({置換対象文字列}, {置換文字列}) # ファイルを書き込みモードで開き直す file = File.open(\u0026#34;{ファイルパス}\u0026#34; , \u0026#34;w\u0026#34;) # 変更内容を出力する file.write(buffer) # close read_only_file.close() file.close() end end リファクタリング後 require \u0026#39;csv\u0026#39; require \u0026#39;fileutils\u0026#39; class Converter def self.convert file_basename = \u0026#34;{拡張子を除いたファイル名}\u0026#34; # 読み取り専用でファイルを開く File.open(\u0026#34;#{file_basename}.csv\u0026#34;, \u0026#34;r\u0026#34;) do |file| break if File.zero?(\u0026#34;#{file_basename}.csv\u0026#34;) # 一時ファイルを書き込みモードで開く write_file = File.open(\u0026#34;#{file_basename}_tmp.csv\u0026#34;, \u0026#34;w\u0026#34;) # csv の header を書き込む write_file.write(file.readline) file.rewind CSV.new(file, headers: true).each do |row| # 読み込んだ行内の文字列を置換する write_file.write(row.to_s.gsub({置換対象文字列}, {置換文字列})) end write_file.close end FileUtils.move(\u0026#34;#{file_basename}_tmp.csv\u0026#34;, \u0026#34;#{file_basename}.csv\u0026#34;) if File.exist?(\u0026#34;#{file_basename}_tmp.csv\u0026#34;) end end ヘッダは force quote なし ボディは force quote ありのようにしたい場合 id,名前 \u0026#34;1\u0026#34;,\u0026#34;太郎\u0026#34; CSV#open メソッドを使用する require \u0026#39;csv\u0026#39; require \u0026#39;fileutils\u0026#39; class Converter def self.convert file_basename = \u0026#34;{拡張子を除いたファイル名}\u0026#34; # 読み取り専用でファイルを開く File.open(\u0026#34;#{file_basename}.csv\u0026#34;, \u0026#34;r\u0026#34;) do |file| break if File.zero?(\u0026#34;#{file_basename}.csv\u0026#34;) # 一時ファイルを書き込みモードで開く CSV.open(\u0026#34;#{file_basename}_tmp.csv\u0026#34;, \u0026#34;w\u0026#34;) do |csv| # csv の header を書き込む csv \u0026lt;\u0026lt; file.readline.parse_csv end file.rewind # 一時ファイルを追記モードで開く CSV.open(\u0026#34;#{file_basename}_tmp.csv\u0026#34;, \u0026#34;a\u0026#34;, force_quotes: true) do |csv| CSV.new(file, headers: true).each do |row| # 読み込んだ行内の文字列を置換する csv \u0026lt;\u0026lt; row.to_s.gsub({置換対象文字列}, {置換文字列}).parse_csv end end end FileUtils.move(\u0026#34;#{file_basename}_tmp.csv\u0026#34;, \u0026#34;#{file_basename}.csv\u0026#34;) if File.exist?(\u0026#34;#{file_basename}_tmp.csv\u0026#34;) end end 1.4 GB 程の csv ファイルを処理した際にリファクタリング前は、1 時間 40 分程度だったものが 5 分程度の処理時間に改善した"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/09/03/how-to-substring-map-with-rails/",
title: "rails で文字列置換を行う際に対応表で置換する方法",
image: "images/logo/rails_logo.svg",
date: "2022-09-03",
body: "rails で文字列置換を行う際に対応表で置換する方法 rails で文字列置換を行う際に対応表で置換する方法を備忘録として残しておく 方法 gsub メソッドに対して、第1引数に正規表現、第2引数に Hash を渡すことで実現する 環境 ruby: 3.0.4 rails: 6.1.6.1 実際のコード # 変換用の対応表 convert_map = { \u0026#39;a\u0026#39; =\u0026gt; \u0026#39;A\u0026#39;, \u0026#39;b\u0026#39; =\u0026gt; \u0026#39;B\u0026#39;, \u0026#39;d\u0026#39; =\u0026gt; \u0026#39;D\u0026#39; } #=\u0026gt; {\u0026#34;a\u0026#34;=\u0026gt;\u0026#34;A\u0026#34;, \u0026#34;b\u0026#34;=\u0026gt;\u0026#34;B\u0026#34;, \u0026#34;d\u0026#34;=\u0026gt;\u0026#34;D\u0026#34;} # 以下と同義 # \u0026#34;adcacbd\u0026#34;.gsub(/a|b|d/, { \u0026#39;a\u0026#39; =\u0026gt; \u0026#39;A\u0026#39;, \u0026#39;b\u0026#39; =\u0026gt; \u0026#39;B\u0026#39;, \u0026#39;d\u0026#39; =\u0026gt; \u0026#39;D\u0026#39; }) \u0026#34;adcacbd\u0026#34;.gsub(Regexp.new(\u0026#34;#{convert_map.keys.join(\u0026#39;|\u0026#39;)}\u0026#34;), convert_map) #=\u0026gt; \u0026#34;ADcAcBD\u0026#34;"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/08/28/how-to-get-number-of-lines-with-cent-os/",
title: "CentOS でファイル内の行数を取得する方法",
image: "images/logo/cent_os_logo.png",
date: "2022-08-28",
body: "CentOS でファイル内の行数を取得する方法 CentOS でファイル内の行数を取得する方法を備忘録として残しておく 方法 wc コマンドの -l オプションを使用する 環境 CentOS: CentOS Linux release 8.4.2105 実際のコード # 該当のファイルが存在するディレクトリに移動して実行 wc -l # 拡張子で対象を絞りたい場合は以下 # 例. 拡張子が「.csv」のファイルの行数を取得 wc -l `find ./ -name \u0026#39;*.csv\u0026#39;`"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/08/23/how-to-get-alias-column-pluck-method-with-rails/",
title: "rails で別名がつけられているカラムを pluck で取得する方法",
image: "images/logo/rails_logo.svg",
date: "2022-08-23",
body: "rails で別名がつけられているカラムを pluck で取得する方法 rails で別名がつけられているカラムを pluck で取得する方法を備忘録として残しておく 方法 シンボルでの指定ではなく、文字列で as 句含めて指定する 環境 rails: 6.1.6.1 実際のコード 例. Book と Category クラスの関係が 1 対 多 である場合 # Book クラス class Book \u0026lt; ApplicationRecord has_many :categories end # Category クラス class Category \u0026lt; ApplicationRecord belongs_to :book end # データ準備 book = Book.create!(name: \u0026#39;サンプル書籍\u0026#39;) book.categories \u0026lt;\u0026lt; Category.create(name: \u0026#39;ビジネス\u0026#39;) book.categories \u0026lt;\u0026lt; Category.create(name: \u0026#39;自己啓発\u0026#39;) # 別名を付与したカラムを取得 category_names = Book.joins(:categories) .select(:name, \u0026#39;categories.name as category_name\u0026#39;) .where(id: 1) .pluck(\u0026#39;categories.name as category_name\u0026#39;) # (1.2ms) SELECT categories.name as category_name FROM \u0026#34;books\u0026#34; INNER JOIN \u0026#34;categories\u0026#34; ON \u0026#34;categories\u0026#34;.\u0026#34;book_id\u0026#34; = \u0026#34;books\u0026#34;.\u0026#34;id\u0026#34; WHERE \u0026#34;books\u0026#34;.\u0026#34;id\u0026#34; = $1 [[\u0026#34;id\u0026#34;, 1]] #=\u0026gt; [\u0026#34;ビジネス\u0026#34;, \u0026#34;自己啓発\u0026#34;] # 別テーブルの同名カラムも可能 category_names = Book.joins(:categories) .select(:name, \u0026#39;categories.name as category_name\u0026#39;) .where(id: 1) .pluck(:name, \u0026#39;categories.name as category_name\u0026#39;) # (1.0ms) SELECT \u0026#34;books\u0026#34;.\u0026#34;name\u0026#34;, categories.name as category_name FROM \u0026#34;books\u0026#34; INNER JOIN \u0026#34;categories\u0026#34; ON \u0026#34;categories\u0026#34;.\u0026#34;book_id\u0026#34; = \u0026#34;books\u0026#34;.\u0026#34;id\u0026#34; WHERE \u0026#34;books\u0026#34;.\u0026#34;id\u0026#34; = $1 [[\u0026#34;id\u0026#34;, 1]] #=\u0026gt; [[\u0026#34;サンプル書籍\u0026#34;, \u0026#34;ビジネス\u0026#34;], [\u0026#34;サンプル書籍\u0026#34;, \u0026#34;自己啓発\u0026#34;]]"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/08/22/how-to-get-count-specific-string-with-postgre-sql/",
title: "PostgreSQL で テーブルのカラム内の特定の文字数を取得する方法",
image: "images/logo/postgre_sql_logo.png",
date: "2022-08-22",
body: "PostgreSQL で テーブルのカラム内の特定の文字数を取得する方法 PostgreSQL で テーブルのカラム内の特定の文字数を取得する方法を備忘録として残しておく 方法 sum, length, regexp_replace を使用する 環境 PostgreSQL: 13.3 実際のコード regexp_replace 関数で name カラム内の 「仼」、「鶴」を空文字に置換 length 関数で 1 の置換前の文字数および置換後の文字数を取得 sum 関数で 2 で取得したものを計算(置換前文字数 - 置換後文字数) ※coalsesce 関数は null が返却された場合のデフォルト値を設定 select \u0026#39;ユーザテーブル--名前カラム中の「仼」または「鶴」の件数\u0026#39;, coalesce(sum(length(name)-length(regexp_replace(name, \u0026#39;[仼鶴]\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;g\u0026#39;))), 0) from users;"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/05/24/how-to-import-csv-with-postgre-sql/",
title: "PostgreSQL で CSVをインポートする方法",
image: "images/logo/postgre_sql_logo.png",
date: "2022-05-24",
body: "PostgreSQL で CSVをインポートする方法 PostgreSQL で CSV をインポートする方法を備忘録として残しておく 方法 \\COPY を使用する 環境 PostgreSQL: 13.3 実際のコード su - postgres psql \\c {DB 名}; \\COPY {テーブル名} FROM \u0026#39;{csvファイルパス}\u0026#39; DELIMITER \u0026#39;,\u0026#39; CSV; # 例 HEADER なしの場合 \\COPY users FROM \u0026#39;./users.csv\u0026#39; DELIMITER \u0026#39;,\u0026#39; CSV; # 例 HEADER ありの場合 \\COPY users FROM \u0026#39;./users.csv\u0026#39; DELIMITER \u0026#39;,\u0026#39; CSV HEADER; # エクスポートする場合は以下 su - postgres psql \\c {DB 名}; \\COPY {テーブル名} TO \u0026#39;{csvファイルパス}\u0026#39; WITH CSV DELIMITER \u0026#39;,\u0026#39;; # 例 HEADER なしの場合 \\COPY users TO \u0026#39;./users.csv\u0026#39; WITH CSV DELIMITER \u0026#39;,\u0026#39;; # 例 HEADER ありの場合 \\COPY users TO \u0026#39;./users.csv\u0026#39; WITH CSV HEADER DELIMITER \u0026#39;,\u0026#39;; # 例 10 件取得(id 昇順) \\COPY (select * from users order by id limit 10) TO \u0026#39;./users.csv\u0026#39; WITH CSV HEADER DELIMITER \u0026#39;,\u0026#39;; Shell Script として行う場合は以下のようにする #!/bin/sh # ユーザを postgres に切り替えたままでコマンドの実行を行う ※CSV インポート su - postgres \u0026lt;\u0026lt;EOF psql \\c {DB 名}; \\COPY {テーブル名} FROM \u0026#39;{csvファイルパス}\u0026#39; DELIMITER \u0026#39;,\u0026#39; CSV; EOF"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/05/24/how-to-auto-seq-for-postgre-sql-with-rails/",
title: "rails で id 等の自動採番項目の不整合を修正する方法(PostgreSQL)",
image: "images/logo/rails_logo.svg",
date: "2022-05-24",
body: "rails で id 等の自動採番項目の不整合を修正する方法(PostgreSQL) rails で 自動採番項目の不整合を修正する方法を備忘録として残しておく 方法 reset_pk_sequence! を使用する 環境 rails: 6.1.4 実際のコード ActiveRecord::Base.connection.tables.each do |table_name| ActiveRecord::Base.connection.reset_pk_sequence!(table_name) end"
},
{
url: "https://kkawazoe.github.io/amp/blog/2022/02/26/how-to-source-location-rails/",
title: "rails でメソッドの定義場所を表示する方法",
image: "images/logo/rails_logo.svg",
date: "2022-02-26",
body: "rails でメソッドの定義場所を表示する方法 rails で エラーが出てどのクラスのメソッドが呼ばれているかを確認する方法を備忘録として残しておく 方法 XXX.method(:{method}).source_location を使用する 例. ActiveRecord::Base.method(:transaction).source_location 環境 ruby: 2.6.10 rails: 5.2.3 実際のコード ActiveRecord::Base.method(:transaction).source_location =\u0026gt; [\u0026#34;/usr/local/bundle/ruby/2.6.0/gems/activerecord-5.2.3/lib/active_record/transactions.rb\u0026#34;, 211]"
},
{
url: "https://kkawazoe.github.io/amp/blog/2021/12/11/how-to-convert-excel-to-pdf-with-libreoffice/",
title: "libreoffice を使用して Excel を PDF に変換する方法",
image: "images/logo/libreoffice_logo.svg",
date: "2021-12-11",
body: "libreoffice を使用して Excel を PDF に変換する方法 アップロードされた Excel を PDF に変換して保存する必要があり 調査を行った LibreOffice で変換する方法を備忘録として残しておく ※図形など綺麗に変換されないパターンもあるため注意が必要 前提 LibreOffice を事前にインストールしておく /Applications/LibreOffice.app/Contents/MacOS/soffice にインストールしている場合 方法 以下のコマンドで変換を行う ※Calc を使用して PDF に変換 参考 指定できるフィルタ /Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to pdf:\u0026#34;calc_pdf_Export\u0026#34; {Excel File Path} その他 以下のようにすることで soffice コマンドを登録可能 /usr/local/bin/soffice を作成して中に以下を記載する #!/bin/bash # Need to do this because symlink won\u0026#39;t work # It complains about some .plist files /Applications/LibreOffice.app/Contents/MacOS/soffice \u0026#34;$@\u0026#34; 以下のコマンドで実行権限を付与する sudo chmod +x /usr/loca/bin/soffice 上記を sh として gist に置いているので以下でも可 sudo curl https://gist.githubusercontent.com/kkawazoe/6e8096e3b800905b43e555c32689ca4f/raw/17311ce29e3ed1b7419bd4314015ed0a36c3c7e7/soffice.sh \u0026gt; /usr/local/bin/soffice \u0026amp;\u0026amp; sudo chmod +x /usr/local/bin/soffice"
},
{
url: "https://kkawazoe.github.io/amp/blog/2021/06/02/how-to-show-reviewer-pullrequest-assign-self/",
title: "GitHub で自分にレビュー依頼が来ているプルリクエストを一覧で表示する方法",
image: "images/logo/github_logo.png",
date: "2021-06-02",
body: "GitHub で自分にレビュー依頼が来ているプルリクエストを一覧で表示する方法 経緯 表題の件を行う必要があり調査を行ったため備忘録として残しておく 手順 1. GitHub にログインする 2. 以下を GitHub 内で検索する is:open is:pr review-requested:{自分のユーザー名} もしくは rewiew-requested で確認可能 ※PR 内でコメントをつけたりすると対象から外れてしまうため注意が必要 追記 以下で検索すればコメント等つけた場合も含めて検索されそう ※こちらは逆に未レビューのものが対象から外れてしまうため注意が必要 is:open is:pr reviewed-by:{自分のユーザー名} その他 他のコマンドについては 参考 を参照"
},
{
url: "https://kkawazoe.github.io/amp/blog/2021/05/14/how-to-execute-specified-rspec/",
title: "特定の RSpec のみ実行されるようにする方法",
image: "images/logo/rails_logo.svg",
date: "2021-05-14",
body: "特定の RSpec のみ実行されるようにする方法 個別カスタマイズ等で追加した RSpec のみ実行させる必要があり、調査した結果を備忘録として残しておく 方法 tag オプション を使用して実現する 環境 rspec: rspec 3.8 実際のコード # # :key =\u0026gt; \u0026#39;value\u0026#39; 形式でタグを付与可能 # Group(describe, context, it) に対して付与可能 # RSpec.describe \u0026#34;group with tagged specs\u0026#34; do it \u0026#34;example I\u0026#39;m working now\u0026#34;, focus: true do; end it \u0026#34;special example with string\u0026#34;, type: \u0026#39;special\u0026#39; do; end it \u0026#34;special example with symbol\u0026#34;, type: :special do; end it \u0026#34;slow example\u0026#34;, skip: true do; end it \u0026#34;ordinary example\u0026#34;, speed: \u0026#39;slow\u0026#39; do; end end 実行方法 例. タグとして type: :special が付与された RSpec を実行 bundle exec rspec spec --tag type:special 以下のテストが実行される it \u0026#34;special example with string\u0026#34;, type: \u0026#39;special\u0026#39; do; end it \u0026#34;special example with symbol\u0026#34;, type: :special do; end"
},
{
url: "https://kkawazoe.github.io/amp/blog/2021/05/12/how-to-either-obtained-value-symbol-or-string-key-of-hash/",
title: "Hash の Key が Symbol または String どちらでも取得可能にする方法",
image: "images/logo/rails_logo.svg",
date: "2021-05-12",
body: "Hash の Key が Symbol または String どちらでも取得可能にする方法 HashWithIndifferentAccess に変換して実現する 環境 rails: rails 6.0.3.6 実際のコード rgb = { black: \u0026#39;#0000\u0026#39;, white: \u0026#39;#FFFFFF\u0026#39; }.with_indifferent_access rgb[:black] # =\u0026gt; \u0026#34;#0000\u0026#34; rgb[\u0026#39;black\u0026#39;] # =\u0026gt; \u0026#34;#0000\u0026#34; rgb[:\u0026#39;black\u0026#39;] # =\u0026gt; \u0026#34;#0000\u0026#34; rgb[:white] # =\u0026gt; \u0026#34;#FFFFFF\u0026#34; rgb[\u0026#39;white\u0026#39;] # =\u0026gt; \u0026#34;#FFFFFF\u0026#34; rgb[:\u0026#39;white\u0026#39;] # =\u0026gt; \u0026#34;#FFFFFF\u0026#34;"
},
{
url: "https://kkawazoe.github.io/amp/blog/2021/04/11/convert-string-code-utf8-to-cp932-with-nkf/",
title: "nkf を使用して UTF-8 を CP932 に文字コード変換する方法",
image: "images/logo/rails_logo.svg",
date: "2021-04-11",
body: "nkf を使用して UTF-8 を CP932 に文字コード変換する方法 CSV 出力処理実装時に文字コード変換を行う必要があり対応を行った その対処方法を備忘録として残しておく 環境 rails: rails 6.0.3.6 仕様 UTF-8 の文字列を CP932 に変換する ※変換不可能な文字は'〓'に変換する 実際のコード str = \u0026#39;〜変換不可能文字を含む文字列〜\u0026#39; NKF.nkf(\u0026#39;--ic=UTF-8 --oc=CP932 --fb-subchar=0x3013\u0026#39;, str).encode(\u0026#39;UTF-8\u0026#39;, \u0026#39;CP932\u0026#39;) #=\u0026gt; \u0026#34;〓変換不可能文字を含む文字列〓\u0026#34;"
},
{
url: "https://kkawazoe.github.io/amp/blog/2021/03/14/modify-starting-directory-for-windows-terminal/",
title: "windows terminal でターミナル毎に起動時のディレクトリを変更する方法",
image: "images/logo/windows_terminal_logo.png",
date: "2021-03-14",
body: "windows terminal でターミナル毎に起動時のディレクトリを変更する方法 windows terminal でターミナル毎に起動時のディレクトリを変更する方法を備忘録として残しておく 環境 windows: Windows 10 Pro wsl: version 2 ディストリビューション: Ubuntu 18.04 方法 Windows Terminal を起動する 「Ctrl」+「,」を押下して setting.json を開く setting.json の設定に以下を追加する { \u0026#34;$schema\u0026#34;: \u0026#34;https://aka.ms/terminal-profiles-schema\u0026#34;, \u0026#34;defaultProfile\u0026#34;: \u0026#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\u0026#34;, \u0026#34;profiles\u0026#34;: { \u0026#34;defaults\u0026#34;: { \u0026#34;startingDirectory\u0026#34;: \u0026#34;c:\\\\work\u0026#34; // 追加 ターミナル共通の起動時のディレクトリを指定 }, \u0026#34;list\u0026#34;: [ { \u0026#34;guid\u0026#34;: \u0026#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Windows PowerShell\u0026#34;, \u0026#34;commandline\u0026#34;: \u0026#34;powershell.exe\u0026#34;, \u0026#34;hidden\u0026#34;: false }, { \u0026#34;guid\u0026#34;: \u0026#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Command Prompt\u0026#34;, \u0026#34;commandline\u0026#34;: \u0026#34;cmd.exe\u0026#34;, \u0026#34;hidden\u0026#34;: false }, { \u0026#34;guid\u0026#34;: \u0026#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\u0026#34;, \u0026#34;hidden\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;Azure Cloud Shell\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;Windows.Terminal.Azure\u0026#34; }, { \u0026#34;guid\u0026#34;: \u0026#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\u0026#34;, \u0026#34;hidden\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;Ubuntu-18.04\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;Windows.Terminal.Wsl\u0026#34;, \u0026#34;startingDirectory\u0026#34;: \u0026#34;/home/{ユーザ名}/project\u0026#34; // 追加 wsl 専用の起動時のディレクトリを指定 } ] } }"
},
{
url: "https://kkawazoe.github.io/amp/blog/2021/03/14/modify-root-user-distribution-for-wsl-on-ubuntu/",
title: "wsl ディストリビューションに ubuntu を選択した際に起動時のユーザを root に変更する方法",
image: "images/logo/wsl_logo.png",
date: "2021-03-14",
body: "wsl ディストリビューションに ubuntu を選択した際に起動時のユーザを root に変更する方法 wsl の起動時のユーザを root にする方法を備忘録として残しておく 環境 windows: Windows 10 Pro wsl: version 2 ディストリビューション: Ubuntu 18.04 前提 wsl の有効化およびディストリビューションのインストールは完了している前提 ※ wsl のインストールについては 参考 を参照 方法 PowerShell で以下のコマンドを実行する $ wsl $ sudo passwd root $ exit $ wsl -s Ubuntu-18.04 $ ubuntu1804 config --default-user root $ wsl #=\u0026gt; root でログインしていることを確認"
},
{
url: "https://kkawazoe.github.io/amp/blog/2021/03/14/copy-file-into-container-with-docker-compose/",
title: "docker-compose で管理しているコンテナ内にファイルをコピーする方法",
image: "images/logo/docker_logo.png",
date: "2021-03-14",
body: "docker-compose で管理しているコンテナ内にファイルをコピーする方法 docker-compose で管理しているコンテナにホストに存在するファイルをコピーする方法を備忘録として残しておく 環境 dokcer: 20.10.5 docker-compose: 1.28.5 前提 ファイルをコピーする対象のコンテナに紐づいているサービス名 app 方法 docker cp {コピーする対象ファイル} `docker-compose ps -q {サービス名}`:/ # 例 サービス名 app に紐付いているコンテナに test.txt をコピーする docker cp test.txt `docker-compose ps -q app`:/"
},
{
url: "https://kkawazoe.github.io/amp/blog/2020/10/06/about-error-with-rubyxl/",
title: "Gem rubyXL を使用した際に起こったエラーおよび対応について",
image: "images/logo/rails_logo.svg",
date: "2020-10-06",
body: "Gem rubyXL を使用した際に起こったエラーおよび対応について Gem rubyXL を使用している際に起こったエラーとその対処方法を備忘録として残しておく 環境 rails: rails 5.2.2 rubyXL について 拡張子「xlsx」を読み書き可能なライブラリ 使用感としてはテンプレートとなる Excel に対して読み書きする場合には 問題なく使用可能 但し、テンプレートに数式やグラフが含まれている場合に行などを 追加した場合に出力された Excel ファイルが破損して起動不可になる場合が あるため注意が必要 rubyXL 発生した障害とその対応 テキストの折り返しがsheet.add_cellではできない sheet.add_cell(col, row, 'text').change_text_wrap によって実装可能 テキストを折り返して表示してくれるようになる change_contents が使えない version 3.4.0 以降は convenience_methods を呼び出さないと利用不可 # require が必要なメソッド require \u0026#39;rubyXL/convenience_methods/cell\u0026#39; require \u0026#39;rubyXL/convenience_methods/color\u0026#39; require \u0026#39;rubyXL/convenience_methods/font\u0026#39; require \u0026#39;rubyXL/convenience_methods/workbook\u0026#39; require \u0026#39;rubyXL/convenience_methods/worksheet\u0026#39; もしくは以下で全て使用可 require \u0026#39;rubyXL/convenience_methods\u0026#39; シートのコピーができない Marshal.load なども試してみたが、上手くいかなかったので以下を参考にして対応 参考サイト シートコピー後、コピーしたシートを編集したら他のシートの内容も一緒に変わってしまう change_contents の仕様と上記のシートコピーによって生じた現象 ① シートの書式等をコピー ② change_contents で書式設定を保持したまま内容を変更 ③ 該当するコピーシートすべての内容が書き換わる という動作をしている =\u0026gt; add_cell による値の挿入で対応 ※上記の場合は書式設定等は rubyXL 側で行う必要がある 動的な配置で Excel の数式を設定する insert_row 等で行の挿入を動的に行った場合に Excel の数式によって値の算出を行いたい ※insert_row は公式でも書かれているが扱いに慎重になるべきメソッドで、結合したセルや数式が挿入した行の下にあった場合に Excel が破損することがある add_cellの書式を確認したところ数式は第4引数に該当するためそこに Excel の数式を代入する(SUM 関数等) グラフの作成ができない rubyXL 側にグラフに関するメソッドは存在しないため対応不可 テンプレートにグラフを挿入することで対応 印刷方向を縦向きから横向きにしたい 基本的にテンプレートの印刷設定を修正するだけで対応可 「テンプレート内のシートをコピーして作成その後、シートを削除する」といった処理の場合は以下の対応を行う worksheet.page_setup = template.page_setup 以下page_setup内の属性 paperSize(unsigned int型)...用紙サイズ scale(unsigned int型)...印刷スケール(すべての行を1シート内に含める、などの設定を指す) firstPageNumber(unsigned int型)...最初のページ番号 fitToWidth(unsigned int型)...幅に合わせる fitToHeight(unsigned int型)...高さに合わせる horizonDpi(unsigned int型)...水平DPI verticalDpi(unsigned int型)...垂直DPI copies(unsigned int型)...印刷する部数 usePrinterDefaults(boolean型)...デフォルトのプリンタを利用するかどうか blackAndWhite(boolean型)...白黒印刷をするかどうか draft(boolean型)...簡易印刷するかどうか(罫線や塗りつぶしの色(網掛け)などの書式やグラフや図形などのオブジェクトを省略して印刷) useFirstPageNumber(boolean型)...最初のページ番号を使用するかどうか pageOrder(downThenOver・overThenDownの2択)...ページの順序．昇順か降順か orientaion(default・portrait・landscapeの3択)...オリエンテーション(印刷時の向き．デフォルト・縦・横) cellComments(none・asDisplayed・atEndの3択)...セルコメントを印刷する errors(displayed・blank・dash・NAの4択)...印刷エラー処理 rubyXL では実装できないパターンについて グラフ関連 グラフの描画自体はテンプレートファイルからの読み込みで問題なく実行可能 但し、以下のパターンは実現は難しい ① シート名を動的に変更しつつグラフの描画を行う Excel 上だとグラフのデータ範囲はシートに基づいており、シート名を変更してしまうと変更前のシート名を参照してしまいエラーが発生する DISTINCT関数をテンプレート側で使用しても、グラフのデータ範囲はファイル読み込み時の Excel の関数よりも早くに動作するためエラーが発生する また、シート名の動的な変更は xlsm のマクロを利用するしかなく RubyXL 側では実現不可 ② グラフのデータ範囲の変更 ①と同様の理由で不可 同様の理由で、グラフのデータ範囲が動的に変化する (insert_row などを使用して抽出するデータ範囲が変動する)場合も RubyXL 側では実現不可 ③ グラフの生成(グラフ設定の編集含む) RubyXL にグラフ描画・サポート機能が対応していないため不可 テンプレートファイルにてグラフを挿入しておいて対応する"
},
{
url: "https://kkawazoe.github.io/amp/blog/2020/10/04/how-to-deal-with-vagrant-halt-failure/",
title: "vagrant halt 失敗時の対応方法",
image: "images/logo/vagrant_logo.svg",
date: "2020-10-04",
body: "vagrant halt 失敗時の対応方法 経緯 vagrant halt を行った際に以下のエラーが発生したため、その対処方法を備忘録として残しておく 手順 vagrant halt を行う 以下のエラーが発生 An action \u0026#39;halt\u0026#39; was attempted on the machine \u0026#39;default\u0026#39;, but another process is already executing an action on the machine. ess at a time. Please wait until the other Vagrant process finishes modifying this machine, then try again. If you believe this message is in error, please check the process listing for any \u0026#34;ruby\u0026#34; or \u0026#34;vagrant\u0026#34; processes and kill them. Then try again. 以下のコマンドを実行して ruby.exe の pid を探す tasklist /fi \u0026#34;Imagename eq ruby.exe\u0026#34; 以下のコマンドを実行して ruby.exe を終了させる 例 ruby.exe の pid が 7972 の場合 taskkill /F /pid 7972 再度 vagrant halt を実行する"
},
{
url: "https://kkawazoe.github.io/amp/blog/2020/05/23/insert-formula-into-hugo-part2/",
title: "Hugo に数式を挿入する その2",
image: "images/logo/hugo_logo.png",
date: "2020-05-23",
body: "Hugo に数式を挿入する その2 [前回までの記事] Hugo に数式を挿入する 経緯 mathjax のバージョンを 3 系 にアップデートした際に単純にいかなかったので備忘録として残しておく 手順 参考 を見ながらアップデートする ※version2 から version 3 への変換を利用 partials フォルダ配下の以下のファイルを修正する CDN で提供されている最新の MathJax.js の URL は、cdnjs.com で確認する \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; MathJax = { tex: { inlineMath: [[\u0026#39;$\u0026#39;,\u0026#39;$\u0026#39;], [\u0026#39;\\\\(\u0026#39;,\u0026#39;\\\\)\u0026#39;]], processEscapes: true, tags: \u0026#34;ams\u0026#34;, autoload: { color: [], colorV2: [\u0026#39;color\u0026#39;] }, packages: {\u0026#39;[+]\u0026#39;: [\u0026#39;noerrors\u0026#39;]} }, chtml: { matchFontHeight: false, displayAlign: \u0026#34;left\u0026#34;, // version 2 で css で変更していた 数式の表示位置の設定 displayIndent: \u0026#34;2em\u0026#34; }, options: { skipHtmlTags: [\u0026#39;script\u0026#39;, \u0026#39;noscript\u0026#39;, \u0026#39;style\u0026#39;, \u0026#39;textarea\u0026#39;, \u0026#39;pre\u0026#39;], renderActions: { /* これを記述しないと インライン数式(例. ${}_n \\mathrm{ P }_k$) が機能しない */ find_script_mathtex: [10, function (doc) { for (const node of document.querySelectorAll(\u0026#39;script[type^=\u0026#34;math/tex\u0026#34;]\u0026#39;)) { const display = !!node.type.match(/; *mode=display/); const math = new doc.options.MathItem(node.textContent, doc.inputJax[0], display); const text = document.createTextNode(\u0026#39;\u0026#39;); node.parentNode.replaceChild(text, node); math.start = {node: text, delim: \u0026#39;\u0026#39;, n: 0}; math.end = {node: text, delim: \u0026#39;\u0026#39;, n: 0}; doc.math.push(math); } }, \u0026#39;\u0026#39;] } }, loader: { load: [\u0026#39;[tex]/noerrors\u0026#39;] } }; \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; async src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js\u0026#34; id=\u0026#34;MathJax-script\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 1 で作成した partial を head or footer で読込 例 head で読込 \u0026lt;head\u0026gt; ・・・ {{ partial \u0026#34;mathjax_support.html\u0026#34; . }} \u0026lt;/head\u0026gt; チートシート ※追加分のみ 複数行で =(イコール) の位置を揃える 番号あり [記入例] \\begin{align} f(x) \u0026amp;= x^2+3x+2 \\\\\\\\\\\\ \u0026amp;= (x+1)(x+2) \\end{align} [表示例] \\begin{align} f(x) \u0026amp;= x^2+3x+2 \\\\\\ \u0026amp;= (x+1)(x+2) \\end{align} 番号なし [記入例] \\begin{align*} f(x) \u0026amp;= x^2+3x+2 \\\\\\\\\\\\ \u0026amp;= (x+1)(x+2) \\end{align*} [表示例] \\begin{align*} f(x) \u0026amp;= x^2+3x+2 \\\\\\ \u0026amp;= (x+1)(x+2) \\end{align*}"
},
{
url: "https://kkawazoe.github.io/amp/blog/2020/05/17/apply-layout-to-static-error-page-with-rails/",
title: "Rails で静的エラーページにレイアウトを適用する",
image: "images/logo/rails_logo.svg",
date: "2020-05-17",
body: "Rails で静的エラーページにレイアウトを適用する 環境 rails: rails 5.2.3 方法 Gem Errgent を使用して実現する 確認 config/environments/development.rb の以下を編集して確認する config.consider_all_requests_local = false 実際のコード 例. エラーコード 404, 500 ロケール毎に静的エラーページを生成する =\u0026gt; 生成されるファイル 例. public/404.ja.html desc \u0026#39;Generate Error Pages\u0026#39; task generate_error_pages: :environment do I18n.available_locales.each do |locale| I18n.locale = locale renderer = Errgent::Renderer.new( codes: [404, 500] layout: \u0026#39;layouts/error_page\u0026#39;, # where to find your layout by default output: \u0026#34;public/%s.#{locale}.html\u0026#34; # where to put generated pages by default, %s is the replacement for @code ) renderer.render end I18n.locale = I18n.default_locale end"
},
{
url: "https://kkawazoe.github.io/amp/blog/2020/04/04/handle-credentials-info-of-rails-on-docker-compose/",
title: "Docker Compose 上で Rails の秘匿情報を扱う",
image: "images/logo/rails_logo.svg",
date: "2020-04-04",
body: "Docker Compose 上で Rails の秘匿情報を扱う 環境 rails: rails 5.2.3 方法 前提 credentials.yml.enc を使用 docker 上での rails のコンテナ名: rails 確認 例. production 環境の秘匿情報を確認する 以下のコマンドを使用して確認する $ docker-compose exec rails bash #=\u0026gt; コンテナが起動していない場合は docker-compose run rails bash $ EDITOR=\u0026#34;vim\u0026#34; bin/rails env_credentials:show -e production 編集 例. production 環境の秘匿情報を編集する 以下のコマンドを使用して確認する $ docker-compose exec rails bash #=\u0026gt; コンテナが起動していない場合は docker-compose run rails bash $ EDITOR=\u0026#34;vim\u0026#34; bin/rails env_credentials:edit -e production"
},
{
url: "https://kkawazoe.github.io/amp/blog/2020/03/19/use-gas-to-search-for-gmail-and-retrieve-emails/",
title: "Google Apps Script で Gmail から 特定条件のスレッドを検索しメールを取り出す",
image: "images/logo/gas_logo.svg",
date: "2020-03-19",
body: "Google Apps Script で Gmail から 特定条件のスレッドを検索しメールを取り出す 実際のソース function searchContactMail() { /* Gmail から件名が「noreply」のスレッドを検索して内容を取り出す */ var strTerms = \u0026#39;noreply\u0026#39;; var myThreads = GmailApp.search(strTerms, 0, 100); var myMsgs = GmailApp.getMessagesForThreads(myThreads); //二次元配列 var contents = []; /* 各メールの内容を取り出す */ for (var i = 0; i \u0026lt; myMsgs.length; i++) { for (var j = 0; j \u0026lt; myMsgs[i].length; j++) { var data = myMsgs[i][j].getTo(); if (data !== null) { contents.push([data]); } } } /* スプレッドシートのシート「output」に出力 */ if (myMsgs.length \u0026gt; 0) { var mySheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName( \u0026#39;output\u0026#39; ); mySheet.getRange(1, 1, contents.length, 1).setValues(contents); } }"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/09/14/dynamic-translate-for-i18n-with-rspec/",
title: "RSpec 内で動的に I18n の訳文を追加する",
image: "images/logo/rails_logo.svg",
date: "2019-09-14",
body: "RSpec 内で動的に I18n の訳文を追加する 環境 rails: rails 5.2.3 方法 I18n::Backend::Base#store_translations を使用する I18n.backend.store_translations( :ja, test: \u0026#39;テスト\u0026#39; ) I18n.t(:test) #=\u0026gt; テスト"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/07/21/how-to-handle-tokens-in-rails/",
title: "Rails でトークンを扱う方法",
image: "images/logo/rails_logo.svg",
date: "2019-07-21",
body: "Rails でトークンを扱う方法 環境 rails: rails 5.2.3 方法 トークンの認証 トークンの認証については authenticate_with_http_token を使用する 以下が対象 Authorization: Token XXX Authorization: Bearer XXX class ApplicationController \u0026lt; ActionController::API # authenticate_with_http_token を使用するために必要 include ActionController::HttpAuthentication::Token::ControllerMethods before_action :authenticate def authenticate authenticate_with_http_token do |token, options| # 認証処理 および レスポンスが必要な場合は記述 end end end トークンの取得 トークンの取得については token_and_options を使用する 以下が対象 Authorization: Token XXX Authorization: Bearer XXX class ApplicationController \u0026lt; ActionController::API # token_and_options を使用するために必要 include ActionController::HttpAuthentication::Token def access_token token_and_options(request)\u0026amp;.first end end"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/07/06/road-to-fp3-part7/",
title: "FP3級への道 その7",
image: "images/logo/fp_logo.png",
date: "2019-07-06",
body: "FP3級への道 その7 学習中に間違えやすいと思った点を備忘録として残しておく [前回までの記事] FP3級への道 FP3級への道 その2 FP3級への道 その3 FP3級への道 その4 FP3級への道 その5 FP3級への道 その6 受験結果 2019年5月 一応　FP 3級合格 勉強時間は一月半程度 後半 2週間は過去2, 3年分の過去問を中心に解いて解説および関連する分野を勉強した FP に関しては試験受ける・受けないはともかくとして勉強自体はやって良かったと思う 2級以上を受験するかどうかは今のところ不明だがモチベーションが上がれば挑戦したい 【種目別試験結果】ファイナンシャル・プランニング技能検定 公式サイトで確認すると今回の合格率は以下 等級 学科/実技 試験科目 合格率 3級 学科 42.76％ 3級 実技 個人資産相談業務 54.35％ 大体例年通りくらいの合格率だったらしい"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/06/20/clone-repository-use-access-token-with-github/",
title: "github で access token を使用してリポジトリを clone する",
image: "images/logo/github_logo.png",
date: "2019-06-20",
body: "github で access token を使用してリポジトリを clone する 経緯 表題の件を行う必要があり対応を行ったため備忘録として残しておく 手順 1. アクセストークンを作成する GitHub アカウントにログインし，Settings \u0026gt; Developer settings から Personal access tokens を選択する Generate new token を押下する 2. 以下のコマンドを実行してリポジトリを clone する git clone https://{アカウント名}:{アクセストークン}@github.com/{アカウント名}/{リポジトリ名} 3. ローカルの設定を追加する git config --local user.name {アカウント名} git config --local user.email {アカウントのメールアドレス}"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/05/24/pass-lint-and-unit-test-to-build-with-electron-builder/",
title: "electron-builder で Lint および UnitTest が通った場合のみビルドするようにする",
image: "images/logo/electron_logo.svg",
date: "2019-05-24",
body: "electron-builder で Lint および UnitTest が通った場合のみビルドするようにする 経緯 electron にて ビルドするのに electron-builder を使用してみた その際に最低限 Lint, UnitTest を通ることを担保するようにしたため備忘録として残しておく 構築環境 electron: 5.0.1 electron-builder: 20.39.0 実際のコード package.json に以下の定義がしてある前提 ※以下は electron x angular(Angular Cli で生成) { ・・・ \u0026#34;scripts\u0026#34;: { \u0026#34;ng\u0026#34;: \u0026#34;ng\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;ng build --prod \u0026amp;\u0026amp; electron .\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;ng build\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;jest\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;ng lint\u0026#34;, \u0026#34;postinstall\u0026#34;: \u0026#34;electron-builder install-app-deps\u0026#34;, \u0026#34;release\u0026#34;: \u0026#34;ng build --prod \u0026amp;\u0026amp; node build.js\u0026#34;, }, ・・・ } electron-builder のオプションについては公式を参照 \u0026#39;use strict\u0026#39;; const builder = require(\u0026#39;electron-builder\u0026#39;); const Platform = builder.Platform; const childProcess = require(\u0026#39;child_process\u0026#39;); const unitTest = new Promise((resolve, reject) =\u0026gt; { childProcess.exec(\u0026#39;yarn test\u0026#39;, (error, stdout) =\u0026gt; { if (error) { // エラー時は例外を投げる reject(new Error(stdout + error)); } resolve(\u0026#39;UnitTest OK!\u0026#39;); }); }); const lint = new Promise((resolve, reject) =\u0026gt; { childProcess.exec(\u0026#39;yarn lint\u0026#39;, (error, stdout) =\u0026gt; { if (error) { // エラー時は例外を投げる reject(new Error(stdout + error)); } resolve(\u0026#39;Lint OK!\u0026#39;); }); }); const build = () =\u0026gt; { builder .build({ targets: Platform.WINDOWS.createTarget(), config: { directories: { output: \u0026#39;release\u0026#39;, buildResources: \u0026#39;dist\u0026#39;, }, productName: \u0026#39;Example App\u0026#39;, files: [\u0026#39;**/*\u0026#39;, \u0026#39;dist/**/*\u0026#39;], win: { target: [ { target: \u0026#39;nsis\u0026#39;, arch: [\u0026#39;x64\u0026#39;], }, ], }, nsis: { createDesktopShortcut: \u0026#39;always\u0026#39;, }, }, }) .then(() =\u0026gt; { console.log(\u0026#39;Build OK!\u0026#39;); }) .catch((error) =\u0026gt; { console.log(error); }); }; Promise.all([lint, unitTest]) .then((values) =\u0026gt; { console.log(values.join(\u0026#39;\\n\u0026#39;)); build(); }) .catch((error) =\u0026gt; { console.log(error.message); });"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/05/15/add-jest-at-angular-cli/",
title: "Angular Cli で作成したプロジェクトに Jest を追加する",
image: "images/logo/angular_logo.svg",
date: "2019-05-15",
body: "Angular Cli で作成したプロジェクトに Jest を追加する Angular Cli でプロジェクトを作成すると Karma + Jasmine が単体テストとして入るため Jest に変更する手順を備忘録として残しておく 構築環境 Angular CLI: 7.3.9 Node: 10.15.3 OS: darwin x64 Angular: ... Package Version ------------------------------------------------------ @angular-devkit/architect 0.13.9 @angular-devkit/core 7.3.9 @angular-devkit/schematics 7.3.9 @schematics/angular 7.3.9 @schematics/update 0.13.9 rxjs 6.3.3 typescript 3.2.4 手順 1. プロジェクトを作成 $ ng new JEST-EXAMPLE --style=styl ? Would you like to add Angular routing? Yes 2. 以下のコマンドを実行する yarn global add @briebug/jest-schematic ng g @briebug/jest-schematic:add ng add @briebug/jest-schematic 3. 以下のコマンドを実行して動作確認する $ yarn test $ jest PASS src/app/app.component.spec.ts AppComponent ✓ should create the app (89ms) ✓ should have as title \u0026#39;JEST-EXAMPLE\u0026#39; (28ms) ✓ should render title in a h1 tag (29ms) Test Suites: 1 passed, 1 total Tests: 3 passed, 3 total Snapshots: 0 total Time: 3.913s Ran all test suites. ✨ Done in 4.76s. 上記だけでも動くが snapshot テストを行うためには以下が追加で必要 4. src/app/app.component.spec.ts を修正 import { TestBed, async } from \u0026#39;@angular/core/testing\u0026#39;; import { RouterTestingModule } from \u0026#39;@angular/router/testing\u0026#39;; import { AppComponent } from \u0026#39;./app.component\u0026#39;; describe(\u0026#39;AppComponent\u0026#39;, () =\u0026gt; { beforeEach(async(() =\u0026gt; { TestBed.configureTestingModule({ imports: [ RouterTestingModule ], declarations: [ AppComponent, ], }).compileComponents(); })); describe(\u0026#39;snapshots\u0026#39;, () =\u0026gt; { it(\u0026#39;正しく render されること\u0026#39;, () =\u0026gt; { const fixture = TestBed.createComponent(AppComponent); expect(fixture).toMatchSnapshot(); }); }); }); 5. src/tsconfig.spec.json を修正 { \u0026#34;extends\u0026#34;: \u0026#34;../tsconfig.json\u0026#34;, \u0026#34;compilerOptions\u0026#34;: { \u0026#34;outDir\u0026#34;: \u0026#34;../out-tsc spec\u0026#34;, \u0026#34;types\u0026#34;: [ \u0026#34;jasmine\u0026#34;, //=\u0026gt; \u0026#34;jest\u0026#34; \u0026#34;node\u0026#34; ], \u0026#34;module\u0026#34;: \u0026#34;commonjs\u0026#34; }, \u0026#34;files\u0026#34;: [ \u0026#34;polyfills.ts\u0026#34; ], \u0026#34;include\u0026#34;: [ \u0026#34;**/*.spec.ts\u0026#34;, \u0026#34;**/*.d.ts\u0026#34; ] } 6. src/angular.json から以下を削除 { ・・・ \u0026#34;test\u0026#34;: { \u0026#34;builder\u0026#34;: \u0026#34;@angular-devkit/build-angular:karma\u0026#34;, \u0026#34;options\u0026#34;: { \u0026#34;main\u0026#34;: \u0026#34;src/test.ts\u0026#34;, \u0026#34;polyfills\u0026#34;: \u0026#34;src/polyfills.ts\u0026#34;, \u0026#34;tsConfig\u0026#34;: \u0026#34;src/tsconfig.spec.json\u0026#34;, \u0026#34;karmaConfig\u0026#34;: \u0026#34;src/karma.conf.js\u0026#34;, \u0026#34;styles\u0026#34;: [ \u0026#34;src/styles.styl\u0026#34; ], \u0026#34;scripts\u0026#34;: [], \u0026#34;assets\u0026#34;: [ \u0026#34;src/favicon.ico\u0026#34;, \u0026#34;src/assets\u0026#34; ] } }, ・・・ } 7. 以下のコマンドを実行する yarn remove @types/jasmine @types/jasminewd2 yarn add @types/jest 8. 以下のコマンドを実行して動作確認する $ jest PASS src/app/app.component.spec.ts AppComponent snapshots ✓ 正しく render されること (109ms) Test Suites: 1 passed, 1 total Tests: 1 passed, 1 total Snapshots: 1 passed, 1 total Time: 1.711s, estimated 3s Ran all test suites. ✨ Done in 2.43s."
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/30/road-to-fp3-part6/",
title: "FP3級への道 その6",
image: "images/logo/fp_logo.png",
date: "2019-04-30",
body: "FP3級への道 その6 学習中に間違えやすいと思った点を備忘録として残しておく [前回までの記事] FP3級への道 FP3級への道 その2 FP3級への道 その3 FP3級への道 その4 FP3級への道 その5 金融資産運用 債権 債権の利回り 直接利回り 投資金額(購入価格)に対する毎年の利息収入の割合 $$ 直接利回り(\\%) = \\frac{表面利率}{購入価格} \\times 100 $$ $$ 直接利回り(\\%) = \\frac{表面利率}{購入価格} \\times 100 $$ 例えば、表面利率1%の債権を102万円で購入した場合(小数点以下第3位を四捨五入) $$ \\frac{1%}{102円} \\times 100 ≒ 0.98% $$ 応募者利回り 債権の発行時に購入し、償還まで所有した場合の利回り $$ 応募者利回り(\\%) = \\frac{表面利率 + \\frac{額面(100円) - 発行価格}{償還期限(年)}}{発行価格} \\times 100 $$ 例えば、表面利率1%、発行価格98円、償還期限5年の債権を購入した場合(小数点以下第3位を四捨五入) $$ \\frac{1% + \\frac{100円 - 98円}{5年}}{98円} \\times 100 ≒ 1.43% $$ 最終利回り 既に発行されている債権を時価で購入し、償還まで所有した場合の利回り $$ 最終利回り(\\%) = \\frac{表面利率 + \\frac{額面(100円) - 購入価格}{残存年数(年)}}{購入価格} \\times 100 $$ 例えば、表面利率1%、償還期限5年、発行価格99円の債権を残存年数3年の時点で99円を購入した場合(小数点以下第3位を四捨五入) $$ \\frac{1% + \\frac{100円 - 99円}{3年}}{99円} \\times 100 ≒ 1.35% $$ 所有期間利回り 新規発行の債権または既発行の債権を購入し、償還前に売却した場合の利回り $$ 所有期間利回り(\\%) = \\frac{表面利率 + \\frac{売却価格 - 購入価格}{所有期間(年)}}{購入価格} \\times 100 $$ 例えば、表面利率1%、償還期限5年、発行価格98円の債権を発行時に購入し、4年後に103円で売却した場合(小数点以下第3位を四捨五入) $$ \\frac{1% + \\frac{103円 - 98円}{4年}}{98円} \\times 100 ≒ 2.30% $$ 参考にした教本 上記内容は以下の教本の内容を参考にしてます 2018-2019年版　みんなが欲しかった！　FPの教科書3級 滝澤ななみ TAC 2018年05月22日 売り上げランキング : 楽天ブックスで購入Amazonで購入 by ヨメレバ"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/28/auto-generate-test-sheet-tool-with-excel/",
title: "Excel でテスト用シートを自動生成するツールを作成する",
image: "images/logo/excel_logo.svg",
date: "2019-04-28",
body: "Excel でテスト用シートを自動生成するツールを作成する 経緯 結合テストなのでエビデンスを残しておく必要があり テスト項目ごとにシートを分ける必要があった テスト項目が多い場合手作業で シート作成 =\u0026gt; シート名変更をするのは手間だったため ツール化をすることにした 使用方法 「パラメータ」シートにて以下を指定する [設定項目] シート数: 作成するシート数 表示倍率: 作成するシートの表示倍率 シート作成後ワークグループ設定: チェックをつけるとシートを作成後に ワークグループ(各シートが選択状態)になる 「パラメータ」シートの「実行」ボタンを押下する 実際のコード Rem Attribute VBA_ModuleType=VBAModule Option VBASupport 1 Sub ExecuteButtonClick() Dim ws As Worksheet Dim wsArray() As String Dim chkFlg As Long \u0026#39;ワークシートの初期化 For Each ws In Worksheets \u0026#39;ワークシート名が\u0026#34;パラメータ\u0026#34;以外の場合 If ws.Name \u0026lt;\u0026gt; \u0026#34;パラメータ\u0026#34; Then Application.DisplayAlerts = False ws.Delete Application.DisplayAlerts = True End If Next ws \u0026#39;チェックボックスの値を取得 chkFlg = Worksheets(\u0026#34;パラメータ\u0026#34;).OLEObjects(\u0026#34;Chk_WorkGroup\u0026#34;).Object.Value \u0026#39;ワークシートの追加 For i = 0 To Worksheets(\u0026#34;パラメータ\u0026#34;).Cells(2, 3).Value - 1 Sheets.Add after:=ActiveSheet ActiveSheet.Name = \u0026#34;No.\u0026#34; \u0026amp; i + 1 ActiveWindow.Zoom = Worksheets(\u0026#34;パラメータ\u0026#34;).Cells(3, 3).Value ReDim Preserve wsArray(i) wsArray(i) = ActiveSheet.Name \u0026#39;100の倍数ごとに画面に制御を返す If i Mod 100 = 0 Then DoEvents End If Next \u0026#39;作業グループ設定フラグがオンの場合 If chkFlg Then \u0026#39;作業グループの設定 Sheets(wsArray).Select End If End Sub 作成したツール"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/27/insert-formula-into-hugo/",
title: "Hugo に数式を挿入する",
image: "images/logo/hugo_logo.png",
date: "2019-04-27",
body: "Hugo に数式を挿入する 経緯 Hugo で運用しているサイトに数式を埋め込む必要があり 調査した結果を備忘録として残しておく 手順 参考 と同じく Mathjax を使用して実現する partials フォルダ配下に以下のファイルを作成する CDN で提供されている最新の MathJax.js の URL は、cdnjs.com で確認する \u0026lt;script type=\u0026#34;text/javascript\u0026#34; async src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML\u0026#34;\u0026gt; MathJax.Hub.Config({ tex2jax: { inlineMath: [[\u0026#39;$\u0026#39;,\u0026#39;$\u0026#39;], [\u0026#39;\\\\(\u0026#39;,\u0026#39;\\\\)\u0026#39;]], displayMath: [[\u0026#39;$$\u0026#39;,\u0026#39;$$\u0026#39;]], processEscapes: true, processEnvironments: true, skipTags: [\u0026#39;script\u0026#39;, \u0026#39;noscript\u0026#39;, \u0026#39;style\u0026#39;, \u0026#39;textarea\u0026#39;, \u0026#39;pre\u0026#39;], TeX: { equationNumbers: { autoNumber: \u0026#34;AMS\u0026#34; }, extensions: [\u0026#34;AMSmath.js\u0026#34;, \u0026#34;AMSsymbols.js\u0026#34;] } } }); MathJax.Hub.Queue(function() { // Fix \u0026lt;code\u0026gt; tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown. Discussion at // https://github.com/mojombo/jekyll/issues/199 var all = MathJax.Hub.getAllJax(), i; for(i = 0; i \u0026lt; all.length; i += 1) { all[i].SourceElement().parentNode.className += \u0026#39; has-jax\u0026#39;; } }); \u0026lt;/script\u0026gt; 1 で作成した partial を head or footer で読込 例 head で読込 \u0026lt;head\u0026gt; ・・・ {{ partial \u0026#34;mathjax_support.html\u0026#34; . }} \u0026lt;/head\u0026gt; css を修正(カスタマイズする場合) css ファイルで以下の要素に対する修飾を記述する .has-jax { font: inherit; font-size: 100%; background: inherit; border: inherit; color: #515151; } .has-jax \u0026gt; .MathJax_Display { text-align: left !important; } チートシート ページ内に数式を記述 [記入例] $${}_n \\mathrm{ P }_k$$ [表示例] $${}_n \\mathrm{ P }_k$$ インライン形式で数式を記述 [記入例] 次の数式は ${}_n \\mathrm{ P }_k$ 文章内に埋め込まれます [表示例] 次の数式は ${}_n \\mathrm{ P }_k$ 文章内に埋め込まれます 四則演算 [記入例] $$1 + 2 = 3$$ $$2 - 3 = 5$$ $$3 \\times 2 = 6$$ $$6 \\div 3 = 2$$ [表示例] $$1 + 2 = 3$$ $$2 - 3 = 5$$ $$3 \\times 2 = 6$$ $$6 \\div 3 = 2$$ 分数 [記入例] $$\\frac{1}{2} - \\frac{1}{3} = \\frac{1}{6}$$ $$\\frac{a+b}{2ab}$$ [表示例] $$\\frac{1}{2} - \\frac{1}{3} = \\frac{1}{6}$$ $$\\frac{a+b}{2ab}$$ 複数行で =(イコール) の位置を揃える [記入例] \\begin{align} f(x) \u0026amp;= x^2+3x+2 \\\\\\\\\\\\ \u0026amp;= (x+1)(x+2) \\end{align} [表示例] \\begin{align*} f(x) \u0026amp;= x^2+3x+2 \\\\\\ \u0026amp;= (x+1)(x+2) \\end{align*}"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/26/road-to-fp3-part5/",
title: "FP3級への道 その5",
image: "images/logo/fp_logo.png",
date: "2019-04-26",
body: "FP3級への道 その5 学習中に間違えやすいと思った点を備忘録として残しておく [前回までの記事] FP3級への道 FP3級への道 その2 FP3級への道 その3 FP3級への道 その4 金融資産運用 株式 株式投資に用いる指標 $$ PER(倍) = \\frac{株価}{一株当たりの純利益(EPS)} $$ ※PER が低い銘柄は 割安 、高い銘柄は割高 $$ PBR(倍) = \\frac{株価}{一株当たりの純資産(BPS)} $$ ※PBR が低い(1倍に近い)銘柄は 割安 、高い銘柄は割高 $$ ROE(\\%) = \\frac{税引後当期純利益}{自己資本(純資産)} \\times 100 $$ $$ 配当利回り(\\%) = \\frac{一株当たりの配当金}{株価} \\times 100 $$ $$ 配当性向(\\%) = \\frac{配当金総額}{税引後当期純利益} \\times 100 $$ $$ 自己資本比率(\\%) = \\frac{自己資本(純資産)}{総資産(負債 + 純資産)} \\times 100 $$ 参考にした教本 上記内容は以下の教本の内容を参考にしてます 2018-2019年版　みんなが欲しかった！　FPの問題集3級 滝澤ななみ TAC 2018年05月22日 売り上げランキング : 楽天ブックスで購入Amazonで購入 by ヨメレバ"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/25/road-to-fp3-part4/",
title: "FP3級への道 その4",
image: "images/logo/fp_logo.png",
date: "2019-04-25",
body: "FP3級への道 その4 学習中に間違えやすいと思った点を備忘録として残しておく [前回までの記事] FP3級への道 FP3級への道 その2 FP3級への道 その3 リスクマネジメント 火災保険 補償の範囲 損害 住宅火災保険 住宅総合保険 火災、落雷、爆発、破裂 風災、雹災、雪災 ◯ ◯ 水害(水災) × ◯ 給排水設備事故による水漏れ × ◯ 盗難 × ◯ 外部からの落下、飛来、衝突 × ◯ 持出家財の損害 × ◯ 地震、噴火、津波 × × 傷害保険 主な傷害保険 普通傷害保険 国内外を問わず、日常生活で起こる傷害を補償する保険 ※病気、細菌性食中毒、自殺、地震、噴火、津波を原因とする傷害は対象外 =\u0026gt; 1つの契約で家族全員が補償される「家族傷害保険」もある 交通事故傷害保険 国内外で起きた交通事故、建物や乗り物の火災などによる傷害を保証する保険 =\u0026gt; 1つの契約で家族全員が補償される「ファミリー交通傷害保険」もある 国内旅行傷害保険 国内旅行中の傷害を補償する保険 ※細菌性食中毒は保証の対象だが、地震などによる傷害は対象外 海外旅行傷害保険 海外旅行中(家を出てから帰宅するまで)の傷害を補償する保険 ※細菌性食中毒、地震、噴火、津波による傷害も補償の対象 参考にした教本 上記内容は以下の教本の内容を参考にしてます 2018-2019年版　みんなが欲しかった！　FPの問題集3級 滝澤ななみ TAC 2018年05月22日 売り上げランキング : 楽天ブックスで購入Amazonで購入 by ヨメレバ"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/24/road-to-fp3-part3/",
title: "FP3級への道 その3",
image: "images/logo/fp_logo.png",
date: "2019-04-24",
body: "FP3級への道 その3 学習中に間違えやすいと思った点を備忘録として残しておく [前回までの記事] FP3級への道 FP3級への道 その2 リスクマネジメント 生命保険と税金 生命保険金を受け取った時の税金 契約や、被保険者、受取人が誰かによって課される税金が異なる [死亡保険金の場合] 契約者 被保険者 受取人 税金 A A B 相続税 A B A 所得税(一時所得) 住民税 A B C 贈与税 [満期保険金の場合] 契約者 被保険者 受取人 税金 A 誰でも A 所得税(一時所得) 住民税 A 誰でも B 贈与税 [非課税となる保険金や給付金] 入院給付金 高度障害保険金 手術給付金 特定疾病保険金 リビングニーズ特約保険金 等 参考にした教本 上記内容は以下の教本の内容を参考にしてます 2018-2019年版　みんなが欲しかった！　FPの問題集3級 滝澤ななみ TAC 2018年05月22日 売り上げランキング : 楽天ブックスで購入Amazonで購入 by ヨメレバ"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/23/when-not-input-parameter-query-execute-full-search-with-access/",
title: "Access でパラメータクエリが未入力の場合は全検索する",
image: "images/logo/access_logo.svg",
date: "2019-04-23",
body: "Access でパラメータクエリが未入力の場合は全検索する 実際のコード パラメータが未入力の際に全ての検索条件を無視して全検索する場合 抽出条件として抽出したいフィールドの「抽出条件」欄に以下を入力する [抽出条件] [パラメータ] Or [パラメータ] Is Null パラメータが未入力の際に関係する抽出条件のみを全検索する場合 パラメータ用のフィールドを追加して「抽出条件」欄に以下を入力する [抽出条件] [抽出対象フィールド] Or Is Null ※一番右側にフィールドを配置しないと意図しないSQLになることもあるため必ずSQLビューで作成されたSQLを確認すること"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/22/road-to-fp3-part2/",
title: "FP3級への道 その2",
image: "images/logo/fp_logo.png",
date: "2019-04-22",
body: "FP3級への道 その2 学習中に間違えやすいと思った点を備忘録として残しておく 前回の記事: FP3級への道 ライフプランニングの手法 ライフプランニングを行う際に利用するツール ライフイベント表 家族の将来のライフイベントと、それに必要な資金の額を時系列にまとめた表 キャッシュフロー表 ライフイベント表と現在の収支状況に基づいて、将来の収支状況と貯蓄残高の予想を まとめた表 個人バランスシート 一定時点における資産と負債のバランスを見るための表 ※[可処分所得] = [年収] - (社会保険料 + 所得税 + 住民税) 資金計画を立てる際の6つの係数 終価係数 現在の金額を複利で運用した場合の、一定期間後の金額を求める場合に用いる係数 例. 100万円を年利3%で運用した場合の7年後の金額はいくらか？ 現価係数 一定期間後に一定金額に達するために必要な原本を求めるのに用いる係数 例. 年利3%で7年後に100万円を用意するためには、元本がいくら必要になるか？ 年金終価係数 毎年一定金額を積み立てた場合の、一定期間後の元利合計を求める場合に用いる係数 例. 年利3%、毎年10万円を7年後の金額はいくらか？ 減債基金係数 一定期間後に一定金額を用意するための、毎年の積立額を計算するための係数 例. 年利3%、７年後に100万円を用意するためには毎年いくら積み立てる必要があるか？ 資本回収係数 現在の一定金額を一定期間で取り崩した場合の、毎年の受取金額を計算するための係数 例. 100万円を年利2%で運用しながら7年噛んで取り崩した場合の毎年の受取金額はいくら？ 年金現価係数 将来の一定期間に渡って、一定額を受け取るために必要な元本を計算するための係数 例. 7年間に渡って、10万円ずつ受け取りたい 年利3%とした場合、必要な元本はいくらか？ 終価係数と年金終価係数の違い 終価係数は、現在の金額を複利で運用した場合の金額を求めるための係数 =\u0026gt; 定期預金のイメージ 年金終価係数は、毎年一定金額を積み立てた場合の一定期間後の元利合計を求めるための係数 =\u0026gt; 積立定期預金のイメージ 減債基金係数と資本回収係数の違い 減債基金係数は毎年の積立額を求めるための係数 資本回収係数は毎年の受取金額を求めるための係数 現価係数はと年金現価係数の違い 現価係数は一定金額に達するために必要な原本を求めるための係数 年金現価係数は一定額を受け取るために必要な元本を求めるための係数 参考にした教本 上記内容は以下の教本の内容を参考にしてます 2018-2019年版　みんなが欲しかった！　FPの問題集3級 滝澤ななみ TAC 2018年05月22日 売り上げランキング : 楽天ブックスで購入Amazonで購入 by ヨメレバ"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/19/road-to-aws-certified-solutions-architect-associate/",
title: "AWS 認定ソリューションアーキテクト - アソシエイトへの道",
image: "images/logo/aws_logo.svg",
date: "2019-04-19",
body: "AWS 認定ソリューションアーキテクト - アソシエイトへの道 試験概要 詳細は、試験ガイド(試験概要 の「試験ガイドのダウンロード」を参照) 受験料 15,000 円 (日本語版/税別) 出題範囲 分野 試験に占める 割合 分野 1: 回復性の高いアーキテクチャを設計する 34% 分野 2: パフォーマンスに優れたアーキテクチャを定義する 24% 分野 3: セキュアなアプリケーションおよびアーキテクチャを規定する 26% 分野 4: コスト最適化アーキテクチャを設計する 10% 分野 5: オペレーショナルエクセレンスを備えたアーキテクチャを定義する 6% 合計 100% 出題範囲詳細 分野 1: 回復性の高いアーキテクチャを設計する 1.1 信頼性と回復性の高いストレージを選択する 1.2 AWS サービスを使用した分離機構を設計する方法を定義する 1.3 多層アーキテクチャソリューションを設計する方法を定義する 1.4 可用性またはフォルトトレラント性 (あるいはその両方) が高いアーキテクチャを設計する方法を定義する 分野 2: パフォーマンスに優れたアーキテクチャを定義する 2.1 パフォーマンスの高いストレージとデータベースを選択する 2.2 キャッシュを使用してパフォーマンスを向上させる 2.3 伸縮性と拡張性を備えたソリューションを設計する 分野 3: セキュアなアプリケーションおよびアーキテクチャを規定する 3.1 アプリケーション層をセキュリティ保護する方法を定義する 3.2 データをセキュリティ保護する方法を定義する 3.3 単一の VPC アプリケーション用のネットワークインフラストラクチャーを定義する 分野 4: コスト最適化アーキテクチャを設計する 4.1 コスト最適化ストレージを設計する方法を定義する 4.2 コスト最適化コンピューティングを設計する方法を定義する 分野 5: オペレーショナルエクセレンスを備えたアーキテクチャを定義する 5.1 オペレーショナルエクセレンスを実現するソリューションの設計特性を選択する 合格ライン 100～1000 点の範囲のスコアでレポートされる 最低合格スコアは 720 点 各分野毎の最低合格ラインはなし 試験対策 教本 徹底攻略AWS認定ソリューションアーキテクトアソシエイト教科書 鳥谷部昭寛/宮〓光平 インプレス 2019年01月16日 売り上げランキング : 楽天ブックスで購入Amazonで購入Kindleで購入 by ヨメレバ 最短突破AWS認定ソリューションアーキテクトアソシエイト合格教本 村主壮悟 技術評論社 2019年02月26日 売り上げランキング : 楽天ブックスで購入Amazonで購入Kindleで購入 by ヨメレバ 合格対策 AWS認定ソリューションアーキテクト - アソシエイト 大塚康徳（日立インフォメーションアカデミー） リックテレコム 2016年08月17日 売り上げランキング : 楽天ブックスで購入Amazonで購入Kindleで購入 by ヨメレバ AWS認定試験対策　AWS ソリューションアーキテクトーアソシエイト 佐々 木拓郎/林 晋一郎 SBクリエイティブ 2019年04月22日 売り上げランキング : 楽天ブックスで購入Amazonで購入Kindleで購入 by ヨメレバ その他 AWS に関するホワイトペーパー 模擬試験 所要時間: 30 分間 受験方法: オンライン 受験料: 2,000 円(税別)"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/18/about-git-command/",
title: "Git コマンドについて",
image: "images/logo/github_logo.png",
date: "2019-04-18",
body: "Git コマンドについて 基本的なコマンドを含めて備忘録として残しておく 実際のコード 基本的な流れ Git 初期化 git init Git 接続先設定 git remote add {Fork 元リモート名} {Fork 元接続先URL} git remote add {Fork 先リモート名} {Fork 先接続先URL} 最新ソース取得 git pull {Fork 元リモート名} {ブランチ名} トピックブランチ作成 git checkout -b topic/#{issue番号}-作業者名 開発 ステージングにあげる git add -A # untracked files を除いてステージングに挙げる場合は以下 git add -u コミットする git commit -m \u0026#34;コメント\u0026#34; プルリクエストを投げる git push {Fork 元リモート名} {ブランチ名} ※修正がある場合はgit addから先を繰り返し その他 ローカルの修正を元に戻す 一部ファイルのみ戻す場合 ※半角空白で区切ることで複数ファイル指定可 git checkout {ファイル1(ファイルパス付)} {ファイル2(ファイルパス付)} 全て元に戻す場合 git checkout . untracked files をまとめて削除(削除対象表示) ※untracked files は変更ではないため以下を行う git clean -n # ディレクトリも含める場合 git clean -dn untracked files をまとめて削除 git clean -f # ディレクトリも含める場合 git clean -df 直前のコミットのコメントを修正 git commit --amend -m \u0026#34;直前のコミットのコメントを修正\u0026#34; コミットをまとめる # 2つ前までのコミットを修正 $ git rebase -i HEAD~~ #=\u0026gt; squash or s に編集 #=\u0026gt; コメントを修正 最新資産へのマージ $ git pull --rebase origin master # コンフリクトを修正 # コンフリクトの修正をマージする $ git add -A $ git rebase --continue #=\u0026gt; ※git commitではないので注意 $ git push -f {リモート名} {ブランチ名} #=\u0026gt; ※強制更新になるため注意 rebase しない場合は以下 例. topic ブランチに master ブランチをマージ $ git checkout master $ git fetch {リモート名} $ git pull {リモート名} master $ git checkout topic $ git merge master # コンフリクトを修正 # コンフリクトの修正をマージする $ git add -A $ git push -f {リモート名} topic #=\u0026gt; ※強制更新になるため注意 git の状態を一つ前に戻す ※ローカルの変更はそのまま git reset --soft HEAD^ git の状態を一つ前に戻す ※ローカルの変更も戻す git reset --hard HEAD^ stash の一覧を表示 git stash list stash 内のファイル一覧を表示 git stash show stash@{N} stash の差分を表示 git diff HEAD stash@{N} # or git stash show -p stash@{N} stash の差分を表示(ファイル指定) git diff HEAD stash@{N} -- app/hoge.rb stash の最新を適用 git stash pop stash N 番目を適用 git stash pop stash@{N} stash を全削除 git stash clear stash の最新を削除 git stash drop stash N 番目を削除 git stash drop stash@{N} stash されたファイルの内、指定したファイルを復元 stash list で表示された stash list 番号およびファイル名を指定して取り出す 例. stash list 番号 0 の app/hoge.rb ファイルを復元する git checkout stash@{0} app/hoge.rb untracked files を復元させる場合は以下 git checkout stash@{0}^3 app/hoge.rb untracked files を含めて退避 git stash save -u \u0026#34;untracked files を含めて退避\u0026#34; Fork 元の任意ブランチを親としてトピックブランチを作成 git checkout -b {new ブランチ名} {Fork 元のリモート名}/{Fork 元のブランチ名} プルリクエストの取り下げ(プルリクエスト出す直前に取り消し) git push --delete {Fork 先リモート名} {ブランチ名} #=\u0026gt; `github` 上の 「Compare \u0026amp; pull request」ボタンが消える プルリクエストの取り下げ(プルリクエスト出した直後に取り消し) git push --delete {Fork 先リモート名} {ブランチ名} #=\u0026gt; `github` 上は「close」扱いになる リモートブランチの削除 git push --delete {Fork 先リモート名} {ブランチ名} github 上の プルリクエストブランチをローカルに持ってくる プルリクエストで push された branch を指定してもってくる $ git fetch {リモート名} # 例. ブランチ sample_branch を持ってくる場合 $ git checkout -b {new ブランチ名} origin/sample_branch もしくは、以下のやり方もある プルリクエストを行うと github 上では、 pr/{連番}/head と pr/{連番}/merge というブランチが作られるためそれを使用する $ git fetch {リモート名} \u0026#39;+refs/pull/*:refs/remotes/pr/*\u0026#39; * [new ref] refs/pull/9/head -\u0026gt; pull/1/head * [new ref] refs/pull/9/merge -\u0026gt; pull/1/merge * [new ref] refs/pull/10/head -\u0026gt; pull/10/head ... (abbrev) # 例. プルリクエスト 10 を持ってくる場合 $ git checkout -b {new ブランチ名} pull/10/head プルリクエスト後に追加でコミットされたものを取得する場合は以下を行う ※コンフリクト修正のために force push している可能性があるため --rebase を指定 # 例. ブランチ sample_branch を持ってくる場合 $ git pull origin sample_branch --rebase master ブランチ以外を削除する git branch | grep -v master | xargs git branch -D master および develop ブランチ以外を削除する git branch | grep -v \u0026#34;master\\|develop\u0026#34; | xargs git branch -D 特定のコミットをマージする git log を実行して merge する対象のコミット番号を控える ※★で囲まれた部分 git cherry-pick {1 で控えたコミット番号} マージコミットを revert する git log を実行して revert する対象のコミット番号を控える 【以下、例】 commit 2c5f38104b1b1896d82b3eca80b9ce39ce1548cd git revert -m 1 {1 で控えたコミット番号} -m の後ろの数字はどちらを正とするかを表している ※main branch を正にする場合は 1 another_branch を正にする場合は 2 を指定 【以下、例】 commit 341058af5e0d673e15fe8a14111e7c759191bd9f (origin/revert_commit, revert_sample) Merge: 5c863c9 9828ee6 ← 5c863c9: 1(revert_sample), 9828ee6: 2(another_branch) git log -p で差戻の内容が正しいことを確認 git push origin revert_sample タグ追加 $ git tag -a {タグ名} -m \u0026#34;{コメント}\u0026#34; $ git tag で確認 $ git show {タグ名} で確認 $ git push origin {タグ名} Author 修正 $ git commit --amend --author=\u0026#34;{ユーザ名}\u0026#34; $ git rebase --continue $ git log --pretty=full すでにプッシュしている場合は -f が必要になる $ git push origin hoge Git ブランチ切り替え時の注意点 git checkout コマンドを使用すると移動元のブランチの修正を引き継いで切り替えを行う 上記のため、git status コマンドで差分として上がらず github に上げた際に不要なソースが混じってしまう可能性があるため注意する 対策としては以下のようにチェックアウト元を指定して新規でブランチを作成する git checkout -b {作成するブランチ名} {チェックアウト元ブランチ名}"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/17/description-rails-helper-with-vuejs-and-rails/",
title: "Vue.js ＋ Rails で RailsHelper と組み合わせた場合の記述方法",
image: "images/logo/vuejs_logo.png",
date: "2019-04-17",
body: "Vue.js ＋ Rails で RailsHelper と組み合わせた場合の記述方法 経緯 Vue.js を Rails のフロントとして使用した場合に RailsHelper と組み合わせると若干記述が複雑になったため備忘録として残しておく 実際のコード(html テンプレートエンジンは slim を使用) 通常 a タグ a.btn.home href=\u0026#34;#{root_path}\u0026#34; @touchStart=\u0026#34;onTouchStartForBtn\u0026#34; @touchEnd=\u0026#34;onTouchEndForBtn\u0026#34; @touchmove=\u0026#34;onTouchMoveForBtn\u0026#34; RailsHelper での a タグ Vue.js の bind を'(シングルコート)で括る = link_to national_rankings_path, class: \u0026#39;btn ranking\u0026#39;, \u0026#39;@touchStart\u0026#39;: \u0026#34;onTouchStartForBtn\u0026#34;, \u0026#39;@touchEnd\u0026#39;: \u0026#34;onTouchEndForBtn\u0026#34;, \u0026#39;@touchmove\u0026#39;: \u0026#34;onTouchMoveForBtn\u0026#34;"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/15/register-public-key-on-github/",
title: "GitHub への公開鍵の登録",
image: "images/logo/github_logo.png",
date: "2019-04-15",
body: "GitHub への公開鍵の登録 毎回、PC をセットアップする際に調べてしまうため備忘録として残しておく 実際のコード Mac 以下のコマンドを GitHub のEメールアドレスに置き換えて実行 $ ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; -f \u0026#34;id_rsa\u0026#34; \u0026gt; Generating public/private rsa key pair. 以下が表示されるのでファイル場所を入力(デフォルトでいい場合は「Enter」押下) \u0026gt; Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter] 以下が表示されるのでパスフレーズを入力(なしでいい場合は「Enter」押下) \u0026gt; Enter passphrase (empty for no passphrase): [Type a passphrase] \u0026gt; Enter same passphrase again: [Type passphrase again] SSH キーを ssh-agent に追加する 4-1. バックグラウンドでssh-agentを起動 $ eval \u0026#34;$(ssh-agent -s)\u0026#34; \u0026gt; Agent pid 59566 ※ macOS Sierra 10.12.2 以降を使用している場合は ~/.ssh/config ファイルを変更して自動的にキーを ssh-agent にロードしパスフレーズをキーチェーンに格納する必要あり Host * AddKeysToAgent yes UseKeychain yes IdentityFile ~/.ssh/id_rsa SSH 秘密鍵を ssh-agent に追加してパスフレーズをキーチェーンに保存する ssh-add --apple-use-keychain ~/.ssh/id_rsa 公開鍵をクリップボードにコピーする pbcopy \u0026lt; ~/.ssh/id_rsa.pub SSH キーを GitHub アカウントに追加する Windows(基本的には Mac と同じ) 以下のコマンドを GitHub のEメールアドレスに置き換えて実行 $ ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; -f \u0026#34;id_rsa\u0026#34; \u0026gt; Generating public/private rsa key pair. 以下が表示されるのでファイル場所を入力(デフォルトでいい場合は「Enter」押下) \u0026gt; Enter a file in which to save the key (/c/Users/you/.ssh/id_rsa):[Press enter] 以下が表示されるのでパスフレーズを入力(なしでいい場合は「Enter」押下) \u0026gt; Enter passphrase (empty for no passphrase): [Type a passphrase] \u0026gt; Enter same passphrase again: [Type passphrase again] 公開鍵をクリップボードにコピーする type ~/.ssh/id_rsa.pub | clip SSH キーを GitHub アカウントに追加する 複数の GitHub アカウントを切り替える場合 使用したい GitHub アカウント毎に SSH 鍵を作成する ~/.ssh/config を編集する ※ない場合は新規作成 Host github.com # メインアカウント HostName github.com User git Port 22 IdentityFile ~/.ssh/id_rsa TCPKeepAlive yes IdentitiesOnly yes Host github.com.sub # サブアカウント HostName github.com User git Port 22 IdentityFile ~/.ssh/id_rsa_sub TCPKeepAlive yes IdentitiesOnly yes GitHub に公開鍵を登録する GitHub にログインして、[Settings] \u0026gt; [SSH keys] \u0026gt; [Add SSH key]で作成した公開鍵を登録する 以下のコマンドを実行して設定が上手くいっていることを確認する ssh -T git@github.com ssh -T git@github.com.sub # Hi {yourname}! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access."
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/12/show-hide-modal-call-process-with-vuejs/",
title: "Vue.js でモーダルが表示/非表示された際に呼ばれる処理の実装",
image: "images/logo/vuejs_logo.png",
date: "2019-04-12",
body: "Vue.js でモーダルが表示/非表示された際に呼ばれる処理の実装 実際のコード HTML側 transition を指定 \u0026lt;template\u0026gt; \u0026lt;transition name=\u0026#34;app-modal\u0026#34; v-on:after-enter=\u0026#34;afterEnter\u0026#34; v-on:leave=\u0026#34;leave\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;overlay\u0026#34; v-on:click=\u0026#34;clickEvent\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34; v-on:click=\u0026#34;stopEvent\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;clickEvent\u0026#34;\u0026gt;close\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/transition\u0026gt; \u0026lt;/template\u0026gt; JavaScript側 以下のイベントがフックされるようになる Vue.transition(\u0026#39;expand\u0026#39;, { beforeEnter: function (el) { el.textContent = \u0026#39;beforeEnter\u0026#39; }, enter: function (el) { el.textContent = \u0026#39;enter\u0026#39; }, afterEnter: function (el) { el.textContent = \u0026#39;afterEnter\u0026#39; }, enterCancelled: function (el) { // 取り消しハンドル }, beforeLeave: function (el) { el.textContent = \u0026#39;beforeLeave\u0026#39; }, leave: function (el) { el.textContent = \u0026#39;leave\u0026#39; }, afterLeave: function (el) { el.textContent = \u0026#39;afterLeave\u0026#39; }, leaveCancelled: function (el) { // 取消しハンドル } }) 実際のソースおよび実行結果"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/11/resize-when-uploading-for-carrierwave-with-rails/",
title: "Ruby on Rails の Gem CarrierWave でアップロードする際に画像をリサイズする",
image: "images/logo/rails_logo.svg",
date: "2019-04-11",
body: "Ruby on Rails の Gem CarrierWave でアップロードする際に画像をリサイズする Carrier Wave について ファイルアップロード機能を提供する Gem github 実際のコード 尚、アスペクト比固定で width および height のみ指定する場合は nil を指定する heightのみ指定 class MyUploader \u0026lt; CarrierWave::Uploader::Base include CarrierWave::MiniMagick process resize_to_limit: [1200, nil] end widthのみ指定 class MyUploader \u0026lt; CarrierWave::Uploader::Base include CarrierWave::MiniMagick process resize_to_limit: [1200, nil] end resize_to_fit と resize_to_limit の違いについて resize_to_fit 画像が指定したサイズ未満の時 =\u0026gt; アスペクト比を維持しながら指定したサイズまで拡大する resize_to_limit 画像が指定したサイズ未満の時 =\u0026gt; なにもしない"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/09/set-image-before-gretel-with-rails/",
title: "Ruby on Rails の Gem Gretel で項目の前に画像を置く",
image: "images/logo/rails_logo.svg",
date: "2019-04-09",
body: "Ruby on Rails の Gem Gretel で項目の前に画像を置く Gretel について パンくずリストを表示する Gem github 実際のコード # articles#index crumb :articles do |article| icon = article.flg ? image_tag(\u0026#34;表示したい画像\u0026#34;) : \u0026#34;\u0026#34; link icon + {表示文字}, {URL} parent :parent_articles, article.category end"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/04/07/build-to-rails2-and-ruby1-with-windows10/",
title: "Windows10 に Ruby1.8.7 ＋ Rails2.3.18 を構築する",
image: "images/logo/rails_logo.svg",
date: "2019-04-07",
body: "Windows10 に Ruby1.8.7 ＋ Rails2.3.18 を構築する 経緯 仕事で必要となり表題の環境を準備することになった 苦労したためその際の手順およびハマった点等を備忘録として残しておく 構築環境 ruby: ruby 1.8.7 rails: rails 2.3.18 手順 Ruby Installer で Ruby(1.8.7 p-374) および DevKit(DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe) をダウンロードする Ruby をインストールする(オプションで環境変数パスへの登録を有効にする) DevKit を展開する(自己解凍形式の圧縮ファイルなので、実行して適当なところに展開する) 3-1. コマンドプロンプトで展開した場所に移動し以下のコマンドを入力する ruby dk.rb init ruby dk.rb install rubygems-update のバージョンをダウングレードする 4-1. 以下のコマンドを入力する gem update --system 1.3.7 ※以下のエラーが起きる場合はこのサイトを参考に手動で rubygems-update をダウングレードする $ gem update --system ERROR: While executing gem ... (Gem::RemoteFetcher::FetchError) SSL_connect returned=1 errno=0 state=SSLv2/v3 read server hello A: tlsv1 alert protocol version (https://rubygems.org/latest_specs.4.8.gz) 動作確認用のフォルダを作成 以下の gem をインストールする 6-1. このサイトで1.8.7に対応しているバージョンを調べてバージョン指定でインストールする gem install rake -v 0.8.7 gem install rails -v 2.3.18 gem install rdoc -v 2.4.2 ※rake を先にインストールしないと Ruby のバージョンが古い旨のエラーが発生するため先インストールする 動作確認用の Rails プロジェクトを作成する rails sample-rails cd sample-rails ruby script/generate scaffold user name:string age:integer db のマイグレートを行う 8-1. デフォルトの sqlite3 用の Gem をインストールする gem install sqlite3 -v 1.3.3 8-2. DLL ファイルをダウンロードする sqlitedll-3_7_3.zip をダウンロードする ※最新のやつだとエラーになるため古いやつをダウンロードすること ダウンロードしたやつを解凍して sqlite3.dll を Ruby のインストールフォルダ/bin(例. C:\\Ruby187\\bin)にコピーする 8-3. 以下のコマンドを入力して db のマイグレートを行う rake db:create rake db:migrate サーバを起動する ruby script/server サーバ(http://localhost:3000/users) にアクセスして動作確認を行う"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/03/28/manage-task-with-slack-and-todoist-and-integromat-2/",
title: "Slack ＋ Todoist ＋ Integromat でタスク管理 その２",
image: "images/logo/slack_logo.svg",
date: "2019-03-28",
body: "Slack ＋ Todoist ＋ Integromat でタスク管理 その２ 前回の残りTODO operation を使いすぎなためAPIの戻り値を配列化してメッセージを構築するようにする 手順 前回構築した API と Slack の処理の間に以下の処理を追加する 「スパナ」アイコンを押下後「JSON」を選択して以下を指定 「Parse JSON」 「Data structure」 「Add data structure」 「Specification」 「Generate」を押下して API の戻り値を貼り付けて生成 「JSON string」 「Data」を指定 「スパナ」アイコンを押下後「Flow Control」を選択して以下を指定 「Array aggregator」 「Source Module」 手順１ で作成したJSON 「Target structure type」 「Custom」を指定 「Aggregated fields」 必要な項目を指定 前回作成した slack の Text を以下のように修正 map() で 「content」の内容を配列で取得後 join() で改行および空白を追加する ※「\\n」では改行しないため「newline」を使用する :white_medium_square:{{nbsp}}{{join(map(33.array; \u0026#34;content\u0026#34;); newline\u0026#34;:white_medium_square:\u0026#34; + nbsp)}}"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/03/25/manage-task-with-slack-and-todoist-and-integromat/",
title: "Slack ＋ Todoist ＋ Integromat でタスク管理 その１",
image: "images/logo/slack_logo.svg",
date: "2019-03-25",
body: "Slack ＋ Todoist ＋ Integromat でタスク管理 その１ したいこと 日々のタスクを管理したいというよりも忘れがちな〇月に契約更新とかの数か月、数年先のタスクを管理したい タスク管理 完了/未完了を切り替え 期日を指定 リマインダー機能 昨日完了したタスク 今日期日のタスク 上記以外のタスク 今回使用するツール タスク管理 シンプルで管理しやすい todoist を使用 リマインダー機能 slack の channel への通知を使用 google calendar リマインダーが直前になる todoist と連携可能だが「期日指定なし」が連携されない integromat サイトが英語のみ integromat での todoist について integromat から使用できる todoist の 「Search for a task」では以下の項目しか返ってこないため要件を満たせない 足りない項目 サブタスクかどうか? 期限の情報 [OUTPUT] Bundle 1: (Collection) Task ID: タスクID User ID: ユーザID Project ID: プロジェクトID Content: 内容 Deleted: 削除されているかどうか(true/false) Archived: アーカイブされているかどうか(true/false) Completed: 完了されているかどうか(true/false) The ID of the assigned user: アサインされているユーザID Date created: 作成日時 LabelsArray ラベル配列 そのため、todoist api を叩くことで実装する 手順 事前作業 各ツール(todoist, slack, integromat)の会員登録 各ツールの oauth の設定 slack slack api より設定 「App Name」 任意の名称を指定 「Development Slack Workspace」 使用するワークスペースを指定 「OAuth \u0026amp; Permissions」\u0026gt;「Redirect URLs」 https://www.integromat.com/oauth/cb/slack を指定 ※「Client ID」, 「Client Secret」をメモしておく todoist Todoist App Management より設定 「App display name」 任意の名称を指定 「App service URL」 未指定 「OAuth redirect URL」 https://www.integromat.com/oauth/cb/todoist を指定 ※「Client ID」, 「Client Secret」をメモしておく ※今回は使用しない todoist の API トークンのメモ 設定の「API トークン」をメモしておく integromat の設定 「Dashboard」\u0026gt;「Create a new scenario」を選択 「What services do you want to integrate?」と表示されるため「Continue \u0026gt;」を押下 表示された画面中央の「時計」アイコンを押下して以下を指定 [毎日9:00 に実行する] 「Schedule setting」 「Run scenario:」 「Every day」 「Time」 9:00 表示された画面中央の「?」アイコンを押下して「http」を選択して以下を指定 [api を設定] 「make a request」 「URL」 https://beta.todoist.com/API/v8/tasks https://api.todoist.com/rest/v1/tasks を指定 ※2019/09/02 修正 「Method」 GET 「Content type」 JSON（application/json） 「Query String」 rest api を参照 「Headers」 「Name」 Authorization 「Value」 Bearer {事前作業でメモしたAPI トークン} 「Show advanced settings」 チェックを入れる 「+」アイコンを押下後「slack」を選択して以下を指定 「create a message」 「Connection」 「Connection name」 任意の接続名 「Client ID」 事前作業でメモした「Client ID」を指定 「Client secret」 事前作業でメモした「Client secret」を指定 「Where to send the message」 to a selected channel 「Channel」 メッセージを投稿したいチャネルを指定 「Text」 投稿したいメッセージを指定 「Show advanced settings」 チェックを入れる TODO operation を使いすぎなためAPIの戻り値を配列化してメッセージを構築するようにする"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/03/23/add-time-stamp-with-bat-file/",
title: "バッチファイルでタイムスタンプを付与する",
image: "images/logo/bat_file_icon.png",
date: "2019-03-23",
body: "バッチファイルでタイムスタンプを付与する ファイル名などにタイムスタンプを付与したい場合に毎回検索してしまうため備忘録として残しておく 実際のコード 例 2019/03/23 0:07:49.91 に実行した場合 yyyy/mm/dd 表示 @echo off echo %DATE% =\u0026gt; 2019/03/23 yyyy/mm/dd-hh:MM:ss.fff 表示 午前0時～午前9時の間は 0:00:00.00」(頭に半角スペース)になるため0埋め @echo off set timeStamp=%DATE%-%TIME% set timeStamp=%timeStamp: =0% echo %timeStamp% =\u0026gt; 2019/03/23-00:07:49.91 yyyymmddhhMMss 表示 %var:~m,n%は変数varのm文字目からn文字を切り出す(mは0始まり) @echo off set timeStamp=%DATE%-%TIME% set timeStamp=%timeStamp: =0% set formatTimeStamp=%timeStamp:~0,4%%timeStamp:~5,2%%timeStamp:~8,2%%timeStamp:~11,2%%timeStamp:~14,2%%timeStamp:~17,2% echo %formatTimeStamp% =\u0026gt; 20190323000749"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/03/19/config-hosts-file-for-microsoft-edge-developer/",
title: "Microsoft Edge Developer(旧Modern IE)でhostsファイルを設定する方法",
image: "images/logo/microsoft_windows_logo.svg",
date: "2019-03-19",
body: "Microsoft Edge Developer(旧Modern IE)でhostsファイルを設定する方法 経緯 普段 Mac にて開発を行っているが動作端末は Windows であることが多い そのため、表題のツールを使用することがあるがその際に Mac 上の hosts ファイルと同様の設定をしたい場合があり苦労したため備忘録として残しておく Microsoft Edge Developer(旧Modern IE)について ダウンロードは以下から行う ダウンロードページの「Virtual Machines」より「Virtual machine」と「platform」を選択してダウンロードする 手順 hostsファイルの権限変更 Microsoft Edge Developer 上で以下を行う 「C:/Windows/System32/drivers/etc」に hosts ファイルがある そのファイルを右クリック\u0026gt;Properties\u0026gt;Security\u0026gt;Editボタンで、 Users の権限に全部チェックを入れる Mac の hosts ファイルを複製 Mac の hosts ファイルは「/private/etc/hosts」にあるので、それを前述のファイルに中身をコピーする ※hosts ファイルのループバックアドレスは固定のホスト側のIPアドレスに置き換えて記述すること Rails での確認の際の注意点 確認作業を Rails で行う場合には追加で以下の作業を行う IEの場合 サーバの起動の際に以下のコマンドで行う bundle exec rails s -b 0.0.0.0 インターネットオプションのLocal intranetに「localhost:3000」を登録 Edgeの場合 サーバの起動の際に以下のコマンドで行う bundle exec rails s -b 0.0.0.0 インターネットオプションの Local intranet に「localhost:3000」を登録 about:flags を入力し、「Developer Settings」の「allow localhost loopback(this might put your device at risk)」のチェックを外す"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/03/11/road-to-fp3/",
title: "FP3級への道",
image: "images/logo/fp_logo.png",
date: "2019-03-11",
body: "FP3級への道 ここ最近今まで縁のなかった確定申告や高額医療制度のお世話になることがあった 上記のこともあり知識として必要だと感じため、学習しその記録を残しておく 受験する科目 学科 FP 協会・金融財政事情研究会で共通 実技 ※難易度的には FP 協会の「資産設計提案業務」が初心者には易しいらしい FP 協会 資産設計提案業務 金融財政事情研究会 個人資産相談業務 ※今回受験 保険顧客資産相談業務 使用する教材 今回使用する教材は以下 2018-2019年版　みんなが欲しかった！　FPの教科書3級 滝澤ななみ TAC 2018年05月22日 売り上げランキング : 楽天ブックスで購入Amazonで購入 by ヨメレバ 他の人の評価等を確認する限り、これ１冊でもいけそう 必要があれば追加で購入する とりあえず、5月の受験を目指す 2019/03/26 追記 試験用の電卓を購入 CANON HS-1220TUG 実務電卓 12桁楽天市場で購入Amazonで購入by カエレバ こっちと迷ったが現状だとあまり必要なさそうなので安さで選択上位の級で必要になれば購入する シャープ EL-N942-X 実務電卓 12桁楽天市場で購入Amazonで購入by カエレバ 2019/04/15 追記 問題集として追加で以下を購入 ※教本だけだと習熟度がわからないため 2018-2019年版　みんなが欲しかった！　FPの問題集3級 滝澤ななみ TAC 2018年05月22日 売り上げランキング : 楽天ブックスで購入Amazonで購入 by ヨメレバ"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/03/08/attention-use-each-for-jquery-with-cofee-script/",
title: "CofeeScript で JQuery の each を使用する場合の注意点",
image: "images/logo/coffee_script_logo.png",
date: "2019-03-08",
body: "CofeeScript で JQuery の each を使用する場合の注意点 JQueryの取得した要素分繰り返すeachを使用した場合にeachの内部でCoffeeScriptの@を使用するとJQueryのthisとして扱われてしまいReferenceErrorが発生する その場合は以下のように修正する 実際のソース 修正前 processRows: -\u0026gt; $(\u0026#34;#my-table\u0026gt;tr\u0026#34;).each -\u0026gt; id = $(this).attr(\u0026#34;id\u0026#34;) @processRow id 修正後 processRows: -\u0026gt; $(\u0026#34;#my-table\u0026gt;tr\u0026#34;).each (index, element) =\u0026gt; id = $(element).attr(\u0026#34;id\u0026#34;) @processRow id"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/03/07/initial-screen-display-scroll-to-center-specific-elementelement-with-vuejs/",
title: "Vue.js で画面初期表示時に特定の要素をスクロールエリア中央に表示する",
image: "images/logo/vuejs_logo.png",
date: "2019-03-07",
body: "Vue.js で画面初期表示時に特定の要素をスクロールエリア中央に表示する 経緯 web アプリでランキング画面のようにリスト内の自分の行を中心に表示のようなことを行いたい場合があり調査した結果を備忘録として残しておく 実際のソースおよび実行結果 画面初期表示時に id = 1(Taro) のデータをスクロールエリアの中央に表示する created のタイミングで API 等からデータが取得される想定のため変数 users 監視しておいて変わったタイミングで画面中央にスクロール位置を移動させる 例はスクロールエリアの height が固定のパターンであるが可変の場合は画面サイズを使用して計算する"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/03/06/show-ellipsis-multiple-lines-with-css/",
title: "CSS で複数行でも3点リーダーを表示する",
image: "images/logo/html_logo.svg",
date: "2019-03-06",
body: "CSS で複数行でも3点リーダーを表示する 経緯 CSS で3点リーダーを表示したい場合がよくあるが複数行の場合でも同様の対応を行いたい場合があり調査した結果を備忘録として残しておく 実際のソースおよび実行結果"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/03/04/ime-comp-with-vbnet/",
title: "VB.NET でふりがな機能を実装する",
image: "images/logo/vbnet_logo.svg",
date: "2019-03-04",
body: "VB.NET でふりがな機能を実装する 経緯 最近、周りで VB.NET を使っている人が複数人出てきた恐らく2020年にWindows7 サポート終了となるため VB6 =\u0026gt; VB.NET へのコンバージョンの案件が増えていると思われる そのため、以前行った際に苦労したふりがな機能について備忘録として残しておくことにする 実際のコード ふりがな取得機能の実装クラス 以下のふりがなに対応(半角および全角英数はそのまま取得) ひらがな 全角カナ 半角カナ Option Strict Off Option Explicit On Imports System.Runtime.InteropServices Delegate Function fncDelegate(ByVal hWnd As Integer, ByVal uMsg As Integer, ByVal wParam As Integer, ByVal lParam As Integer) As Integer \u0026#39;\u0026#39;\u0026#39; \u0026lt;summary\u0026gt; \u0026#39;\u0026#39;\u0026#39; 変換イベントクラス \u0026#39;\u0026#39;\u0026#39; \u0026lt;/summary\u0026gt; Public Class ConvertedEventArgs Inherits EventArgs \u0026#39;\u0026#39;\u0026#39; \u0026lt;summary\u0026gt; \u0026#39;\u0026#39;\u0026#39; 変換イベントクラスのコンストラクタ \u0026#39;\u0026#39;\u0026#39; \u0026lt;/summary\u0026gt; \u0026#39;\u0026#39;\u0026#39; \u0026lt;param name=\u0026#34;f\u0026#34;\u0026gt;ふりがな文字列\u0026lt;/param\u0026gt; \u0026#39;\u0026#39;\u0026#39; \u0026lt;param name=\u0026#34;r\u0026#34;\u0026gt;変換後文字列\u0026lt;/param\u0026gt; Public Sub New(ByVal f As String, ByVal r As String) Furigana = f Result = r End Sub Public ReadOnly Property Furigana() As String Public ReadOnly Property Result() As String End Class \u0026#39;\u0026#39;\u0026#39; \u0026lt;summary\u0026gt; \u0026#39;\u0026#39;\u0026#39; 自動ふりがな取得クラス \u0026#39;\u0026#39;\u0026#39; \u0026lt;/summary\u0026gt; Public Class Imecomp Private m_TxtSrcControl As Control Private m_TxtDestControl As Control Private WithEvents M_MsgListner As MsgListner Private ReadOnly m_StrConvMode As Integer \u0026#39;\u0026#39;\u0026#39; \u0026lt;summary\u0026gt; \u0026#39;\u0026#39;\u0026#39; ふりがな取得完了通知イベント \u0026#39;\u0026#39;\u0026#39; \u0026#39;\u0026#39;\u0026#39; ふりがな取得が完了したことを通知する \u0026#39;\u0026#39;\u0026#39; \u0026lt;/summary\u0026gt; \u0026#39;\u0026#39;\u0026#39; \u0026lt;param name=\u0026#34;txtSrc\u0026#34;\u0026gt;ふりがな取得対象テキストボックス\u0026lt;/param\u0026gt; \u0026#39;\u0026#39;\u0026#39; \u0026lt;param name=\u0026#34;txtDest\u0026#34;\u0026gt;ふりがな出力対象テキストボックス\u0026lt;/param\u0026gt; \u0026#39;\u0026#39;\u0026#39; \u0026lt;param name=\u0026#34;e\u0026#34;\u0026gt;変換イベントクラス\u0026lt;/param\u0026gt; Public Event Converted(ByVal txtSrc As System.Object, ByVal txtDest As System.Object, ByVal e As ConvertedEventArgs) \u0026#39;\u0026#39;\u0026#39; \u0026lt;summary\u0026gt; \u0026#39;\u0026#39;\u0026#39; メッセージリスナークラス \u0026#39;\u0026#39;\u0026#39; \u0026lt;/summary\u0026gt; Private Class MsgListner Inherits NativeWindow \u0026#39;Windows Message Public Const WM_IME_COMPOSITION As Integer = \u0026amp;H10F Public Const WM_IME_ENDCOMPOSITION As Integer = \u0026amp;H10E Public Const WM_CHAR As Integer = \u0026amp;H102 Public Const WM_KEYDOWN As Integer = \u0026amp;H100 Public Const WM_KEYUP As Integer = \u0026amp;H101 \u0026#39;IME APIs Declare Function ImmGetCompositionString Lib \u0026#34;imm32.dll\u0026#34; Alias \u0026#34;ImmGetCompositionStringA\u0026#34; (ByVal hIMC As Integer, ByVal dw As Integer, ByRef lpv As Byte, ByVal dw2 As Integer) As Integer Private Const GCS_COMPREADSTR As Integer = \u0026amp;H1 Private Const GCS_COMPSTR As Integer = \u0026amp;H8 Private Const GCS_RESULTREADSTR As Integer = \u0026amp;H200 Private Const GCS_RESULTSTR As Integer = \u0026amp;H800 Declare Function ImmGetOpenStatus Lib \u0026#34;imm32.dll\u0026#34; (ByVal hIMC As Integer) As Integer Declare Function ImmSetOpenStatus Lib \u0026#34;imm32.dll\u0026#34; (ByVal hIMC As Integer, ByVal fOpen As Boolean) As Integer Declare Function ImmGetContext Lib \u0026#34;imm32.dll\u0026#34; (ByVal hWnd As Integer) As Integer Declare Function ImmReleaseContext Lib \u0026#34;imm32.dll\u0026#34; (ByVal hWnd As Integer, ByVal hIMC As Integer) As Integer \u0026#39;Subclass APIs Declare Function SetWindowLong Lib \u0026#34;user32\u0026#34; Alias \u0026#34;SetWindowLongA\u0026#34; (ByVal hWnd As Integer, ByVal nIndex As Integer, \u0026lt;MarshalAs(UnmanagedType.FunctionPtr)\u0026gt; ByVal dwNewLong As fncDelegate) As Integer Declare Function SetWindowLong Lib \u0026#34;user32\u0026#34; Alias \u0026#34;SetWindowLongA\u0026#34; (ByVal hWnd As Integer, ByVal nIndex As Integer, ByVal dwNewLong As Integer) As Integer Private Const GWL_WNDPROC As Integer = (-4) Declare Function CallWindowProc Lib \u0026#34;user32\u0026#34; Alias \u0026#34;CallWindowProcA\u0026#34; (ByVal lpPrevWndFunc As Integer, ByVal hWnd As Integer, ByVal msg As Integer, ByVal wParam As Integer, ByVal lParam As Integer) As Integer Private m_Enabled As Boolean = True Private convMode As Integer = 0 Private pramStrConvMode As Integer = 0 Public Event Converted(ByVal imeCompString As String, ByVal resultConvString As String) Public Property Enabled() As Boolean Get Return m_Enabled End Get Set(ByVal Value As Boolean) m_Enabled = Value End Set End Property \u0026#39;\u0026#39;\u0026#39; \u0026lt;summary\u0026gt; \u0026#39;\u0026#39;\u0026#39; ふりがな取得対象コントロールのウィンドウプロシージャ \u0026#39;\u0026#39;\u0026#39; \u0026lt;/summary\u0026gt; \u0026#39;\u0026#39;\u0026#39; \u0026lt;param name=\u0026#34;m\u0026#34;\u0026gt;Windows メッセージ\u0026lt;/param\u0026gt; Protected Overrides Sub WndProc(ByRef m As System.Windows.Forms.Message) Dim hIMC As Integer Dim intLength As Integer If m_Enabled Then Select Case m.Msg Case WM_IME_COMPOSITION Dim bytBuff() As Byte Dim strResult As String = \u0026#34;\u0026#34; Dim strFurigana As String = \u0026#34;\u0026#34; hIMC = ImmGetContext(Me.Handle.ToInt32) \u0026#39;変換後文字列の取得 intLength = ImmGetCompositionString(hIMC, GCS_RESULTSTR, 0, 0) If intLength \u0026gt; 0 Then ReDim bytBuff(intLength - 1) ImmGetCompositionString(hIMC, GCS_RESULTSTR, bytBuff(0), intLength) strResult = System.Text.Encoding.Default.GetString(bytBuff) End If \u0026#39;ふりがな文字列 intLength = ImmGetCompositionString(hIMC, GCS_RESULTREADSTR, 0, 0) If intLength \u0026gt; 0 Then ReDim bytBuff(intLength - 1) ImmGetCompositionString(hIMC, GCS_RESULTREADSTR, bytBuff(0), intLength) strFurigana = System.Text.Encoding.Default.GetString(bytBuff) convMode = IIf(pramStrConvMode = 0, vbNarrow, pramStrConvMode) \u0026#39;追加する文字種の判断 If ChrIsNarrow(StrConv(strResult, VbStrConv.Narrow)) Then strFurigana = strResult End If \u0026#39;テキストを追加 Select Case convMode Case VbStrConv.Narrow strFurigana = StrConv(strFurigana, VbStrConv.Narrow) Case VbStrConv.Katakana strFurigana = StrConv(strFurigana, VbStrConv.Wide) Case Else strFurigana = StrConv(StrConv(strFurigana, VbStrConv.Wide), convMode) End Select \u0026#39;イベント起動 RaiseEvent Converted(strFurigana, strResult) End If ImmReleaseContext(Me.Handle.ToInt32, hIMC) Case WM_CHAR \u0026#39;半角英数字 hIMC = ImmGetContext(Me.Handle.ToInt32) If ImmGetOpenStatus(hIMC) = 0 Then If m.WParam.ToInt32 \u0026gt;= 32 Then \u0026#39;イベント起動 RaiseEvent Converted(Chr(m.WParam.ToInt32), Chr(m.WParam.ToInt32)) End If End If ImmReleaseContext(Me.Handle.ToInt32, hIMC) End Select End If MyBase.WndProc(m) End Sub \u0026#39;\u0026#39;\u0026#39; \u0026lt;summary\u0026gt; \u0026#39;\u0026#39;\u0026#39; メッセージリスナークラスのコンストラクタ \u0026#39;\u0026#39;\u0026#39; \u0026lt;/summary\u0026gt; \u0026#39;\u0026#39;\u0026#39; \u0026lt;param name=\u0026#34;target\u0026#34;\u0026gt;入力文字\u0026lt;/param\u0026gt; \u0026#39;\u0026#39;\u0026#39; \u0026lt;param name=\u0026#34;strConvMode\u0026#34;\u0026gt;文字変換モード\u0026lt;/param\u0026gt; Public Sub New(ByVal target As IntPtr, ByRef strConvMode As Integer) pramStrConvMode = strConvMode AssignHandle(target) End Sub Protected Overrides Sub Finalize() ReleaseHandle() MyBase.Finalize() End Sub \u0026#39;\u0026#39;\u0026#39; \u0026lt;summary\u0026gt; \u0026#39;\u0026#39;\u0026#39; 半角文字かどうかを判定して返す \u0026#39;\u0026#39;\u0026#39; \u0026lt;/summary\u0026gt; \u0026#39;\u0026#39;\u0026#39; \u0026lt;param name=\u0026#34;target\u0026#34;\u0026gt;ふりがな取得対象テキストボックス\u0026lt;/param\u0026gt; \u0026#39;\u0026#39;\u0026#39; \u0026lt;returns\u0026gt;true:半角文字/false:半角文字以外\u0026lt;/returns\u0026gt; Public Function ChrIsNarrow(ByRef target As String) As Boolean Dim nPt As Integer Dim NowPt As Integer Dim NowCode As Integer Dim fNarrow As Boolean fNarrow = True nPt = Len(target) For NowPt = 1 To nPt NowCode = Asc(Mid(target, NowPt, 1)) If NowCode \u0026lt; 0 Or NowCode \u0026gt; 255 Then fNarrow = False Exit For End If Next NowPt ChrIsNarrow = fNarrow End Function End Class \u0026#39;\u0026#39;\u0026#39; \u0026lt;summary\u0026gt; \u0026#39;\u0026#39;\u0026#39; 自動ふりがな取得クラスのコンストラクタ \u0026#39;\u0026#39;\u0026#39; \u0026lt;/summary\u0026gt; \u0026#39;\u0026#39;\u0026#39; \u0026lt;param name=\u0026#34;txtSrc\u0026#34;\u0026gt;ふりがな取得対象テキストボックス\u0026lt;/param\u0026gt; \u0026#39;\u0026#39;\u0026#39; \u0026lt;param name=\u0026#34;txtDest\u0026#34;\u0026gt;ふりがな出力対象テキストボックス\u0026lt;/param\u0026gt; \u0026#39;\u0026#39;\u0026#39; \u0026lt;param name=\u0026#34;strConvMode\u0026#34;\u0026gt;ふりがなの種類\u0026lt;/param\u0026gt; Public Sub New(ByVal txtSrc As Control, txtDest As Control, strConvMode As Integer) M_MsgListner = New MsgListner(txtSrc.Handle, strConvMode) m_TxtSrcControl = txtSrc m_TxtDestControl = txtDest End Sub Public ReadOnly Property TxtSrcControl() As Control Get Return m_TxtSrcControl End Get End Property Public ReadOnly Property TxtDestControl() As Control Get Return m_TxtDestControl End Get End Property Public Property Enabled() As Boolean Get Return M_MsgListner.Enabled End Get Set(ByVal Value As Boolean) M_MsgListner.Enabled = Value End Set End Property Private Sub M_MsgListner_Converted(ByVal imeCompString As String, ByVal resultConvString As String) Handles M_MsgListner.Converted RaiseEvent Converted(Me.TxtSrcControl, Me.TxtDestControl, New ConvertedEventArgs(imeCompString, resultConvString)) End Sub End Class ふりがな取得機能テスト用フォーム 初期処理時にふりがな種別を指定する Imports Microsoft.VisualBasic Public Class Form1 Private WithEvents ImeComp As Imecomp \u0026#39;ふりがな取得イベント Private Sub Frm1_Load(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles MyBase.Load ImeComp = New Imecomp(Me.TextBox1, Me.TextBox2, VbStrConv.Hiragana) \u0026#39;ふりがなの種類（ひらがな） \u0026#39;imeComp = New Imecomp(Me.TextBox1, Me.TextBox3, VbStrConv.Katakana) \u0026#39;ふりがなの種類（全角カナ） \u0026#39;ImeComp = New Imecomp(Me.TextBox1, Me.TextBox4, VbStrConv.Narrow) \u0026#39;ふりがなの種類（半角カナ） End Sub Private Sub ImeComp_Converted(ByVal txtSrc As Object, ByVal txtDest As Object, ByVal e As ConvertedEventArgs) Handles ImeComp.Converted txtDest.Text \u0026amp;= e.Furigana If Len(txtDest.Text) \u0026gt; txtDest.MaxLength Then txtDest.Text = Strings.Left(txtDest.Text, txtDest.MaxLength) End If End Sub Private Sub TextBox1_TextChanged(sender As Object, e As EventArgs) Handles TextBox1.TextChanged If TextBox1.Text = \u0026#34;\u0026#34; Then TextBox2.Text = \u0026#34;\u0026#34; TextBox3.Text = \u0026#34;\u0026#34; TextBox4.Text = \u0026#34;\u0026#34; End If End Sub End Class 実行結果イメージ"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/02/28/unread-chatwork-notice-with-rambox/",
title: "Rambox で ChatWork の未読メッセージを通知する",
image: "images/logo/rambox_logo.png",
date: "2019-02-28",
body: "Rambox で ChatWork の未読メッセージを通知する 確認環境 Windows10 Rambox: 0.6.3 経緯 普段、 仕事で Chatwork や Slack を使用しているが別々のアプリを切り替えるのが手間だったためまとめて管理できるツールがないか調査した 候補 Franz Station Rambox Franz, Station だと ChatWork で PDF ファイルのプレビューを表示した際にダウンロード用のダイアログが表示されるため 「保存」 =\u0026gt; 「PDF を開く」の手間が発生してしまうため Rambox に決定 Rambox の ChatWork の挙動 Rambox で ChatWork をサービスとして追加した場合自分にメンションがついているメッセージの場合は以下のようにバッジと未読数が表示される しかし、自分にメンションがついていないメッセージについてはバッジおよび未読数は表示されないため見逃してしまう 対処方法 Rambox のサービス設定画面でカスタムコードを使用して対応する ※未読数(未読のあるルーム数) アプリ版 ChatWork と同じ挙動 実際のコード [Custom Code] function checkUnread() { const elements = document.querySelectorAll(\u0026#34;.roomListBadges__unreadBadgeText\u0026#34;); updateBadge(elements.length); } function updateBadge(e) { e \u0026gt;= 1 ? rambox.setUnreadCount(e) : rambox.clearUnreadCount(); } setInterval(checkUnread, 3000);"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/02/26/detect-loaded-and-start-reading-for-img-with-vuejs/",
title: "Vue.js で画像の読み込みの開始および完了を検知する",
image: "images/logo/vuejs_logo.png",
date: "2019-02-26",
body: "Vue.js で画像の読み込みの開始および完了を検知する 確認環境 Vue.js: v2.6.7 方法 読み込み開始検知 img タグの :src に展開する URL を変数化 ※1 Vue.js 側の watch で1.の変数を監視 ※2 読み込み完了検知 img タグに以下のイベントを追加 v-on:load=\u0026quot;メソッド名\u0026quot; ※3 Vue.js 側に1.で指定したメソッドを定義 ※4 実際のソース \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;画像の読み込みの開始および完了を検知する方法\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;url\u0026#34; v-on:load=\u0026#34;load\u0026#34; /\u0026gt; \u0026lt;!-- ※3 --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { url: \u0026#34;https://raw.githubusercontent.com/vuejs/art/master/logo.png\u0026#34; // ※1 }, methods: { // ※4 load: function() { console.log(\u0026#39;loaded\u0026#39;); }, } }); // ※2 app.$watch(\u0026#39;url\u0026#39;, function(val, oldVal) { console.log(val); }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 実行結果"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/02/25/order-by-prefer-yourself-with-rails/",
title: "Rails の order by で自分を優先的に取得する(MySql 限定)",
image: "images/logo/rails_logo.svg",
date: "2019-02-25",
body: "Rails の order by で自分を優先的に取得する(MySql 限定) 確認環境 ruby: ruby 2.5.3 rails: rails 5.2.2 方法 Mysqlの FIELD 関数を使用する※FIELD 関数の結果で ORDER BY する 例. レコードを order 昇順, user_id 昇順で並び替える場合 ※同じ順位の場合は自分を優先 order(:order, [\u0026#34;field(user_id , #{current_user.id}) desc\u0026#34;], :user_id) ※ ポイントとしては第２ソートキーの前に ORDER BY FIELD を使用すること また、ORDER BY FIELD で指定した分に対して desc を指定すること ※ desc を指定しないと自分以外が優先的に並び替えられてしまう)"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/02/21/set-self-association-with-rails/",
title: "Rails で階層構造になっているテーブルに自分自身への関連を設定する",
image: "images/logo/rails_logo.svg",
date: "2019-02-21",
body: "Rails で階層構造になっているテーブルに自分自身への関連を設定する テーブル構成例 [Nodesテーブル] 最上位のノード以外は親ノードを持っている id name parent_id 1 parrent_node null 2 child_node_1 1 3 child_node_2 1 4 child_node_1_1 2 5 child_node_1_2 2 6 child_node_2_1 3 7 child_node_2_2 3 確認環境 ruby: ruby 2.5.3 rails: rails 5.2.2 実際のコード class Node \u0026lt; ApplicationRecord has_many :children, class_name: \u0026#34;Node\u0026#34;, foreign_key: \u0026#34;parrent_id\u0026#34; belongs_to :parrent, class_name: \u0026#34;Node\u0026#34;, optional: true # rails5 から default が require になっているため　`optional: true` を指定しないと `nil` での保存が不可 end class CreateNodes \u0026lt; ActiveRecord::Migration[5.2] def change create_table :nodes do |t| t.string :name t.references :parrent t.timestamps end end end 実行例 テーブル構成例のデータが格納済の状態 # 最上位ノードに紐付く子ノードのレコードを取得 parrent_node = Node.first parrent_node.children #=\u0026gt; Node Load (0.8ms) SELECT `nodes`.* FROM `nodes` WHERE `nodes`.`parrent_id` = 1 LIMIT 11 #=\u0026gt; #\u0026lt;ActiveRecord::Associations::CollectionProxy [#\u0026lt;Node id: 2, name: \u0026#34;child_node_1\u0026#34;, parrent_id: 1, created_at: \u0026#34;2019-02-21 09:05:38\u0026#34;, updated_at: \u0026#34;2019-02-21 09:05:38\u0026#34;\u0026gt;, #\u0026lt;Node id: 3, name: \u0026#34;child_node_2\u0026#34;, parrent_id: 1, created_at: \u0026#34;2019-02-21 09:05:38\u0026#34;, updated_at: \u0026#34;2019-02-21 09:05:38\u0026#34;\u0026gt;]\u0026gt; # 子ノードに紐付く親ノードのレコードを取得 child_node = Node.find(2) child_node.parrent #=\u0026gt; Node Load (0.5ms) SELECT `nodes`.* FROM `nodes` WHERE `nodes`.`id` = 1 LIMIT 1 #=\u0026gt; #\u0026lt;Node id: 1, name: \u0026#34;parrent_node\u0026#34;, parrent_id: nil, created_at: \u0026#34;2019-02-21 09:05:37\u0026#34;, updated_at: \u0026#34;2019-02-21 09:05:37\u0026#34;\u0026gt; # 最上位ノードに紐付く親ノードのレコードを取得 parrent_node = Node.first parrent_node.parrent #=\u0026gt; nil"
},
{
url: "https://kkawazoe.github.io/amp/blog/2019/02/20/markdown-pdf-page-break/",
title: "Visual Studio Code で Markdown PDF を使用してPDF出力する際に任意の場所で改行させる",
image: "images/logo/vscode_logo.png",
date: "2019-02-20",
body: "Visual Studio Code で Markdown PDF を使用してPDF出力する際に任意の場所で改行させる 経緯 普段、 VS Code を使用しておりちょっとしたメモや資料は Markdown を使用して作成している 資料を共有をする場合に拡張機能である Markdown PDF を使用しているが、出力後のPDFで改ページが微妙な場所でされてしまったため任意の場所で改ページできないか調査した 情報元 Markdown PDF の「Page Break」の項目に記載あり 実際のコード # h1 ## h2 ### h3 \u0026lt;!-- 改行させたい位置 --\u0026gt; \u0026lt;div class=\u0026#34;page\u0026#34;/\u0026gt; # h1 ## h2 ### h3"
},
{
url: "https://kkawazoe.github.io/amp/blog/2014/06/22/get-value-from-initialize-file/",
title: "Windows 環境でバッチファイルからiniファイルを読込んで値を取得する",
image: "images/logo/bat_file_icon.png",
date: "2014-06-22",
body: "Windows 環境でバッチファイルからiniファイルを読込んで値を取得する 対応方法 バッチファイルから ini ファイルを読込む場合 VBS を使用することで実現する 具体的には、バッチファイルから VBS を呼び出して ini ファイルより値を取得して VBS から戻り値を受け取り、実現する 取得する ini ファイルの中身 \u0026lt;設定値\u0026gt;*****************************************************\u0026#39;\u0026lt;コメント\u0026gt;####################################### [Path] WorkPath=C:/src/wk \u0026#39;Work Folder Path 実際のコード @echo off set iniFileName=sample.ini for /f \u0026#34;usebackq tokens=* delims=\u0026#34; %%A in (`call cscript //Nologo getProfileString.vbs \u0026#34;%iniFileName%\u0026#34; Path WorkPath`) do set ret=%%A echo \u0026#34;%ret%\u0026#34; pause exit Option Explicit rem /***************************************************************** rem * getProfileString.vbs iniFileName, sectionName, entryName rem * rem * 引数 rem * iniFileName : 設定ファイル名(フルパス) rem * sectionName : セクション名 rem * entryName : エントリー名 rem * 動作 rem * 引数に指定された設定ファイルより指定した rem * 「セクション」,「エントリー」に対応する設定値を返す rem * 先頭がカンマの場合はコメント行として扱う rem * 行の途中でカンマがある場合は直前までの文字列(右空白除去)を rem * 設定値として扱う rem * 戻り値 rem * 設定値(見つからなかった場合およびエラーの場合は空を返す) rem *****************************************************************/ Dim ret Dim fs Dim readLineObj Dim searchFlg Dim buffer rem ファイルシステムアクセス用 Set fs = CreateObject( \u0026quot;Scripting.FileSystemObject\u0026quot; ) ret = \u0026quot;\u0026quot; rem ファイルを開く on error resume next Set readLineObj = fs.OpenTextFile( Wscript.Arguments(0), 1 ) if Err.Number \u0026lt;\u0026gt; 0 then rem ファイルアクセスエラーの場合は終了 Wscript.Echo ret Wscript.Quit end if on error goto 0 rem 検索処理用のフラグ searchFlg = false rem 読込みループ Do While not readLineObj.AtEndOfStream rem 行単位の読込み buffer = readLineObj.ReadLine rem 空の行以外の場合 if Trim(buffer) \u0026lt;\u0026gt; \u0026quot;\u0026quot; then rem 対象セクションの場合 if Ucase(Trim(buffer)) = \u0026quot;[\u0026quot; \u0026amp; Ucase( Wscript.Arguments(1) ) \u0026amp; \u0026quot;]\u0026quot; then searchFlg = true else rem 設定値を取得 ret = GetProfileString(buffer, Wscript.Arguments(2), searchFlg) rem エントリー名が見つからなかった場合 if searchFlg And IsEmpty(ret) then ret = \u0026quot;\u0026quot; end if rem 設定値を取得できた場合はループを抜ける if searchFlg And (Len(ret) \u0026lt;\u0026gt; 0) then Exit Do end if end if Loop readLineObj.Close Wscript.Echo ret Wscript.Quit rem /***************************************************************** rem * 引数に指定された設定ファイルより指定した rem * 「セクション」,「エントリー」に対応する設定値を返す rem * 先頭がカンマの場合はコメント行として扱う rem * 行の途中でカンマがある場合は直前までの文字列(右空白除去)を rem * 設定値として扱う rem * rem * 引数 rem * buffer : 設定ファイルより読込んだ行 rem * sectionName : セクション名 rem * searchFlg : 検索用フラグ rem * 戻り値 rem * 設定値(見つからなかった場合およびエラーの場合は空を返す) rem *****************************************************************/ Function GetProfileString ( buffer, sectionName, searchFlg ) Dim ret Dim entries Dim entry ret = \u0026quot;\u0026quot; if searchFlg then rem 次のセクションの場合 if Left(Trim(buffer) ,1) = \u0026quot;[\u0026quot; then rem ループを抜ける GetProfileString = Empty Exit Function end if entries = Split(buffer, \u0026quot;'\u0026quot;) entry = Split(entries(0), \u0026quot;=\u0026quot;) rem エントリーの場合 if (Ubound(entry) = 1) then rem 検索対象のエントリーの場合 if Ucase(Trim(entry(0))) = Ucase(sectionName) then ret = RTrim(entry(1)) End if end if end if GetProfileString = ret End Function"
},
{
url: "https://kkawazoe.github.io/amp/blog/2014/02/09/switch-processing-by-message-box/",
title: "Windows 環境でバッチファイルからメッセージボックスを表示して押下されたボタンによって処理を切り替える",
image: "images/logo/bat_file_icon.png",
date: "2014-02-09",
body: "Windows 環境でバッチファイルからメッセージボックスを表示して押下されたボタンによって処理を切り替える 対応方法 バッチファイルからメッセージボックスを表示する場合バッチファイル単体では実現不可のため VBS を使用して実現する ※具体的には、バッチファイルから VBS を呼び出してメッセージボックスを表示し、 VBS から戻り値を受け取り、処理を切り替える 実際のコード @echo off rem メッセージボックスの表示 set msg=\u0026#34;メッセージボックスのテスト [\\n] で改行します\u0026#34; set title=\u0026#34;メッセージボックステスト\u0026#34; for /f \u0026#34;usebackq tokens=* delims=\u0026#34; %%A in (`call cscript //Nologo msgbox.vbs %msg%\u0026#34;%title%\u0026#34;`) do set ret=%%A echo %ret% pause exit Option Explicit rem /******************************************************* rem * msgbox.vbs msg [,title] rem * rem * 引数 rem * msg :表示するメッセージ rem * title :メッセージボックスのタイトル rem * 動作 rem * メッセージボックスを表示し、クリックされたボタンに rem * 対応する数値を返す rem * msg中の 「\\n」という文字列は改行に変換する rem * 戻り値 rem * 0:[はい]/1:[いいえ] rem ********************************************************/ Dim args Dim arg(99) Dim value Dim cnt Dim retBtn Dim ret Dim eLevel rem 引数を変数にセット Set args = WScript.Arguments cnt = 0 For Each value In args arg(cnt) = value cnt = cnt + 1 Next rem 改行文字の置換 arg(0) = RepExAll (arg(0), \u0026quot;\\\\n\u0026quot;, VbCrLf) eLevel = 0 retBtn = MsgBox (arg(0), 36, arg(1)) Select Case retBtn Case 6: ret = 0 Case 7: ret = 1 End Select WScript.Echo ret WScript.Quit (eLevel) rem /******************************************************* rem * 文字列を正規表現文字列で検索して、一致する文字列を rem * すべて置換文字列に置換して返す rem * rem * 引数 rem * str1 :置換対象文字列 rem * reg :正規表現文字列 rem * str2 :置換文字列 rem * 戻り値 rem * 置換後の文字列 rem ********************************************************/ Function RepExAll ( str1, reg, str2 ) Dim regExpression Dim Matchers Set regExpression = New RegExp regExpression.Pattern = reg regExpression.IgnoreCase = True regExpression.Global = True RepExAll = regExpression.Replace(str1, str2) End Function"
},
];