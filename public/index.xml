<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Note To Self ~One Step At A Time~</title>
    <link>https://kkawazoe.github.io/</link>
    <description>Recent content on Note To Self ~One Step At A Time~</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sun, 21 Jul 2019 18:12:58 +0900</lastBuildDate>
    
	<atom:link href="https://kkawazoe.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rails でトークンを扱う方法</title>
      <link>https://kkawazoe.github.io/blog/2019/07/21/how-to-handle-tokens-in-rails/</link>
      <pubDate>Sun, 21 Jul 2019 18:12:58 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/07/21/how-to-handle-tokens-in-rails/</guid>
      <description>Rails でトークンを扱う方法 環境  rails: rails 5.2.3  方法 トークンの認証 トークンの認証については authenticate_with_http_token を使用する
以下が対象
 Authorization: Token XXX Authorization: Bearer XXX  class ApplicationController &amp;lt; ActionController::API # authenticate_with_http_token を使用するために必要 include ActionController::HttpAuthentication::Token::ControllerMethods before_action :authenticate def authenticate authenticate_with_http_token do |token, options| # 認証処理 および レスポンスが必要な場合は記述 end end end  トークンの取得 トークンの取得については token_and_options を使用する
以下が対象
 Authorization: Token XXX Authorization: Bearer XXX  class ApplicationController &amp;lt; ActionController::API # token_and_options を使用するために必要 include ActionController::HttpAuthentication::Token def access_token token_and_options(request)&amp;amp;.</description>
    </item>
    
    <item>
      <title>FP3級への道 その7</title>
      <link>https://kkawazoe.github.io/blog/2019/07/06/road-to-fp3-part7/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/07/06/road-to-fp3-part7/</guid>
      <description>FP3級への道 その7 学習中に間違えやすいと思った点を備忘録として残しておく
[前回までの記事]
 FP3級への道
 FP3級への道 その2 FP3級への道 その3 FP3級への道 その4 FP3級への道 その5 FP3級への道 その6   受験結果 2019年5月 一応　FP 3級合格
勉強時間は一月半程度
後半 2週間は過去2, 3年分の過去問を中心に解いて解説および関連する分野を勉強した
FP に関しては試験受ける・受けないはともかくとして勉強自体はやって良かったと思う
2級以上を受験するかどうかは今のところ不明だがモチベーションが上がれば挑戦したい
【種目別試験結果】ファイナンシャル・プランニング技能検定 公式サイトで確認すると今回の合格率は以下
   等級 学科/実技 試験科目 合格率     3級 学科  42.76％   3級 実技 個人資産相談業務 54.35％    大体例年通りくらいの合格率だったらしい</description>
    </item>
    
    <item>
      <title>github で access token を使用してリポジトリを clone する</title>
      <link>https://kkawazoe.github.io/blog/2019/06/20/clone-repository-use-access-token-with-github/</link>
      <pubDate>Thu, 20 Jun 2019 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/06/20/clone-repository-use-access-token-with-github/</guid>
      <description> github で access token を使用してリポジトリを clone する 経緯 表題の件を行う必要があり対応を行ったため備忘録として残しておく
手順 1. アクセストークンを作成する  GitHub アカウントにログインし，Settings &amp;gt; Developer settings から Personal access tokensを選択する
 Generate new token を押下する
  2. 以下のコマンドを実行してリポジトリを clone する git clone https://{アカウント名}:{アクセストークン}@github.com/{アカウント名}/{リポジトリ名}  3. ローカルの設定を追加する $ git config --local user.name {アカウント名} $ git config --local user.email {アカウントのメールアドレス}  </description>
    </item>
    
    <item>
      <title>electron-builder で Lint および UnitTest が通った場合のみビルドするようにする</title>
      <link>https://kkawazoe.github.io/blog/2019/05/24/pass-lint-and-unit-test-to-build-with-electron-builder/</link>
      <pubDate>Fri, 24 May 2019 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/05/24/pass-lint-and-unit-test-to-build-with-electron-builder/</guid>
      <description>electron-builder で Lint および UnitTest が通った場合のみビルドするようにする 経緯 electron にて ビルドするのに electron-builder を使用してみた その際に最低限 Lint, UnitTest を通ることを担保するようにしたため備忘録として残しておく
構築環境 electron: 5.0.1 electron-builder: 20.39.0  実際のコード package.json に以下の定義がしてある前提 ※以下は electron x angular(Angular Cli で生成)
[package.json]
{ ・・・ &amp;quot;scripts&amp;quot;: { &amp;quot;ng&amp;quot;: &amp;quot;ng&amp;quot;, &amp;quot;start&amp;quot;: &amp;quot;ng build --prod &amp;amp;&amp;amp; electron .&amp;quot;, &amp;quot;build&amp;quot;: &amp;quot;ng build&amp;quot;, &amp;quot;test&amp;quot;: &amp;quot;jest&amp;quot;, &amp;quot;lint&amp;quot;: &amp;quot;ng lint&amp;quot;, &amp;quot;postinstall&amp;quot;: &amp;quot;electron-builder install-app-deps&amp;quot;, &amp;quot;release&amp;quot;: &amp;quot;ng build --prod &amp;amp;&amp;amp; node build.js&amp;quot;, }, ・・・ }  [build.js]
electron-builder のオプションについては公式を参照</description>
    </item>
    
    <item>
      <title>Angular Cli で作成したプロジェクトに Jest を追加する</title>
      <link>https://kkawazoe.github.io/blog/2019/05/15/add-jest-at-angular-cli/</link>
      <pubDate>Wed, 15 May 2019 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/05/15/add-jest-at-angular-cli/</guid>
      <description>Angular Cli で作成したプロジェクトに Jest を追加する Angular Cli でプロジェクトを作成すると Karma + Jasmine が単体テストとして入るため Jest に変更する手順を備忘録として残しておく
構築環境 Angular CLI: 7.3.9 Node: 10.15.3 OS: darwin x64 Angular: ... Package Version ------------------------------------------------------ @angular-devkit/architect 0.13.9 @angular-devkit/core 7.3.9 @angular-devkit/schematics 7.3.9 @schematics/angular 7.3.9 @schematics/update 0.13.9 rxjs 6.3.3 typescript 3.2.4  手順 1. プロジェクトを作成 $ ng new JEST-EXAMPLE --style=styl ? Would you like to add Angular routing? Yes  2. 以下のコマンドを実行する $ yarn global add @briebug/jest-schematic $ ng g @briebug/jest-schematic:add $ ng add @briebug/jest-schematic  3.</description>
    </item>
    
    <item>
      <title>FP3級への道 その6</title>
      <link>https://kkawazoe.github.io/blog/2019/04/30/road-to-fp3-part6/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:19 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/30/road-to-fp3-part6/</guid>
      <description>FP3級への道 その6 学習中に間違えやすいと思った点を備忘録として残しておく
[前回までの記事]
 FP3級への道
 FP3級への道 その2 FP3級への道 その3 FP3級への道 その4 FP3級への道 その5  金融資産運用 債権 債権の利回り  直接利回り
投資金額(購入価格)に対する毎年の利息収入の割合
$$ 直接利回り(\%) = \frac{表面利率}{購入価格} \times 100 $$
例えば、表面利率1%の債権を102万円で購入した場合(小数点以下第3位を四捨五入)
$$ \frac{1\%}{102円} \times 100 ≒ 0.98\% $$
 応募者利回り
債権の発行時に購入し、償還まで所有した場合の利回り
$$ 応募者利回り(\%) = \frac{表面利率 + \frac{額面(100円) - 発行価格}{償還期限(年)}}{発行価格} \times 100 $$
例えば、表面利率1%、発行価格98円、償還期限5年の債権を購入した場合(小数点以下第3位を四捨五入)
$$ \frac{1\% + \frac{100円 - 98円}{5年}}{98円} \times 100 ≒ 1.43\% $$
 最終利回り
既に発行されている債権を時価で購入し、償還まで所有した場合の利回り
$$ 最終利回り(\%) = \frac{表面利率 + \frac{額面(100円) - 購入価格}{残存年数(年)}}{購入価格} \times 100 $$</description>
    </item>
    
    <item>
      <title>Excel でテスト用シートを自動生成するツールを作成する</title>
      <link>https://kkawazoe.github.io/blog/2019/04/28/auto_generate_test_sheet_tool_with_excel/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/28/auto_generate_test_sheet_tool_with_excel/</guid>
      <description>Excel でテスト用シートを自動生成するツールを作成する 経緯 結合テストなのでエビデンスを残しておく必要がありテスト項目ごとにシートを分ける必要があった
テスト項目が多い場合手作業で シート作成 =&amp;gt; シート名変更をするのは手間だったため
ツール化をすることにした
使用方法  「パラメータ」シートにて以下を指定する
[設定項目]
 シート数: 作成するシート数 表示倍率: 作成するシートの表示倍率 シート作成後ワークグループ設定: チェックをつけるとシートを作成後にワークグループ(各シートが選択状態)になる  「パラメータ」シートの「実行」ボタンを押下する
  実際のコード Rem Attribute VBA_ModuleType=VBAModule Option VBASupport 1 Sub ExecuteButtonClick() Dim ws As Worksheet Dim wsArray() As String Dim chkFlg As Long &#39;ワークシートの初期化 For Each ws In Worksheets &#39;ワークシート名が&amp;quot;パラメータ&amp;quot;以外の場合 If ws.Name &amp;lt;&amp;gt; &amp;quot;パラメータ&amp;quot; Then Application.DisplayAlerts = False ws.Delete Application.DisplayAlerts = True End If Next ws &#39;チェックボックスの値を取得 chkFlg = Worksheets(&amp;quot;パラメータ&amp;quot;).</description>
    </item>
    
    <item>
      <title>Hugo に数式を挿入する</title>
      <link>https://kkawazoe.github.io/blog/2019/04/27/insert_formula_into_hugo/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/27/insert_formula_into_hugo/</guid>
      <description>Hugo に数式を挿入する 経緯 Hugo で運用しているサイトに数式を埋め込む必要があり
調査した結果を備忘録として残しておく
手順 参考 と同じく Mathjax を使用して実現する
 partials フォルダ配下に以下のファイルを作成する
CDN で提供されている最新の MathJax.js の URL は、cdnjs.com で確認する
[mathjax_support.html]
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; async src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&amp;gt; MathJax.Hub.Config({ tex2jax: { inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]], displayMath: [[&#39;$$&#39;,&#39;$$&#39;]], processEscapes: true, processEnvironments: true, skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;], TeX: { equationNumbers: { autoNumber: &amp;quot;AMS&amp;quot; }, extensions: [&amp;quot;AMSmath.js&amp;quot;, &amp;quot;AMSsymbols.js&amp;quot;] } } }); MathJax.Hub.Queue(function() { // Fix &amp;lt;code&amp;gt; tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown.</description>
    </item>
    
    <item>
      <title>FP3級への道 その5</title>
      <link>https://kkawazoe.github.io/blog/2019/04/26/road-to-fp3-part5/</link>
      <pubDate>Fri, 26 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/26/road-to-fp3-part5/</guid>
      <description>FP3級への道 その5 学習中に間違えやすいと思った点を備忘録として残しておく
[前回までの記事]
 FP3級への道
 FP3級への道 その2 FP3級への道 その3 FP3級への道 その4  金融資産運用 株式 株式投資に用いる指標 $$ PER(倍) = \frac{株価}{一株当たりの純利益(EPS)} $$
※PER が低い銘柄は 割安 、高い銘柄は割高
$$ PBR(倍) = \frac{株価}{一株当たりの純資産(BPS)} $$
※PBR が低い(1倍に近い)銘柄は 割安 、高い銘柄は割高
$$ ROE(\%) = \frac{税引後当期純利益}{自己資本(純資産)} \times 100 $$
$$ 配当利回り(\%) = \frac{一株当たりの配当金}{株価} \times 100 $$
$$ 配当性向(\%) = \frac{配当金総額}{税引後当期純利益} \times 100 $$
$$ 自己資本比率(\%) = \frac{自己資本(純資産)}{総資産(負債 + 純資産)} \times 100 $$
参考にした教本 上記内容は以下の教本の内容を参考にしてます
2018-2019年版　みんなが欲しかった！　FPの問題集3級</description>
    </item>
    
    <item>
      <title>FP3級への道 その4</title>
      <link>https://kkawazoe.github.io/blog/2019/04/25/road-to-fp3-part4/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/25/road-to-fp3-part4/</guid>
      <description>FP3級への道 その4 学習中に間違えやすいと思った点を備忘録として残しておく
[前回までの記事]
 FP3級への道
 FP3級への道 その2 FP3級への道 その3  リスクマネジメント 火災保険 補償の範囲    損害 住宅火災保険 住宅総合保険     火災、落雷、爆発、破裂
風災、雹災、雪災 ◯ ◯   水害(水災) × ◯   給排水設備事故による水漏れ × ◯   盗難 × ◯   外部からの落下、飛来、衝突 × ◯   持出家財の損害 × ◯   地震、噴火、津波 × ×    傷害保険 主な傷害保険  普通傷害保険  国内外を問わず、日常生活で起こる傷害を補償する保険
※病気、細菌性食中毒、自殺、地震、噴火、津波を原因とする傷害は対象外</description>
    </item>
    
    <item>
      <title>FP3級への道 その3</title>
      <link>https://kkawazoe.github.io/blog/2019/04/24/road-to-fp3-part3/</link>
      <pubDate>Wed, 24 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/24/road-to-fp3-part3/</guid>
      <description>FP3級への道 その3 学習中に間違えやすいと思った点を備忘録として残しておく
[前回までの記事]
 FP3級への道
 FP3級への道 その2  リスクマネジメント 生命保険と税金 生命保険金を受け取った時の税金 契約や、被保険者、受取人が誰かによって課される税金が異なる
[死亡保険金の場合]
   契約者 被保険者 受取人 税金     A A B 相続税   A B A 所得税(一時所得)
住民税   A B C 贈与税    [満期保険金の場合]
   契約者 被保険者 受取人 税金     A 誰でも A 所得税(一時所得)
住民税   A 誰でも B 贈与税    [非課税となる保険金や給付金]</description>
    </item>
    
    <item>
      <title>Access でパラメータクエリが未入力の場合は全検索する</title>
      <link>https://kkawazoe.github.io/blog/2019/04/23/when-not-input-parameter-query-execute-full-search-with-access/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/23/when-not-input-parameter-query-execute-full-search-with-access/</guid>
      <description> Access でパラメータクエリが未入力の場合は全検索する方法 実際のコード  パラメータが未入力の際に全ての検索条件を無視して全検索する場合
抽出条件として抽出したいフィールドの「抽出条件」欄に以下を入力する
[抽出条件]
[パラメータ] Or [パラメータ] Is Null  パラメータが未入力の際に関係する抽出条件のみを全検索する場合
パラメータ用のフィールドを追加して「抽出条件」欄に以下を入力する
[抽出条件]
[抽出対象フィールド] Or Is Null  ※一番右側にフィールドを配置しないと意図しないSQLになることもあるため必ずSQLビューで作成されたSQLを確認すること
  </description>
    </item>
    
    <item>
      <title>FP3級への道 その2</title>
      <link>https://kkawazoe.github.io/blog/2019/04/22/road-to-fp3-part2/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/22/road-to-fp3-part2/</guid>
      <description>FP3級への道 その2 学習中に間違えやすいと思った点を備忘録として残しておく
前回の記事: FP3級への道
ライフプランニングの手法 ライフプランニングを行う際に利用するツール  ライフイベント表
家族の将来のライフイベントと、それに必要な資金の額を時系列にまとめた表 キャッシュフロー表
ライフイベント表と現在の収支状況に基づいて、将来の収支状況と貯蓄残高の予想を
まとめた表 個人バランスシート
一定時点における資産と負債のバランスを見るための表
※[可処分所得] = [年収] - (社会保険料 + 所得税 + 住民税)  資金計画を立てる際の6つの係数 終価係数 現在の金額を複利で運用した場合の、一定期間後の金額を求める場合に用いる係数
例. 100万円を年利3%で運用した場合の7年後の金額はいくらか？
現価係数 一定期間後に一定金額に達するために必要な原本を求めるのに用いる係数
例. 年利3%で7年後に100万円を用意するためには、元本がいくら必要になるか？
年金終価係数 毎年一定金額を積み立てた場合の、一定期間後の元利合計を求める場合に用いる係数
例. 年利3%、毎年10万円を7年後の金額はいくらか？
減債基金係数 一定期間後に一定金額を用意するための、毎年の積立額を計算するための係数
例. 年利3%、７年後に100万円を用意するためには毎年いくら積み立てる必要があるか？
資本回収係数 現在の一定金額を一定期間で取り崩した場合の、毎年の受取金額を計算するための係数
例. 100万円を年利2%で運用しながら7年噛んで取り崩した場合の毎年の受取金額はいくら？
年金現価係数 将来の一定期間に渡って、一定額を受け取るために必要な元本を計算するための係数
例. 7年間に渡って、10万円ずつ受け取りたい。
年利3%とした場合、必要な元本はいくらか？
終価係数と年金終価係数の違い 終価係数は、現在の金額を複利で運用した場合の金額を求めるための係数
=&amp;gt; 定期預金のイメージ
年金終価係数は、毎年一定金額を積み立てた場合の一定期間後の元利合計を求めるための係数
=&amp;gt; 積立定期預金のイメージ
減債基金係数と資本回収係数の違い 減債基金係数は毎年の積立額を求めるための係数
資本回収係数は毎年の受取金額を求めるための係数
現価係数はと年金現価係数の違い 現価係数は一定金額に達するために必要な原本を求めるための係数
年金現価係数は一定額を受け取るために必要な元本を求めるための係数
参考にした教本 上記内容は以下の教本の内容を参考にしてます
2018-2019年版　みんなが欲しかった！　FPの問題集3級</description>
    </item>
    
    <item>
      <title>AWS 認定ソリューションアーキテクト - アソシエイトへの道</title>
      <link>https://kkawazoe.github.io/blog/2019/04/19/road_to_aws_certified_solutions_architect_associate/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/19/road_to_aws_certified_solutions_architect_associate/</guid>
      <description>AWS 認定ソリューションアーキテクト - アソシエイトへの道 試験概要 詳細は、試験ガイド(試験概要 の「試験ガイドのダウンロード」を参照)
受験料 15,000 円 (日本語版/税別)
出題範囲    分野 試験に占める 割合     分野 1: 回復性の高いアーキテクチャを設計する 34%   分野 2: パフォーマンスに優れたアーキテクチャを定義する 24%   分野 3: セキュアなアプリケーションおよびアーキテクチャを規定する 26%   分野 4: コスト最適化アーキテクチャを設計する 10%   分野 5: オペレーショナルエクセレンスを備えたアーキテクチャを定義する 6%   合計 100%    出題範囲詳細  分野 1: 回復性の高いアーキテクチャを設計する  1.1 信頼性と回復性の高いストレージを選択する。 1.2 AWS サービスを使用した分離機構を設計する方法を定義する。 1.3 多層アーキテクチャソリューションを設計する方法を定義する。 1.</description>
    </item>
    
    <item>
      <title>Git コマンドについて</title>
      <link>https://kkawazoe.github.io/blog/2019/04/18/about_git_command/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/18/about_git_command/</guid>
      <description>Git コマンドについて 基本的なコマンドを含めて備忘録として残しておく
実際のコード 基本的な流れ  Git初期化
$ git init  Git接続先設定
$ git remote add {Fork 元リモート名} {Fork 元接続先URL} $ git remote add {Fork 先リモート名} {Fork 先接続先URL}  最新ソース取得
$ git pull {Fork 元リモート名} {ブランチ名}  トピックブランチ作成
$ git checkout -b topic/#{issue番号}-作業者名  開発
 ステージングにあげる
$ git add -A  コミットする
$ git commit -m &amp;quot;コメント&amp;quot;  プルリクエストを投げる
$ git push {Fork 元リモート名} {ブランチ名}  ※修正がある場合はgit addから先を繰り返し</description>
    </item>
    
    <item>
      <title>Vue.js &#43; Rails で RailsHelper と組み合わせた場合の記述方法</title>
      <link>https://kkawazoe.github.io/blog/2019/04/17/description_rails_helper_with_vuejs_and_rails/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/17/description_rails_helper_with_vuejs_and_rails/</guid>
      <description> Vue.js + Rails で RailsHelper と組み合わせた場合の記述方法 経緯 Vue.js を Rails のフロントとして使用した場合に RailsHelper と組み合わせると若干記述が複雑になったため備忘録として残しておく
実際のコード(html テンプレートエンジンは slim を使用)  通常 a タグ
a.btn.home href=&amp;quot;#{root_path}&amp;quot; @touchStart=&amp;quot;onTouchStartForBtn&amp;quot; @touchEnd=&amp;quot;onTouchEndForBtn&amp;quot; @touchmove=&amp;quot;onTouchMoveForBtn&amp;quot;  RailsHelper での a タグ
Vue.js の bind を&amp;rsquo;(シングルコート)で括る
= link_to national_rankings_path, class: &#39;btn ranking&#39;, &#39;@touchStart&#39;: &amp;quot;onTouchStartForBtn&amp;quot;, &#39;@touchEnd&#39;: &amp;quot;onTouchEndForBtn&amp;quot;, &#39;@touchmove&#39;: &amp;quot;onTouchMoveForBtn&amp;quot;   </description>
    </item>
    
    <item>
      <title>Github への公開鍵の登録</title>
      <link>https://kkawazoe.github.io/blog/2019/04/15/register-public-key-on-github/</link>
      <pubDate>Mon, 15 Apr 2019 11:51:14 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/15/register-public-key-on-github/</guid>
      <description>Github への公開鍵の登録 毎回、PC をセットアップする際に調べてしまうため備忘録として残しておく
実際のコード Mac  以下のコマンドを GitHub のEメールアドレスに置き換えて実行
$ ssh-keygen -t rsa -b 4096 -C &amp;quot;your_email@example.com&amp;quot; &amp;gt; Generating public/private rsa key pair.  以下が表示されるのでファイル場所を入力(デフォルトでいい場合は「Enter」押下)
&amp;gt; Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]  以下が表示されるのでパスフレーズを入力(なしでいい場合は「Enter」押下)
&amp;gt; Enter passphrase (empty for no passphrase): [Type a passphrase] &amp;gt; Enter same passphrase again: [Type passphrase again]  SSH キーを ssh-agent に追加する
4-1. バックグラウンドでssh-agentを起動
$ eval &amp;quot;$(ssh-agent -s)&amp;quot; &amp;gt; Agent pid 59566  macOS Sierra 10.</description>
    </item>
    
    <item>
      <title>Vue.js でモーダルが表示/非表示された際に呼ばれる処理の実装</title>
      <link>https://kkawazoe.github.io/blog/2019/04/12/show-hide-modal-call-process-with-vuejs/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/12/show-hide-modal-call-process-with-vuejs/</guid>
      <description>Vue.js でモーダルが表示/非表示された際に呼ばれる処理の実装方法 実際のコード HTML側 transition を指定
.app-modal-mask v-show=&amp;quot;showModal&amp;quot; transition=&amp;quot;app-modal&amp;quot;  JavaScript側 transitions 内に HTML の transition で指定した app-modal を指定
※キャメルケースに変換すること
以下のイベントがフックされるようになる
Vue.transition(&#39;expand&#39;, { beforeEnter: function (el) { el.textContent = &#39;beforeEnter&#39; }, enter: function (el) { el.textContent = &#39;enter&#39; }, afterEnter: function (el) { el.textContent = &#39;afterEnter&#39; }, enterCancelled: function (el) { // 取り消しハンドル }, beforeLeave: function (el) { el.textContent = &#39;beforeLeave&#39; }, leave: function (el) { el.textContent = &#39;leave&#39; }, afterLeave: function (el) { el.</description>
    </item>
    
    <item>
      <title>Ruby on Rails の Gem CarrierWave でアップロードする際に画像をリサイズする</title>
      <link>https://kkawazoe.github.io/blog/2019/04/11/resize-when-uploading-for-carrierwave-with-rails/</link>
      <pubDate>Thu, 11 Apr 2019 13:49:45 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/11/resize-when-uploading-for-carrierwave-with-rails/</guid>
      <description> Ruby on Rails の Gem CarrierWave でアップロードする際に画像をリサイズする Carrier Wave について ファイルアップロード機能を提供する Gem
github
実際のコード [app/uploaders/my_uploader.rb]
尚、アスペクト比固定で width および height のみ指定する場合は nil を指定する
heightのみ指定 class MyUploader &amp;lt; CarrierWave::Uploader::Base include CarrierWave::MiniMagick process resize_to_limit: [1200, nil] end  widthのみ指定 class MyUploader &amp;lt; CarrierWave::Uploader::Base include CarrierWave::MiniMagick process resize_to_limit: [1200, nil] end  resize_to_fit と resize_to_limit の違いについて  resize_to_fit
画像が指定したサイズ未満の時
=&amp;gt; アスペクト比を維持しながら指定したサイズまで拡大する resize_to_limit
画像が指定したサイズ未満の時
=&amp;gt; なにもしない  </description>
    </item>
    
    <item>
      <title>Ruby on Rails の Gem Gretel で項目の前に画像を置く</title>
      <link>https://kkawazoe.github.io/blog/2019/04/09/set-image-before-gretel-with-rails/</link>
      <pubDate>Tue, 09 Apr 2019 17:36:18 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/09/set-image-before-gretel-with-rails/</guid>
      <description> Gretel について パンくずリストを表示する Gem
github
実際のコード [config/breadcrumbs.rb]
# articles#index crumb :articles do |article| icon = article.flg ? image_tag(&amp;quot;表示したい画像&amp;quot;) : &amp;quot;&amp;quot; link icon + {表示文字}, {URL} parent :parent_articles, article.category end  </description>
    </item>
    
    <item>
      <title>Windows10 に Ruby1.8.7 &#43; Rails2.3.18 を構築する</title>
      <link>https://kkawazoe.github.io/blog/2019/04/07/build-to-rails2-and-ruby1-with-windows10/</link>
      <pubDate>Sun, 07 Apr 2019 04:24:08 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/07/build-to-rails2-and-ruby1-with-windows10/</guid>
      <description>Windows10 に Ruby1.8.7 + Rails2.3.18 を構築する 経緯 仕事で必要となり表題の環境を準備することになった
苦労したためその際の手順およびハマった点等を備忘録として残しておく
構築環境  ruby: ruby 1.8.7 rails: rails 2.3.18  手順  Ruby Installer で Ruby(1.8.7 p-374) および DevKit(DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe) をダウンロードする Ruby をインストールする(オプションで環境変数パスへの登録を有効にする) DevKit を展開する。(自己解凍形式の圧縮ファイルなので、実行して適当なところに展開する)
3-1. コマンドプロンプトで展開した場所に移動し以下のコマンドを入力する
$ ruby dk.rb init $ ruby dk.rb install  rubygems-update のバージョンをダウングレードする 4-1. 以下のコマンドを入力する
$ gem update --system 1.3.7  ※以下のエラーが起きる場合はこのサイトを参考に手動で rubygems-update をダウングレードする
$ gem update --system ERROR: While executing gem ... (Gem::RemoteFetcher::FetchError) SSL_connect returned=1 errno=0 state=SSLv2/v3 read server hello A: tlsv1 alert protocol version (https://rubygems.</description>
    </item>
    
    <item>
      <title>Slack &#43; Todoist &#43; Integromat でタスク管理 その２</title>
      <link>https://kkawazoe.github.io/blog/2019/03/28/manage-task-with-slack-and-todoist-and-integromat-2/</link>
      <pubDate>Thu, 28 Mar 2019 12:09:59 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/28/manage-task-with-slack-and-todoist-and-integromat-2/</guid>
      <description>前回の残りTODO operation を使いすぎなためAPIの戻り値を配列化してメッセージを構築するようにする  手順 前回構築した API と Slack の処理の間に以下の処理を追加する
 「スパナ」アイコンを押下後「JSON」を選択して以下を指定
 「Parse JSON」  「Data structure」  「Add data structure」  「Specification」  「Generate」を押下して API の戻り値を貼り付けて生成    「JSON string」  「Data」を指定    「スパナ」アイコンを押下後「Flow Control」を選択して以下を指定
 「Array aggregator」  「Source Module」  手順１ で作成したJSON  「Target structure type」  「Custom」を指定  「Aggregated fields」  必要な項目を指定    前回作成した slack の Text を以下のように修正
map() で 「content」の内容を配列で取得後 join() で改行および空白を追加する。</description>
    </item>
    
    <item>
      <title>Slack &#43; Todoist &#43; Integromat でタスク管理 その１</title>
      <link>https://kkawazoe.github.io/blog/2019/03/25/manage-task-with-slack-and-todoist-and-integromat/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/25/manage-task-with-slack-and-todoist-and-integromat/</guid>
      <description>したいこと 日々のタスクを管理したいというよりも忘れがちな〇月に契約更新とかの数か月、数年先のタスクを管理したい
 タスク管理  完了/未完了を切り替え 期日を指定  リマインダー機能  昨日完了したタスク 今日期日のタスク 上記以外のタスク   今回使用するツール  タスク管理
シンプルで管理しやすい todoist を使用 リマインダー機能
slack の channel への通知を使用  google calendar  リマインダーが直前になる  todoist と連携可能だが期日指定なしが連携されない   integromat  サイトが英語のみ    integromat での todoist について integromat から使用できる todoist の 「Search for a task」では以下の項目しか返ってこないため要件を満たせない
 足りない項目  サブタスクかどうか? 期限の情報   [OUTPUT] Bundle 1: (Collection) Task ID: タスクID User ID: ユーザID Project ID: プロジェクトID Content: 内容 Deleted: 削除されているかどうか(true/false) Archived: アーカイブされているかどうか(true/false) Completed: 完了されているかどうか(true/false) The ID of the assigned user: アサインされているユーザID Date created: 作成日時 LabelsArray ラベル配列  そのため、todoist api を叩くことで実装する</description>
    </item>
    
    <item>
      <title>バッチファイルでタイムスタンプを付与する</title>
      <link>https://kkawazoe.github.io/blog/2019/03/23/add-time-stamp-with-bat-file/</link>
      <pubDate>Sat, 23 Mar 2019 00:07:49 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/23/add-time-stamp-with-bat-file/</guid>
      <description>バッチファイルでタイムスタンプを付与する方法 ファイル名などにタイムスタンプを付与したい場合に毎回検索してしまうため備忘録として残しておく
実際のコード 例 2019/03/23 0:07:49.91 に実行した場合
yyyy/mm/dd 表示 @echo off echo %DATE%  =&amp;gt; 2019/03/23
yyyy/mm/dd-hh:MM:ss.fff 表示 午前0時～午前9時の間は 0:00:00.00」(頭に半角スペース)になるため0埋め
@echo off set timeStamp=%DATE%-%TIME% set timeStamp=%timeStamp: =0% echo %timeStamp%  =&amp;gt; 2019/03/23-00:07:49.91
yyyymmddhhMMss 表示 %var:~m,n%は変数varのm文字目からn文字を切り出す。(mは0始まり)
@echo off set timeStamp=%DATE%-%TIME% set timeStamp=%timeStamp: =0% set formatTimeStamp=%timeStamp:~0,4%%timeStamp:~5,2%%timeStamp:~8,2%%timeStamp:~11,2%%timeStamp:~14,2%%timeStamp:~17,2% echo %formatTimeStamp%  =&amp;gt; 20190323000749</description>
    </item>
    
    <item>
      <title>Microsoft Edge Developer(旧Modern IE)でhostsファイルを設定する方法</title>
      <link>https://kkawazoe.github.io/blog/2019/03/19/config-hosts-file-for-microsoft-edge-developer/</link>
      <pubDate>Tue, 19 Mar 2019 23:35:30 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/19/config-hosts-file-for-microsoft-edge-developer/</guid>
      <description>経緯 普段 Mac にて開発を行っているが動作端末は Windows であることが多い。
そのため、表題のツールを使用することがあるがその際に Mac 上の hosts ファイルと同様の設定をしたい場合があり苦労したため備忘録として残しておく。
Microsoft Edge Developer(旧Modern IE)について ダウンロードは以下から行う。
ダウンロードページの「Virtual Machines」より「Virtual machine」と「platform」を選択してダウンロードする。
手順 hostsファイルの権限変更 Microsoft Edge Developer 上で以下を行う。
「C:/Windows/System32/drivers/etc」に hosts ファイルがある。
そのファイルを右クリック&amp;gt;Properties&amp;gt;Security&amp;gt;Editボタンで、 Users の権限に全部チェックを入れる。
Mac の hosts ファイルを複製 Mac の hosts ファイルは「/private/etc/hosts」にあるので、それを前述のファイルに中身をコピーする。
※hosts ファイルのループバックアドレスは固定のホスト側のIPアドレスに置き換えて記述すること。
Rails での確認の際の注意点 確認作業を Rails で行う場合には追加で以下の作業を行う
IEの場合  サーバの起動の際に以下のコマンドで行う
bundle exec rails s -b 0.0.0.0  インターネットオプションのLocal intranetに「localhost:3000」を登録
  Edgeの場合  サーバの起動の際に以下のコマンドで行う
bundle exec rails s -b 0.0.0.0  インターネットオプションの Local intranet に「localhost:3000」を登録</description>
    </item>
    
    <item>
      <title>限度額適用認定証について</title>
      <link>https://kkawazoe.github.io/blog/2019/03/14/health-insurance-credit-limit-authorization/</link>
      <pubDate>Thu, 14 Mar 2019 13:54:31 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/14/health-insurance-credit-limit-authorization/</guid>
      <description>経緯 今回手術＋入院することになり表題を取得する必要が出てきた。
できればお世話になりたくないのが理想ではあるが念の為備忘録として残しておく。
高額療養費制度との違い 協会けんぽのホームページを読むと以下の違いがある。
 医療機関等の窓口でのお支払いが高額な負担となった場合は、あとから申請いただくことにより自己負担限度額を超えた額が払い戻される「高額療養費制度」があります。
しかし、あとから払い戻されるとはいえ、一時的な支払いは大きな負担になります。
「限度額適用認定証」を保険証と併せて医療機関等の窓口（※1）に提示すると、1ヵ月 （1日から月末まで）の窓口でのお支払いが自己負担限度額まで（※2）となります。
※1 保険医療機関（入院・外来別）、保険薬局等それぞれでの取扱いとなります。
※2 同月に入院や外来など複数受診がある場合は、高額療養費の申請が必要となることがあります。保険外負担分（差額ベッド代など）や、入院時の食事負担額等は対象外となります。
 =&amp;gt; 会計の際の請求額が減らされるか後で還付されるかの違いがあるらしい。
自分の場合請求から発行までおよそ2週間程度かかった。
1月単位での扱いになるらしいので早めの手続きを心掛けると良さそう。
※基本的には高額になりそうな場合には病院側から上記の制度について取ってくださいと指示がでるので問題にはなりにくいが申請しないと適用されない制度は数多くあるため、今後も機会をみて把握しておきたい。</description>
    </item>
    
    <item>
      <title>FP3級への道</title>
      <link>https://kkawazoe.github.io/blog/2019/03/11/road-to-fp3/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/11/road-to-fp3/</guid>
      <description> FP3級への道 ここ最近今まで縁のなかった確定申告や高額医療制度のお世話になることがあった。
上記のこともあり知識として必要だと感じため、学習しその記録を残しておく。
受験する科目  学科  FP協会・金融財政事情研究会で共通  実技  FP協会  資産設計提案業務  金融財政事情研究会
難易度的には「資産設計提案業務」が初心者には易しいらしい  個人資産相談業務 ※今回受験 保険顧客資産相談業務    使用する教材 今回使用する教材は以下
2018-2019年版　みんなが欲しかった！　FPの教科書3級
滝澤ななみ TAC 2018年05月22日
売り上げランキング : 楽天ブックスで購入Amazonで購入 by ヨメレバ 他の人の評価等を確認する限り、これ１冊でもいけそう。
必要があれば追加で購入する。
とりあえず、5月の受験を目指す。
2019/03/26 追記 試験用の電卓を購入
CANON HS-1220TUG 実務電卓 12桁楽天市場で購入Amazonで購入by カエレバ こっちと迷ったが現状だとあまり必要なさそうなので安さで選択上位の級で必要になれば購入する
シャープ EL-N942-X 実務電卓 12桁楽天市場で購入Amazonで購入by カエレバ 2019/04/15 追記 問題集として追加で以下を購入
※教本だけだと習熟度がわからないため
2018-2019年版　みんなが欲しかった！　FPの問題集3級
滝澤ななみ TAC 2018年05月22日
売り上げランキング : 楽天ブックスで購入Amazonで購入 by ヨメレバ </description>
    </item>
    
    <item>
      <title>CofeeScript で JQuery の each を使用する場合の注意点</title>
      <link>https://kkawazoe.github.io/blog/2019/03/08/attention-use-each-for-jquery-with-cofee-script/</link>
      <pubDate>Fri, 08 Mar 2019 17:21:18 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/08/attention-use-each-for-jquery-with-cofee-script/</guid>
      <description> CoffeeScript で JQuery の each を使用する場合の注意点 JQueryの取得した要素分繰り返すeachを使用した場合にeachの内部でCoffeeScriptの@を使用するとJQueryのthisとして扱われてしまいReferenceErrorが発生する
その場合は以下のように修正する
実際のソース  修正前  processRows: -&amp;gt; $(&amp;quot;#my-table&amp;gt;tr&amp;quot;).each -&amp;gt; id = $(this).attr(&amp;quot;id&amp;quot;) @processRow id   修正後  processRows: -&amp;gt; $(&amp;quot;#my-table&amp;gt;tr&amp;quot;).each (index, element) =&amp;gt; id = $(element).attr(&amp;quot;id&amp;quot;) @processRow id  </description>
    </item>
    
    <item>
      <title>Vue.js で画面初期表示時に特定の要素をスクロールエリア中央に表示する</title>
      <link>https://kkawazoe.github.io/blog/2019/03/07/initial-screen-display-scroll-to-center-specific-elementelement-with-vuejs/</link>
      <pubDate>Thu, 07 Mar 2019 18:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/07/initial-screen-display-scroll-to-center-specific-elementelement-with-vuejs/</guid>
      <description>Vue.js で画面初期表示時に特定の要素をスクロールエリア中央に表示する方法 経緯 web アプリでランキング画面のようにリスト内の自分の行を中心に表示のようなことを行いたい場合があり調査した結果を備忘録として残しておく
実際のソースおよび実行結果 画面初期表示時に id = 1(Taro) のデータをスクロールエリアの中央に表示する
created のタイミングで API 等からデータが取得される想定のため変数 users 監視しておいて変わったタイミングで画面中央にスクロール位置を移動させる
例はスクロールエリアの height が固定のパターンであるが可変の場合は画面サイズを使用して計算する
See the Pen Vue.js で画面初期表示時に特定の要素をスクロールエリア中央に表示する by kkawazoe (@kkawazoe) on CodePen.</description>
    </item>
    
    <item>
      <title>CSS で複数行でも3点リーダーを表示する</title>
      <link>https://kkawazoe.github.io/blog/2019/03/06/show-ellipsis-multiple-lines-with-css/</link>
      <pubDate>Wed, 06 Mar 2019 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/06/show-ellipsis-multiple-lines-with-css/</guid>
      <description>CSS で複数行でも3点リーダーを表示する方法 経緯 CSS で3点リーダーを表示したい場合がよくあるが複数行の場合でも同様の対応を行いたい場合があり調査した結果を備忘録として残しておく
実際のソースおよび実行結果 See the Pen CSS で3点リーダー付与 by kkawazoe (@kkawazoe) on CodePen.</description>
    </item>
    
    <item>
      <title>VB.NET でふりがな機能を実装する</title>
      <link>https://kkawazoe.github.io/blog/2019/03/04/ime-comp-with-vbnet/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/04/ime-comp-with-vbnet/</guid>
      <description>VB.NET でふりがな機能を実装する 経緯 最近、周りで VB.NET を使っている人が複数人出てきた恐らく2020年にWindows7 サポート終了となるため VB6 =&amp;gt; VB.NET へのコンバージョンの案件が増えていると思われる。
そのため、以前行った際に苦労したふりがな機能について備忘録として残しておくことにする
実際のコード ふりがな取得機能の実装クラス [mImecomp.vb]
 以下のふりがなに対応(半角および全角英数はそのまま取得)  ひらがな 全角カナ 半角カナ   Option Strict Off Option Explicit On Imports System.Runtime.InteropServices Delegate Function fncDelegate(ByVal hWnd As Integer, ByVal uMsg As Integer, ByVal wParam As Integer, ByVal lParam As Integer) As Integer &#39;&#39;&#39; &amp;lt;summary&amp;gt; &#39;&#39;&#39; 変換イベントクラス &#39;&#39;&#39; &amp;lt;/summary&amp;gt; Public Class ConvertedEventArgs Inherits EventArgs &#39;&#39;&#39; &amp;lt;summary&amp;gt; &#39;&#39;&#39; 変換イベントクラスのコンストラクタ &#39;&#39;&#39; &amp;lt;/summary&amp;gt; &#39;&#39;&#39; &amp;lt;param name=&amp;quot;f&amp;quot;&amp;gt;ふりがな文字列&amp;lt;/param&amp;gt; &#39;&#39;&#39; &amp;lt;param name=&amp;quot;r&amp;quot;&amp;gt;変換後文字列&amp;lt;/param&amp;gt; Public Sub New(ByVal f As String, ByVal r As String) Furigana = f Result = r End Sub Public ReadOnly Property Furigana() As String Public ReadOnly Property Result() As String End Class &#39;&#39;&#39; &amp;lt;summary&amp;gt; &#39;&#39;&#39; 自動ふりがな取得クラス &#39;&#39;&#39; &amp;lt;/summary&amp;gt; Public Class Imecomp Private m_TxtSrcControl As Control Private m_TxtDestControl As Control Private WithEvents M_MsgListner As MsgListner Private ReadOnly m_StrConvMode As Integer &#39;&#39;&#39; &amp;lt;summary&amp;gt; &#39;&#39;&#39; ふりがな取得完了通知イベント &#39;&#39;&#39; &#39;&#39;&#39; ふりがな取得が完了したことを通知する &#39;&#39;&#39; &amp;lt;/summary&amp;gt; &#39;&#39;&#39; &amp;lt;param name=&amp;quot;txtSrc&amp;quot;&amp;gt;ふりがな取得対象テキストボックス&amp;lt;/param&amp;gt; &#39;&#39;&#39; &amp;lt;param name=&amp;quot;txtDest&amp;quot;&amp;gt;ふりがな出力対象テキストボックス&amp;lt;/param&amp;gt; &#39;&#39;&#39; &amp;lt;param name=&amp;quot;e&amp;quot;&amp;gt;変換イベントクラス&amp;lt;/param&amp;gt; Public Event Converted(ByVal txtSrc As System.</description>
    </item>
    
    <item>
      <title>プライバシーポリシー</title>
      <link>https://kkawazoe.github.io/privacy-policy/</link>
      <pubDate>Fri, 01 Mar 2019 09:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/privacy-policy/</guid>
      <description>プライバシーポリシー 当サイトに掲載されている広告について 当サイトでは、第三者配信の広告サービス（Google Adsense, A8.net, Rakuten アフィリエイト, Amazon アソシエイト）を利用しています。 広告配信事業者はユーザーの興味に応じた商品やサービスの広告を表示するため、当サイトや他サイトへのアクセスに関する情報 『Cookie』 (氏名、住所、メール アドレス、電話番号は含まれません)を使用することがあります。 また Google Adsense に関して、このプロセスの詳細やこのような情報が広告配信事業者に使用されないようにする方法については、こちらをご覧ください。 また Rakuten アフィリエイト に関して、このプロセスの詳細やこのような情報が広告配信事業者に使用されないようにする方法については、こちらをご覧ください。
当サイトが使用しているアクセス解析ツールについて 当サイトでは、Googleによるアクセス解析ツール（Google Analytics）を利用しています。 このGoogle Analyticsはトラフィックデータの収集のために Cookieを使用しています。 このトラフィックデータは匿名で収集されており、個人を特定するものではありません。 この機能はCookieを無効にすることで収集を拒否することが出来ますので、お使いのブラウザの設定をご確認ください。
免責事項 本サイトの情報は、一部のサービスを除き、無料で提供されています。 当サイトを利用したウェブサイトの閲覧や情報収集については、情報がユーザーの需要に適合するものか否か、 情報の保存や複製その他ユーザーによる任意の利用方法により必要な法的権利を有しているか否か、著作権、秘密保持、名誉毀損、品位保持および 輸出に関する法規その他法令上の義務に従うことなど、ユーザーご自身の責任において行っていただきますようお願いいたします。
当サイトの御利用につき、何らかのトラブルや損失・損害等につきましては一切責任を問わないものとします。
当サイトが紹介しているウェブサイトやソフトウェア・アプリケーション・ツールの合法性、正確性、道徳性、最新性、適切性、著作権の許諾や有無など その内容については一切の保証を致しかねます。
当サイトからリンクやバナーなどによって他のサイトに移動された場合、移動先サイトで提供される情報、サービス等について 一切の責任を負いません。
当サイトに存在する、文章・画像・動画等の著作物の情報を無断転載することを禁止します。 引用の範囲を超えるものについては、法的処置を行います。転載する際には、予めご連絡お願いします。
また当サイトで掲載している画像の著作権・肖像権等は各権利所有者に帰属致します。 権利を侵害する目的ではございません。記事の内容や掲載画像等に問題がございましたら、各権利所有者様本人が直接メールでご連絡下さい。 確認後、対応させて頂きます。</description>
    </item>
    
    <item>
      <title>普通の会社員(SE)が確定申告してみた</title>
      <link>https://kkawazoe.github.io/blog/2019/03/01/tried-tax-returns/</link>
      <pubDate>Fri, 01 Mar 2019 09:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/01/tried-tax-returns/</guid>
      <description>普通の会社員(SE)が確定申告してみた 経緯 株式投資を行っているが「特定口座(源泉徴収あり)」で行っているため例年であれば会社の年末調整のみで完結するはずだが以下の状況のため確定申告をすることにした
 昨年末(2018年12月)の株式市場が全体的に下落  手持ち株が元本割れになる 普段は塩漬けにしているが一旦売却
=&amp;gt; 年間の損益がマイナスになる   ※確定申告をすると3年間の損失の繰越控除が可能になるらしい
想定ケース  会社員で年末調整済 株は特定口座(源泉徴収あり)で取引  確定申告手順 事前準備  源泉徴収票 特定口座年間取引報告書 マイナンバー通知カード※1 本人確認書類(免許証等)※1 マイナンバーカード※2 ICカードリーダー※2  今回は、 e-tax を使用せずに確定申告したため※2は
未使用(e-tax を使用した場合は※1が不要)
※マイナンバーカードが必要で発行に1ヵ月程度かかるため
手順 国税庁 確定申告書等作成コーナーで作成する
 「作成開始」ボタンを押下 「印刷して書面を提出」ボタンを押下 「利用規約に同意して次へ」ボタンを押下 「平成30年分の申告書等の作成」&amp;gt;「所得税」を選択 「左記以外の所得のある方（全ての所得対応）」の「作成開始」ボタンを押下 生年月日を入力後、「入力終了(次へ) &amp;gt;」ボタンを押下 「上場株式等の譲渡所得等」を選択  配当所得の課税方法の選択  「申告分離課税」を選択  株式等の売却・配当・利子等の入力  「特定口座年間取引報告書の内容を入力する」を選択 入力例を参考に「特定口座年間取引報告書」の内容を転記する  平成29年分の申告で上場株式等に係る譲渡損失の金額を繰り越した方  「いいえ」を選択※来年はここで「はい」を選択   「入力終了(次へ) &amp;gt;」ボタンを押下 内容確認後、「確認終了(次へ)」ボタンを押下 「収入金額等」&amp;gt;「給与」を選択  「源泉徴収票」の内容を転記  住所・氏名等入力後、「入力終了(次へ) &amp;gt;」ボタンを押下 マイナンバー入力後、「入力終了(次へ) &amp;gt;」ボタンを押下 帳票を印刷する 以下の方法で確定申告書類を提出する  郵便又は信書便で送付 税務署の受付に持参 税務署の時間外収受箱へ投函   まとめ 今回は一つ一つ手順をまとめながら作業したが1時間程度で意外と手間取られずに</description>
    </item>
    
    <item>
      <title>Rambox で ChatWork の未読メッセージを通知する</title>
      <link>https://kkawazoe.github.io/blog/2019/02/28/unread-chatwork-notice-with-rambox/</link>
      <pubDate>Thu, 28 Feb 2019 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/28/unread-chatwork-notice-with-rambox/</guid>
      <description>Rambox で ChatWork の未読メッセージを通知する 確認環境  Windows10 Rambox: 0.6.3  経緯 普段、 仕事で Chatwork や Slack を使用しているが別々のアプリを切り替えるのが手間だったためまとめて管理できるツールがないか調査した。
候補  Franz Station Rambox  Franz, Station だと ChatWork で PDF ファイルのプレビューを表示した際にダウンロード用のダイアログが表示されるため
「保存」 =&amp;gt; 「PDF を開く」の手間が発生してしまうため Rambox に決定
Rambox の ChatWork の挙動 Rambox で ChatWork をサービスとして追加した場合自分にメンションがついているメッセージの場合は以下のようにバッジと未読数が表示される
 Rambox バッジおよび未読数   しかし、自分にメンションがついていないメッセージについてはバッジおよび未読数は表示されないため見逃してしまう
対処方法 Rambox のサービス設定画面でカスタムコードを使用して対応する
※未読数(未読のあるルーム数) アプリ版 ChatWork と同じ挙動
 Rambox サービス設定画面   実際のコード [Custom Code]
function checkUnread() { const elements = document.</description>
    </item>
    
    <item>
      <title>Vue.js で画像の読み込みの開始および完了を検知する</title>
      <link>https://kkawazoe.github.io/blog/2019/02/26/detect-loaded-and-start-reading-for-img-with-vuejs/</link>
      <pubDate>Tue, 26 Feb 2019 17:29:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/26/detect-loaded-and-start-reading-for-img-with-vuejs/</guid>
      <description>Vue.js で画像の読み込みの開始および完了を検知する方法 確認環境  Vue.js: v2.6.7  方法 読み込み開始検知  img タグの :src に展開する URL を変数化 ※1 Vue.js 側の watch で1.の変数を監視 ※2  読み込み完了検知  img タグに以下のイベントを追加
v-on:load=&amp;quot;メソッド名&amp;quot; ※3 Vue.js 側に1.で指定したメソッドを定義 ※4  実際のコード [index.html]
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;画像の読み込みの開始および完了を検知する方法&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; &amp;lt;img :src=&amp;quot;url&amp;quot; v-on:load=&amp;quot;load&amp;quot; /&amp;gt; &amp;lt;!-- ※3 --&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; var app = new Vue({ el: &#39;#app&#39;, data: { url: &amp;quot;https://raw.githubusercontent.com/vuejs/art/master/logo.png&amp;quot; // ※1 }, methods: { // ※4 load: function() { console.</description>
    </item>
    
    <item>
      <title>Rails の order by で自分を優先的に取得する</title>
      <link>https://kkawazoe.github.io/blog/2019/02/25/order-by-prefer-yourself-with-rails/</link>
      <pubDate>Mon, 25 Feb 2019 16:50:14 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/25/order-by-prefer-yourself-with-rails/</guid>
      <description>Rails の order by で自分を優先的に取得する方法(MySql 限定) 確認環境  ruby: ruby 2.5.3 rails: rails 5.2.2  方法  Mysqlの FIELD 関数を使用する。※FIELD 関数の結果で ORDER BY する
 例. レコードを order 昇順, user_id 昇順で並び替える場合(同じ順位の場合は自分を優先)   order(:order, [&amp;quot;field(user_id , #{current_user.id}) desc&amp;quot;], :user_id)  ※ ポイントとしては第２ソートキーの前に ORDER BY FIELD を使用すること。
また、ORDER BY FIELD で指定した分に対して desc を指定すること。
( desc を指定しないと自分以外が優先的に並び替えられてしまう)</description>
    </item>
    
    <item>
      <title>Rails で階層構造になっているテーブルに自分自身への関連を設定する</title>
      <link>https://kkawazoe.github.io/blog/2019/02/21/set-self-association-with-rails/</link>
      <pubDate>Thu, 21 Feb 2019 18:10:43 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/21/set-self-association-with-rails/</guid>
      <description>Rails で階層構造になっているテーブルに自分自身への関連を設定する方法 テーブル構成例 [Nodesテーブル]
最上位のノード以外は親ノードを持っている
   id name parent_id     1 parrent_node null   2 child_node_1 1   3 child_node_2 1   4 child_node_1_1 2   5 child_node_1_2 2   6 child_node_2_1 3   7 child_node_2_2 3    確認環境  ruby: ruby 2.5.3 rails: rails 5.2.2  実際のコード [app/models/node.rb]
class Node &amp;lt; ApplicationRecord has_many :children, class_name: &amp;quot;Node&amp;quot;, foreign_key: &amp;quot;parrent_id&amp;quot; belongs_to :parrent, class_name: &amp;quot;Node&amp;quot;, optional: true # rails5 から default が require になっているため　`optional: true` を指定しないと `nil` での保存が不可 end  [db/migrate/{datetime}_create_nodes.</description>
    </item>
    
    <item>
      <title>Visual Studio Code で Markdown PDF を使用してPDF出力する際に任意の場所で改行させる</title>
      <link>https://kkawazoe.github.io/blog/2019/02/20/markdown-pdf-page-break/</link>
      <pubDate>Wed, 20 Feb 2019 00:24:14 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/20/markdown-pdf-page-break/</guid>
      <description> Visual Studio Code で Markdown PDF を使用してPDF出力する際に任意の場所で改行させる方法 経緯 普段、 VS Code を使用しておりちょっとしたメモや資料は Markdown を使用して作成している。
資料を共有をする場合に拡張機能である Markdown PDF を使用しているが出力後のPDFで改ページが微妙な場所でされてしまったため任意の場所で改ページできないか調査した。
情報元 Markdown PDF の「Page Break」の項目に記載あり
実際のコード # h1 ## h2 ### h3 &amp;lt;!-- 改行させたい位置 --&amp;gt; &amp;lt;div class=&amp;quot;page&amp;quot;/&amp;gt; # h1 ## h2 ### h3  </description>
    </item>
    
    <item>
      <title>Windows7環境でバッチファイルからiniファイルを読込んで値を取得する</title>
      <link>https://kkawazoe.github.io/blog/2014/06/22/get-value-from-initialize-file/</link>
      <pubDate>Sun, 22 Jun 2014 09:01:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2014/06/22/get-value-from-initialize-file/</guid>
      <description>Windows7 環境でバッチファイルから ini ファイルを読込んで値を取得する方法 対応方法 バッチファイルから ini ファイルを読込む場合VBSを使用することで実現する。
具体的には、バッチファイルから VBS を呼び出して ini ファイルより値を取得して VBS から戻り値を受け取り、実現する。
取得する ini ファイルの中身 [sample.ini]
&amp;lt;設定値&amp;gt;*****************************************************&#39;&amp;lt;コメント&amp;gt;####################################### [Path] WorkPath=C:/src/wk &#39;Work Folder Path  実際のコード [getProfileString.bat]
@echo off set iniFileName=sample.ini for /f &amp;quot;usebackq tokens=* delims=&amp;quot; %%A in (`call cscript //Nologo getProfileString.vbs &amp;quot;%iniFileName%&amp;quot; Path WorkPath`) do set ret=%%A echo &amp;quot;%ret%&amp;quot; pause exit  [getProfileString.vbs]
Option Explicit rem /***************************************************************** rem * getProfileString.vbs iniFileName, sectionName, entryName rem * rem * 引数 rem * iniFileName : 設定ファイル名(フルパス) rem * sectionName : セクション名 rem * entryName : エントリー名 rem * 動作 rem * 引数に指定された設定ファイルより指定した rem * 「セクション」,「エントリー」に対応する設定値を返す。 rem * 先頭がカンマの場合はコメント行として扱う。 rem * 行の途中でカンマがある場合は直前までの文字列(右空白除去)を rem * 設定値として扱う。 rem * 戻り値 rem * 設定値(見つからなかった場合およびエラーの場合は空を返す。) rem *****************************************************************/ Dim ret Dim fs Dim readLineObj Dim searchFlg Dim buffer rem ファイルシステムアクセス用 Set fs = CreateObject( &amp;quot;Scripting.</description>
    </item>
    
    <item>
      <title>Windows7環境でバッチファイルからメッセージボックスを表示して押下されたボタンによって処理を切り替える</title>
      <link>https://kkawazoe.github.io/blog/2014/02/09/switch-processing-by-message-box/</link>
      <pubDate>Sun, 09 Feb 2014 18:46:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2014/02/09/switch-processing-by-message-box/</guid>
      <description>Windows7環境でバッチファイルからメッセージボックスを表示して押下されたボタンによって処理を切り替える方法 対応方法 バッチファイルからメッセージボックスを表示する場合バッチファイル単体では実現不可のため VBS を使用して実現する。
※具体的には、バッチファイルから VBS を呼び出してメッセージボックスを表示し、 VBS から戻り値を受け取り、処理を切り替える
実際のコード [DispMsgBox.bat]
@echo off rem メッセージボックスの表示 set msg=&amp;quot;メッセージボックスのテスト [\n] で改行します。&amp;quot; set title=&amp;quot;メッセージボックステスト&amp;quot; for /f &amp;quot;usebackq tokens=* delims=&amp;quot; %%A in (`call cscript //Nologo msgbox.vbs %msg% &amp;quot;%title%&amp;quot;`) do set ret=%%A echo %ret% pause exit  [msgbox.vbs]
Option Explicit rem /******************************************************* rem * msgbox.vbs msg [,title] rem * rem * 引数 rem * msg :表示するメッセージ rem * title :メッセージボックスのタイトル rem * 動作 rem * メッセージボックスを表示し、クリックされたボタンに rem * 対応する数値を返す。 rem * msg中の 「\n」という文字列は改行に変換する。 rem * 戻り値 rem * 0:[はい]/1:[いいえ] rem ********************************************************/ Dim args Dim arg(99) Dim value Dim cnt Dim retBtn Dim ret Dim eLevel rem 引数を変数にセット Set args = WScript.</description>
    </item>
    
  </channel>
</rss>