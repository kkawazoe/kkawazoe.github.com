<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Note To Self ~One Step At A Time~</title>
    <link>https://kkawazoe.github.io/</link>
    <description>Recent content on Note To Self ~One Step At A Time~</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Mon, 04 Mar 2019 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://kkawazoe.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>VB.NET でふりがな機能を実装する</title>
      <link>https://kkawazoe.github.io/blog/2019/03/04/ime-comp-with-vbnet/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/04/ime-comp-with-vbnet/</guid>
      <description>VB.NET でふりがな機能を実装する 経緯 最近、周りで VB.NET を使っている人が複数人出てきた
恐らく2020年にWindows7 サポート終了となるため
VB6 =&amp;gt; VB.NET へのコンバージョンの案件が増えていると
思われる。
そのため、以前行った際に苦労したふりがな機能について
備忘録として残しておくことにする
実際のコード ふりがな取得機能の実装クラス [mImecomp.vb]
 以下のふりがなに対応(半角および全角英数はそのまま取得)  ひらがな 全角カナ 半角カナ   Option Strict Off Option Explicit On Imports System.Runtime.InteropServices Delegate Function fncDelegate(ByVal hWnd As Integer, ByVal uMsg As Integer, ByVal wParam As Integer, ByVal lParam As Integer) As Integer &#39;&#39;&#39; &amp;lt;summary&amp;gt; &#39;&#39;&#39; 変換イベントクラス &#39;&#39;&#39; &amp;lt;/summary&amp;gt; Public Class ConvertedEventArgs Inherits EventArgs &#39;&#39;&#39; &amp;lt;summary&amp;gt; &#39;&#39;&#39; 変換イベントクラスのコンストラクタ &#39;&#39;&#39; &amp;lt;/summary&amp;gt; &#39;&#39;&#39; &amp;lt;param name=&amp;quot;f&amp;quot;&amp;gt;ふりがな文字列&amp;lt;/param&amp;gt; &#39;&#39;&#39; &amp;lt;param name=&amp;quot;r&amp;quot;&amp;gt;変換後文字列&amp;lt;/param&amp;gt; Public Sub New(ByVal f As String, ByVal r As String) Furigana = f Result = r End Sub Public ReadOnly Property Furigana() As String Public ReadOnly Property Result() As String End Class &#39;&#39;&#39; &amp;lt;summary&amp;gt; &#39;&#39;&#39; 自動ふりがな取得クラス &#39;&#39;&#39; &amp;lt;/summary&amp;gt; Public Class Imecomp Private m_TxtSrcControl As Control Private m_TxtDestControl As Control Private WithEvents M_MsgListner As MsgListner Private ReadOnly m_StrConvMode As Integer &#39;&#39;&#39; &amp;lt;summary&amp;gt; &#39;&#39;&#39; ふりがな取得完了通知イベント &#39;&#39;&#39; &#39;&#39;&#39; ふりがな取得が完了したことを通知する &#39;&#39;&#39; &amp;lt;/summary&amp;gt; &#39;&#39;&#39; &amp;lt;param name=&amp;quot;txtSrc&amp;quot;&amp;gt;ふりがな取得対象テキストボックス&amp;lt;/param&amp;gt; &#39;&#39;&#39; &amp;lt;param name=&amp;quot;txtDest&amp;quot;&amp;gt;ふりがな出力対象テキストボックス&amp;lt;/param&amp;gt; &#39;&#39;&#39; &amp;lt;param name=&amp;quot;e&amp;quot;&amp;gt;変換イベントクラス&amp;lt;/param&amp;gt; Public Event Converted(ByVal txtSrc As System.</description>
    </item>
    
    <item>
      <title>プライバシーポリシー</title>
      <link>https://kkawazoe.github.io/privacy-policy/</link>
      <pubDate>Fri, 01 Mar 2019 09:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/privacy-policy/</guid>
      <description>プライバシーポリシー 当サイトに掲載されている広告について 当サイトでは、第三者配信の広告サービス（Google Adsense, A8.net）を利用しています。 広告配信事業者はユーザーの興味に応じた商品やサービスの広告を表示するため、当サイトや他サイトへのアクセスに関する情報 『Cookie』 (氏名、住所、メール アドレス、電話番号は含まれません)を使用することがあります。 また Google Adsense に関して、このプロセスの詳細やこのような情報が広告配信事業者に使用されないようにする方法については、こちらをご覧ください。
当サイトが使用しているアクセス解析ツールについて 当サイトでは、Googleによるアクセス解析ツール（Google Analytics）を利用しています。 このGoogle Analyticsはトラフィックデータの収集のために Cookieを使用しています。 このトラフィックデータは匿名で収集されており、個人を特定するものではありません。 この機能はCookieを無効にすることで収集を拒否することが出来ますので、お使いのブラウザの設定をご確認ください。
免責事項 本サイトの情報は、一部のサービスを除き、無料で提供されています。 当サイトを利用したウェブサイトの閲覧や情報収集については、情報がユーザーの需要に適合するものか否か、 情報の保存や複製その他ユーザーによる任意の利用方法により必要な法的権利を有しているか否か、著作権、秘密保持、名誉毀損、品位保持および 輸出に関する法規その他法令上の義務に従うことなど、ユーザーご自身の責任において行っていただきますようお願いいたします。
当サイトの御利用につき、何らかのトラブルや損失・損害等につきましては一切責任を問わないものとします。
当サイトが紹介しているウェブサイトやソフトウェア・アプリケーション・ツールの合法性、正確性、道徳性、最新性、適切性、著作権の許諾や有無など その内容については一切の保証を致しかねます。
当サイトからリンクやバナーなどによって他のサイトに移動された場合、移動先サイトで提供される情報、サービス等について 一切の責任を負いません。
当サイトに存在する、文章・画像・動画等の著作物の情報を無断転載することを禁止します。 引用の範囲を超えるものについては、法的処置を行います。転載する際には、予めご連絡お願いします。
また当サイトで掲載している画像の著作権・肖像権等は各権利所有者に帰属致します。 権利を侵害する目的ではございません。記事の内容や掲載画像等に問題がございましたら、各権利所有者様本人が直接メールでご連絡下さい。 確認後、対応させて頂きます。</description>
    </item>
    
    <item>
      <title>普通の会社員(SE)が確定申告してみた</title>
      <link>https://kkawazoe.github.io/blog/2019/03/01/tried-tax-returns/</link>
      <pubDate>Fri, 01 Mar 2019 09:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/01/tried-tax-returns/</guid>
      <description>普通の会社員(SE)が確定申告してみた 経緯 株式投資を行っているが「特定口座(源泉徴収あり)」で行っているため
例年であれば会社の年末調整のみで完結するはずだが以下の状況のため
確定申告をすることにした
 昨年末(2018年12月)の株式市場が全体的に下落  手持ち株が元本割れになる 普段は塩漬けにしているが一旦売却
=&amp;gt; 年間の損益がマイナスになる   ※確定申告をすると3年間の損失の繰越控除が可能になるらしい
想定ケース  会社員で年末調整済 株は特定口座(源泉徴収あり)で取引  確定申告手順 事前準備  源泉徴収票 特定口座年間取引報告書 マイナンバー通知カード※1 本人確認書類(免許証等)※1 マイナンバーカード※2 ICカードリーダー※2  今回は、 e-tax を使用せずに確定申告したため※2は
未使用(e-tax を使用した場合は※1が不要)
※マイナンバーカードが必要で発行に1ヵ月程度かかるため
手順 国税庁 確定申告書等作成コーナーで作成する
 「作成開始」ボタンを押下 「印刷して書面を提出」ボタンを押下 「利用規約に同意して次へ」ボタンを押下 「平成30年分の申告書等の作成」&amp;gt;「所得税」を選択 「左記以外の所得のある方（全ての所得対応）」の「作成開始」ボタンを押下 生年月日を入力後、「入力終了(次へ) &amp;gt;」ボタンを押下 「上場株式等の譲渡所得等」を選択  配当所得の課税方法の選択  「申告分離課税」を選択  株式等の売却・配当・利子等の入力  「特定口座年間取引報告書の内容を入力する」を選択 入力例を参考に「特定口座年間取引報告書」の内容を転記する  平成29年分の申告で上場株式等に係る譲渡損失の金額を繰り越した方  「いいえ」を選択※来年はここで「はい」を選択   「入力終了(次へ) &amp;gt;」ボタンを押下 内容確認後、「確認終了(次へ)」ボタンを押下 「収入金額等」&amp;gt;「給与」を選択  「源泉徴収票」の内容を転記  住所・氏名等入力後、「入力終了(次へ) &amp;gt;」ボタンを押下 マイナンバー入力後、「入力終了(次へ) &amp;gt;」ボタンを押下 帳票を印刷する 以下の方法で確定申告書類を提出する  郵便又は信書便で送付 税務署の受付に持参 税務署の時間外収受箱へ投函   まとめ 今回は一つ一つ手順をまとめながら作業したが1時間程度で意外と手間取られずに</description>
    </item>
    
    <item>
      <title>Rambox で ChatWork の未読メッセージを通知する</title>
      <link>https://kkawazoe.github.io/blog/2019/02/28/unread-chatwork-notice-with-rambox/</link>
      <pubDate>Thu, 28 Feb 2019 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/28/unread-chatwork-notice-with-rambox/</guid>
      <description>Rambox で ChatWork の未読メッセージを通知する 確認環境  Windows10 Rambox: 0.6.3  経緯 普段、 仕事で Chatwork や Slack を使用しているが別々のアプリを切り替えるのが
手間だったためまとめて管理できるツールがないか調査した。
候補  Franz Station Rambox  Franz, Station だと ChatWork で PDF ファイルのプレビューを表示した際に
ダウンロード用のダイアログが表示されるため
「保存」 =&amp;gt; 「PDF を開く」の手間が発生してしまうため Rambox に決定
Rambox の ChatWork の挙動 Rambox で ChatWork をサービスとして追加した場合自分にメンションがついている
メッセージの場合は以下のようにバッジと未読数が表示される
 Rambox バッジおよび未読数   しかし、自分にメンションがついていないメッセージについてはバッジおよび未読数は
表示されないため見逃してしまう
対処方法 Rambox のサービス設定画面でカスタムコードを使用して対応する
※未読数(未読のあるルーム数) アプリ版 ChatWork と同じ挙動
 Rambox サービス設定画面   実際のコード [Custom Code]</description>
    </item>
    
    <item>
      <title>画像の読み込みの開始および完了を検知する</title>
      <link>https://kkawazoe.github.io/blog/2019/02/26/detect-loaded-and-start-reading-for-img-with-vuejs/</link>
      <pubDate>Tue, 26 Feb 2019 17:29:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/26/detect-loaded-and-start-reading-for-img-with-vuejs/</guid>
      <description>Vue.js で画像の読み込みの開始および完了を検知する 確認環境  Vue.js: v2.6.7  方法 読み込み開始検知  img タグの :src に展開する URL を変数化 ※1 Vue.js 側の watch で1.の変数を監視 ※2  読み込み完了検知  img タグに以下のイベントを追加
v-on:load=&amp;quot;メソッド名&amp;quot; ※3 Vue.js 側に1.で指定したメソッドを定義 ※4  実際のコード [index.html]
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;画像の読み込みの開始および完了を検知する方法&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; &amp;lt;img :src=&amp;quot;url&amp;quot; v-on:load=&amp;quot;load&amp;quot; /&amp;gt; &amp;lt;!-- ※3 --&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; var app = new Vue({ el: &#39;#app&#39;, data: { url: &amp;quot;https://raw.githubusercontent.com/vuejs/art/master/logo.png&amp;quot; // ※1 }, methods: { // ※4 load: function() { console.</description>
    </item>
    
    <item>
      <title>Rails の order by で自分を優先的に取得する</title>
      <link>https://kkawazoe.github.io/blog/2019/02/25/order-by-prefer-yourself-with-rails/</link>
      <pubDate>Mon, 25 Feb 2019 16:50:14 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/25/order-by-prefer-yourself-with-rails/</guid>
      <description>Rails の order by で自分を優先的に取得する方法(MySql 限定) 確認環境  ruby: ruby 2.5.3 rails: rails 5.2.2  方法  Mysqlの FIELD 関数を使用する。※FIELD 関数の結果で ORDER BY する
 例. レコードを order 昇順, user_id 昇順で並び替える場合(同じ順位の場合は自分を優先)   order(:order, [&amp;quot;field(user_id , #{current_user.id}) desc&amp;quot;], :user_id)  ※ ポイントとしては第２ソートキーの前に ORDER BY FIELD を使用すること。
また、ORDER BY FIELD で指定した分に対して desc を指定すること。
( desc を指定しないと自分以外が優先的に並び替えられてしまう)</description>
    </item>
    
    <item>
      <title>Rails で階層構造になっているテーブルに自分自身への関連を設定する</title>
      <link>https://kkawazoe.github.io/blog/2019/02/21/set-self-association-with-rails/</link>
      <pubDate>Thu, 21 Feb 2019 18:10:43 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/21/set-self-association-with-rails/</guid>
      <description>Rails で階層構造になっているテーブルに自分自身への関連を設定する方法 テーブル構成例 [Nodesテーブル]
最上位のノード以外は親ノードを持っている
   id name parent_id     1 parrent_node null   2 child_node_1 1   3 child_node_2 1   4 child_node_1_1 2   5 child_node_1_2 2   6 child_node_2_1 3   7 child_node_2_2 3    確認環境  ruby: ruby 2.5.3 rails: rails 5.2.2  実際のコード [app/models/node.rb]
class Node &amp;lt; ApplicationRecord has_many :children, class_name: &amp;quot;Node&amp;quot;, foreign_key: &amp;quot;parrent_id&amp;quot; belongs_to :parrent, class_name: &amp;quot;Node&amp;quot;, optional: true # rails5 から default が require になっているため　`optional: true` を指定しないと `nil` での保存が不可 end  [db/migrate/{datetime}_create_nodes.</description>
    </item>
    
    <item>
      <title>Visual Studio Code で Markdown PDF を使用してPDF出力する際に任意の場所で改行させる</title>
      <link>https://kkawazoe.github.io/blog/2019/02/20/markdown-pdf-page-break/</link>
      <pubDate>Wed, 20 Feb 2019 00:24:14 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/20/markdown-pdf-page-break/</guid>
      <description> Visual Studio Code で Markdown PDF を使用してPDF出力する際に任意の場所で改行させる方法 経緯 普段、 VS Code を使用しておりちょっとしたメモや資料は Markdown を使用して作成している。
資料を共有をする場合に拡張機能である Markdown PDF を使用しているが出力後のPDFで改ページが微妙な場所でされてしまったため任意の場所で改ページできないか調査した。
情報元 Markdown PDF の「Page Break」の項目に記載あり
実際のコード # h1 ## h2 ### h3 &amp;lt;!-- 改行させたい位置 --&amp;gt; &amp;lt;div class=&amp;quot;page&amp;quot;/&amp;gt; # h1 ## h2 ### h3  </description>
    </item>
    
    <item>
      <title>Windows7環境でバッチファイルからiniファイルを読込んで値を取得する</title>
      <link>https://kkawazoe.github.io/blog/2014/06/22/get-value-from-initialize-file/</link>
      <pubDate>Sun, 22 Jun 2014 09:01:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2014/06/22/get-value-from-initialize-file/</guid>
      <description>Windows7環境でバッチファイルからiniファイルを読込んで値を取得する方法 対応方法 バッチファイルから ini ファイルを読込む場合VBSを使用することで実現する。
具体的には、バッチファイルから VBS を呼び出して ini ファイルより値を取得して
VBS から戻り値を受け取り、実現する。
取得するiniファイルの中身 [sample.ini]
&amp;lt;設定値&amp;gt;*****************************************************&#39;&amp;lt;コメント&amp;gt;####################################### [Path] WorkPath=c:\src\wk &#39;Work Folder Path  実際のコード [getProfileString.bat]
@echo off set iniFileName=sample.ini for /f &amp;quot;usebackq tokens=* delims=&amp;quot; %%A in (`call cscript //Nologo getProfileString.vbs &amp;quot;%iniFileName%&amp;quot; Path WorkPath`) do set ret=%%A echo &amp;quot;%ret%&amp;quot; pause exit  [getProfileString.vbs]
Option Explicit rem /***************************************************************** rem * getProfileString.vbs iniFileName, sectionName, entryName rem * rem * 引数 rem * iniFileName : 設定ファイル名(フルパス) rem * sectionName : セクション名 rem * entryName : エントリー名 rem * 動作 rem * 引数に指定された設定ファイルより指定した rem * 「セクション」,「エントリー」に対応する設定値を返す。 rem * 先頭がカンマの場合はコメント行として扱う。 rem * 行の途中でカンマがある場合は直前までの文字列(右空白除去)を rem * 設定値として扱う。 rem * 戻り値 rem * 設定値(見つからなかった場合およびエラーの場合は空を返す。) rem *****************************************************************/ Dim ret Dim fs Dim readLineObj Dim searchFlg Dim buffer rem ファイルシステムアクセス用 Set fs = CreateObject( &amp;quot;Scripting.</description>
    </item>
    
    <item>
      <title>Windows7環境でバッチファイルからメッセージボックスを表示して押下されたボタンによって処理を切り替える</title>
      <link>https://kkawazoe.github.io/blog/2014/02/09/switch-processing-by-message-box/</link>
      <pubDate>Sun, 09 Feb 2014 18:46:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2014/02/09/switch-processing-by-message-box/</guid>
      <description>Windows7環境でバッチファイルからメッセージボックスを表示して押下されたボタンによって処理を切り替える方法 対応方法 バッチファイルからメッセージボックスを表示する場合バッチファイル単体では実現不可のため VBS を使用して実現する。
※具体的には、バッチファイルから VBS を呼び出してメッセージボックスを表示し、 VBS から戻り値を受け取り、処理を切り替える
実際のコード [DispMsgBox.bat]
@echo off rem メッセージボックスの表示 set msg=&amp;quot;メッセージボックスのテスト [\n] で改行します。&amp;quot; set title=&amp;quot;メッセージボックステスト&amp;quot; for /f &amp;quot;usebackq tokens=* delims=&amp;quot; %%A in (`call cscript //Nologo msgbox.vbs %msg% &amp;quot;%title%&amp;quot;`) do set ret=%%A echo %ret% pause exit  [msgbox.vbs]
Option Explicit rem /******************************************************* rem * msgbox.vbs msg [,title] rem * rem * 引数 rem * msg :表示するメッセージ rem * title :メッセージボックスのタイトル rem * 動作 rem * メッセージボックスを表示し、クリックされたボタンに rem * 対応する数値を返す。 rem * msg中の 「\n」という文字列は改行に変換する。 rem * 戻り値 rem * 0:[はい]/1:[いいえ] rem ********************************************************/ Dim args Dim arg(99) Dim value Dim cnt Dim retBtn Dim ret Dim eLevel rem 引数を変数にセット Set args = WScript.</description>
    </item>
    
  </channel>
</rss>