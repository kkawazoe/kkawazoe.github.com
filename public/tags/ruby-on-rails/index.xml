<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Rails on Note To Self ~One Step At A Time~</title>
    <link>https://kkawazoe.github.io/tags/ruby-on-rails/</link>
    <description>Recent content in Ruby on Rails on Note To Self ~One Step At A Time~</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sun, 17 May 2020 11:56:06 +0900</lastBuildDate>
    
	<atom:link href="https://kkawazoe.github.io/tags/ruby-on-rails/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rails で静的エラーページにレイアウトを適用する</title>
      <link>https://kkawazoe.github.io/blog/2020/05/17/apply-layout-to-static-error-page-with-rails/</link>
      <pubDate>Sun, 17 May 2020 11:56:06 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2020/05/17/apply-layout-to-static-error-page-with-rails/</guid>
      <description>環境  rails: rails 5.2.3  方法 Gem Errgent を使用して実現する
確認 config/environments/development.rb の以下を編集して確認する
config.consider_all_requests_local = false  実際のコード 例. エラーコード 404, 500 ロケール毎に静的エラーページを生成する
=&amp;gt; 生成されるファイル 例. public/%404.ja.html
desc &#39;Generate Error Pages&#39; task generate_error_pages: :environment do I18n.available_locales.each do |locale| I18n.locale = locale renderer = Errgent::Renderer.new( codes: [404, 500] layout: &#39;layouts/error_page&#39;, # where to find your layout by default output: &amp;quot;public/%s.#{locale}.html&amp;quot; # where to put generated pages by default, %s is the replacement for @code ) renderer.</description>
    </item>
    
    <item>
      <title>Docker Compose 上で Rails の秘匿情報を扱う</title>
      <link>https://kkawazoe.github.io/blog/2020/04/04/handle-credentials-info-of-rails-on-docker-compose/</link>
      <pubDate>Sat, 04 Apr 2020 10:46:01 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2020/04/04/handle-credentials-info-of-rails-on-docker-compose/</guid>
      <description> 環境  rails: rails 5.2.3  方法 前提  credentials.yml.enc を使用 docker 上での rails のコンテナ名: rails  確認 例. production 環境の秘匿情報を確認する
以下のコマンドを使用して確認する
$ docker-compose exec rails bash #=&amp;gt; コンテナが起動していない場合は docker-compose run rails bash $ EDITOR=&amp;quot;vim&amp;quot; bin/rails env_credentials:show -e production  編集 例. production 環境の秘匿情報を編集する
以下のコマンドを使用して確認する
$ docker-compose exec rails bash #=&amp;gt; コンテナが起動していない場合は docker-compose run rails bash $ EDITOR=&amp;quot;vim&amp;quot; bin/rails env_credentials:edit -e production  </description>
    </item>
    
    <item>
      <title>RSpec 内で動的に I18n の訳文を追加する</title>
      <link>https://kkawazoe.github.io/blog/2019/09/14/how-to-handle-tokens-in-rails/</link>
      <pubDate>Sat, 14 Sep 2019 09:56:37 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/09/14/how-to-handle-tokens-in-rails/</guid>
      <description> 環境  rails: rails 5.2.3  方法 I18n::Backend::Base#store_translations を使用する
I18n.backend.store_translations( :ja, test: &#39;テスト&#39; ) I18n.t(:test) #=&amp;gt; テスト  </description>
    </item>
    
    <item>
      <title>Rails でトークンを扱う方法</title>
      <link>https://kkawazoe.github.io/blog/2019/07/21/how-to-handle-tokens-in-rails/</link>
      <pubDate>Sun, 21 Jul 2019 18:12:58 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/07/21/how-to-handle-tokens-in-rails/</guid>
      <description>環境  rails: rails 5.2.3  方法 トークンの認証 トークンの認証については authenticate_with_http_token を使用する
以下が対象
 Authorization: Token XXX Authorization: Bearer XXX  class ApplicationController &amp;lt; ActionController::API # authenticate_with_http_token を使用するために必要 include ActionController::HttpAuthentication::Token::ControllerMethods before_action :authenticate def authenticate authenticate_with_http_token do |token, options| # 認証処理 および レスポンスが必要な場合は記述 end end end  トークンの取得 トークンの取得については token_and_options を使用する
以下が対象
 Authorization: Token XXX Authorization: Bearer XXX  class ApplicationController &amp;lt; ActionController::API # token_and_options を使用するために必要 include ActionController::HttpAuthentication::Token def access_token token_and_options(request)&amp;amp;.</description>
    </item>
    
    <item>
      <title>Vue.js ＋ Rails で RailsHelper と組み合わせた場合の記述方法</title>
      <link>https://kkawazoe.github.io/blog/2019/04/17/description_rails_helper_with_vuejs_and_rails/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/17/description_rails_helper_with_vuejs_and_rails/</guid>
      <description> 経緯 Vue.js を Rails のフロントとして使用した場合に RailsHelper と組み合わせると若干記述が複雑になったため備忘録として残しておく
実際のコード(html テンプレートエンジンは slim を使用)  通常 a タグ
a.btn.home href=&amp;quot;#{root_path}&amp;quot; @touchStart=&amp;quot;onTouchStartForBtn&amp;quot; @touchEnd=&amp;quot;onTouchEndForBtn&amp;quot; @touchmove=&amp;quot;onTouchMoveForBtn&amp;quot;  RailsHelper での a タグ
Vue.js の bind を&amp;rsquo;(シングルコート)で括る
= link_to national_rankings_path, class: &#39;btn ranking&#39;, &#39;@touchStart&#39;: &amp;quot;onTouchStartForBtn&amp;quot;, &#39;@touchEnd&#39;: &amp;quot;onTouchEndForBtn&amp;quot;, &#39;@touchmove&#39;: &amp;quot;onTouchMoveForBtn&amp;quot;   </description>
    </item>
    
    <item>
      <title>Ruby on Rails の Gem CarrierWave でアップロードする際に画像をリサイズする</title>
      <link>https://kkawazoe.github.io/blog/2019/04/11/resize-when-uploading-for-carrierwave-with-rails/</link>
      <pubDate>Thu, 11 Apr 2019 13:49:45 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/11/resize-when-uploading-for-carrierwave-with-rails/</guid>
      <description> Carrier Wave について ファイルアップロード機能を提供する Gem github
実際のコード [app/uploaders/my_uploader.rb]
尚、アスペクト比固定で width および height のみ指定する場合は nil を指定する
heightのみ指定 class MyUploader &amp;lt; CarrierWave::Uploader::Base include CarrierWave::MiniMagick process resize_to_limit: [1200, nil] end  widthのみ指定 class MyUploader &amp;lt; CarrierWave::Uploader::Base include CarrierWave::MiniMagick process resize_to_limit: [1200, nil] end  resize_to_fit と resize_to_limit の違いについて  resize_to_fit 画像が指定したサイズ未満の時 =&amp;gt; アスペクト比を維持しながら指定したサイズまで拡大する resize_to_limit 画像が指定したサイズ未満の時 =&amp;gt; なにもしない  </description>
    </item>
    
    <item>
      <title>Ruby on Rails の Gem Gretel で項目の前に画像を置く</title>
      <link>https://kkawazoe.github.io/blog/2019/04/09/set-image-before-gretel-with-rails/</link>
      <pubDate>Tue, 09 Apr 2019 17:36:18 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/09/set-image-before-gretel-with-rails/</guid>
      <description> Gretel について パンくずリストを表示する Gem
github
実際のコード [config/breadcrumbs.rb]
# articles#index crumb :articles do |article| icon = article.flg ? image_tag(&amp;quot;表示したい画像&amp;quot;) : &amp;quot;&amp;quot; link icon + {表示文字}, {URL} parent :parent_articles, article.category end  </description>
    </item>
    
    <item>
      <title>Windows10 に Ruby1.8.7 ＋ Rails2.3.18 を構築する</title>
      <link>https://kkawazoe.github.io/blog/2019/04/07/build-to-rails2-and-ruby1-with-windows10/</link>
      <pubDate>Sun, 07 Apr 2019 04:24:08 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/07/build-to-rails2-and-ruby1-with-windows10/</guid>
      <description>経緯 仕事で必要となり表題の環境を準備することになった
苦労したためその際の手順およびハマった点等を備忘録として残しておく
構築環境  ruby: ruby 1.8.7 rails: rails 2.3.18  手順  Ruby Installer で Ruby(1.8.7 p-374) および DevKit(DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe) をダウンロードする Ruby をインストールする(オプションで環境変数パスへの登録を有効にする) DevKit を展開する。(自己解凍形式の圧縮ファイルなので、実行して適当なところに展開する)
3-1. コマンドプロンプトで展開した場所に移動し以下のコマンドを入力する
ruby dk.rb init ruby dk.rb install  rubygems-update のバージョンをダウングレードする 4-1. 以下のコマンドを入力する
gem update --system 1.3.7  ※以下のエラーが起きる場合はこのサイトを参考に手動で rubygems-update をダウングレードする
$ gem update --system ERROR: While executing gem ... (Gem::RemoteFetcher::FetchError) SSL_connect returned=1 errno=0 state=SSLv2/v3 read server hello A: tlsv1 alert protocol version (https://rubygems.</description>
    </item>
    
    <item>
      <title>Rails の order by で自分を優先的に取得する(MySql 限定)</title>
      <link>https://kkawazoe.github.io/blog/2019/02/25/order-by-prefer-yourself-with-rails/</link>
      <pubDate>Mon, 25 Feb 2019 16:50:14 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/25/order-by-prefer-yourself-with-rails/</guid>
      <description>確認環境  ruby: ruby 2.5.3 rails: rails 5.2.2  方法  Mysqlの FIELD 関数を使用する。※FIELD 関数の結果で ORDER BY する
 例. レコードを order 昇順, user_id 昇順で並び替える場合(同じ順位の場合は自分を優先)   order(:order, [&amp;quot;field(user_id , #{current_user.id}) desc&amp;quot;], :user_id)  ※ ポイントとしては第２ソートキーの前に ORDER BY FIELD を使用すること。 また、ORDER BY FIELD で指定した分に対して desc を指定すること。 ( desc を指定しないと自分以外が優先的に並び替えられてしまう)</description>
    </item>
    
    <item>
      <title>Rails で階層構造になっているテーブルに自分自身への関連を設定する</title>
      <link>https://kkawazoe.github.io/blog/2019/02/21/set-self-association-with-rails/</link>
      <pubDate>Thu, 21 Feb 2019 18:10:43 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/21/set-self-association-with-rails/</guid>
      <description>テーブル構成例 [Nodesテーブル] 最上位のノード以外は親ノードを持っている
   id name parent_id     1 parrent_node null   2 child_node_1 1   3 child_node_2 1   4 child_node_1_1 2   5 child_node_1_2 2   6 child_node_2_1 3   7 child_node_2_2 3    確認環境  ruby: ruby 2.5.3 rails: rails 5.2.2  実際のコード [app/models/node.rb]
class Node &amp;lt; ApplicationRecord has_many :children, class_name: &amp;quot;Node&amp;quot;, foreign_key: &amp;quot;parrent_id&amp;quot; belongs_to :parrent, class_name: &amp;quot;Node&amp;quot;, optional: true # rails5 から default が require になっているため　`optional: true` を指定しないと `nil` での保存が不可 end  [db/migrate/{datetime}_create_nodes.</description>
    </item>
    
  </channel>
</rss>