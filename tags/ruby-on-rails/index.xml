<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Rails on Note To Self ~One Step At A Time~</title>
    <link>https://kkawazoe.github.io/tags/ruby-on-rails/</link>
    <description>Recent content in Ruby on Rails on Note To Self ~One Step At A Time~</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Wed, 12 Apr 2023 13:00:00 +0900</lastBuildDate><atom:link href="https://kkawazoe.github.io/tags/ruby-on-rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>rails で本番環境で画像が表示されない場合に注意すること(jpeg)</title>
      <link>https://kkawazoe.github.io/blog/2023/04/12/not-displayed-image-jpeg-for-production-with-rails/</link>
      <pubDate>Wed, 12 Apr 2023 13:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2023/04/12/not-displayed-image-jpeg-for-production-with-rails/</guid>
      <description>rails で本番環境で画像が表示されない場合に注意することを備忘録として残しておく
※表示されない画像が jpeg の場合
環境  ruby: 3.0.5 rails: 6.1.7  事象について 開発環境では表示されていた画像が本番環境にデプロイしてみると画像が表示されない事象が発生した。
※scss の background-image の image-url かと思ったが view ファイルの image_tag で発生していた
[sass-rails](&amp;lt;https://github.com/rails/sass-rails)
原因について assets-precompile 時に xxx.jpeg =&amp;gt; xxx.jpg に統一されるため、 Not Found 扱いになるらしい
上記のため、 image_tag で指定している拡張子を jpg に指定してあげる必要がある
※可能であれば、画像自体の拡張子を jpg に統一してあげると手戻りがないと思われる</description>
    </item>
    
    <item>
      <title>rails で ActiveModelSerializers から PankoSerializer に移行する</title>
      <link>https://kkawazoe.github.io/blog/2023/02/11/migration-active-model-serializers-to-panko-serializer-with-rails/</link>
      <pubDate>Sat, 11 Feb 2023 13:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2023/02/11/migration-active-model-serializers-to-panko-serializer-with-rails/</guid>
      <description>rails で ActiveModelSerializers から PankoSerializer に移行する手順を備忘録として残しておく
※今回のは、単純な serializer のみのため、panko_serializer について検証が必要
環境  ruby: 3.0.5 rails: 6.1.7 active_model_serializers: 0.10.13 panko_serializer: 0.7.9  実際のソース [Gemfile]
- gem &amp;#39;active_model_serializers&amp;#39; + gem &amp;#39;panko_serializer&amp;#39; [serializer]
継承するクラスを変更
- class Book::ListSerializer &amp;lt; ActiveModel::Serializer + class Book::ListSerializer &amp;lt; Panko::Serializer attributes( :id, :title, :summary, :restrict, :to_favorite_registered_count ) def restrict Book.restricts[object.restrict] end end [controller]
each_serializer を使用する場合
def index @books = Book.all - render json: @books, each_serializer: Book::ListSerializer + render json: Panko::ArraySerializer.</description>
    </item>
    
    <item>
      <title>rails で遷移元の URL を取得してリダイレクトする方法</title>
      <link>https://kkawazoe.github.io/blog/2023/02/08/how-to-redirect-to-get-transition-url-with-rails/</link>
      <pubDate>Wed, 08 Feb 2023 09:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2023/02/08/how-to-redirect-to-get-transition-url-with-rails/</guid>
      <description>rails で遷移元の URL を取得してリダイレクトする方法を備忘録として残しておく
環境  ruby: 2.7.6 rails: 5.2.8.1  仕様  お気に入り登録のようにDB更新を行いたいが、画面遷移はさせたくない
(遷移元が複数ある かつ ユーザビリティ的に良くない)ため 画面遷移させないようにしたい  実際のソース controller の該当アクションを以下のようにする
class FavoritesController &amp;lt; ApplicationController def create redirect_back fallback_location: root_path end end # 以下も上手くいくが referer が取得できなかった場合を考えると上が良さそう class FavoritesController &amp;lt; ApplicationController def create redirect_to request.referer end end </description>
    </item>
    
    <item>
      <title>rails で複合項目で一意性チェックを行う方法</title>
      <link>https://kkawazoe.github.io/blog/2023/02/03/how-to-validate-unique-for-multi-columns-with-rails/</link>
      <pubDate>Fri, 03 Feb 2023 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2023/02/03/how-to-validate-unique-for-multi-columns-with-rails/</guid>
      <description>rails で複合項目で一意性チェックを行う方法を備忘録として残しておく
環境  ruby: 3.0.5 rails: 6.1.7  実際のコード [ER 図]
 [model]
uniqueness + scope で validate を行う
class Book has_many :book_categories, dependent: :destroy has_many :categories, through: :book_categories end class BookCategory belongs_to :book belongs_to :category # book_id + category_id で一意かどうかをチェック validates :book_id, uniqueness: { scope: :category_id } end class Category has_many :book_categories has_many :books, through: :book_categories end [migrate]
unique index を追加する
class CreateBookCategoriess &amp;lt; ActiveRecord::Migration[6.1] def change create_table :book_categories do |t| t.</description>
    </item>
    
    <item>
      <title>rails で画面表示時に小数部分の0を省略して表示する方法</title>
      <link>https://kkawazoe.github.io/blog/2023/01/12/how-to-omit-0s-in-decimals-when-displaying-on-screen-in-rails/</link>
      <pubDate>Thu, 12 Jan 2023 13:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2023/01/12/how-to-omit-0s-in-decimals-when-displaying-on-screen-in-rails/</guid>
      <description>rails で画面表示時に小数部分の0を省略して表示する方法を備忘録として残しておく
環境  ruby: 3.0.4 rails: 6.1.0  実際のコード number_to_human メソッドを使用する ※参考
※strip_insignidicant_zeros オプションのデフォルトが true のため
その他のヘルパーについてはNumberHelperを参照
# erb ファイルに記載する場合は ActiveSupport::NumberHelper. は省略可 ActiveSupport::NumberHelper.number_to_human(1.0) #=&amp;gt; &amp;#34;1&amp;#34; ActiveSupport::NumberHelper.number_to_human(1.5) #=&amp;gt; &amp;#34;1.5&amp;#34; ActiveSupport::NumberHelper.number_to_human(1.530) #=&amp;gt; &amp;#34;1.53&amp;#34; ActiveSupport::NumberHelper.number_to_human(1.5301) #=&amp;gt; &amp;#34;1.53&amp;#34; ActiveSupport::NumberHelper.number_to_human(&amp;#39;1.0&amp;#39;) #=&amp;gt; &amp;#34;1&amp;#34; ActiveSupport::NumberHelper.number_to_human(&amp;#39;1.5&amp;#39;) #=&amp;gt; &amp;#34;1.5&amp;#34; ActiveSupport::NumberHelper.number_to_human(&amp;#39;1.530&amp;#39;) #=&amp;gt; &amp;#34;1.53&amp;#34; ActiveSupport::NumberHelper.number_to_human(&amp;#39;1.5301&amp;#39;) #=&amp;gt; &amp;#34;1.53&amp;#34; ActiveSupport::NumberHelper.number_to_human(Date.parse(&amp;#39;2023-01-12&amp;#39;)) #=&amp;gt; Thu, 12 Jan 2023 ActiveSupport::NumberHelper.number_to_human(&amp;#39;2023-01-12&amp;#39;) #=&amp;gt; &amp;#34;2023-01-12&amp;#34; ActiveSupport::NumberHelper.number_to_human(&amp;#39;2023.01.12&amp;#39;) #=&amp;gt; &amp;#34;2023-01-12&amp;#34; ActiveSupport::NumberHelper.number_to_human(&amp;#39;2023.01.12&amp;#39;) #=&amp;gt; &amp;#34;2023.01.12&amp;#34; </description>
    </item>
    
    <item>
      <title>Gem でよく見る initializer で動作を変更する方法</title>
      <link>https://kkawazoe.github.io/blog/2023/01/11/how-to-change-behavior-with-initializer-often-seen-in-gem/</link>
      <pubDate>Wed, 11 Jan 2023 13:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2023/01/11/how-to-change-behavior-with-initializer-often-seen-in-gem/</guid>
      <description>Gem でよく見る initializer で動作を変更する方法を備忘録として残しておく
環境  ruby: 3.0.4  前提 以下のような構成になっている想定
lib ├── sample_gem │ └── configuration.rb └── sample_gem.rb spec ├── configration_spec.rb └── spec_helper.rb 実際のコード 以下のようなクラスを定義する
module SampleGem # gem のクラス名 class Configuration attr_accessor :sample_confime_name # config で使用する config 名 def initialize @sample_confime_name = false end end def self.configuration @configuration ||= Configuration.new end def self.configuration=(config) @configuration = config end # ``` # SampleGem.configure do |config| # config.sample_confime_name = false # end # ``` def self.</description>
    </item>
    
    <item>
      <title>Ransack でソートキーを複数指定する方法</title>
      <link>https://kkawazoe.github.io/blog/2022/12/27/how-to-assignment-multiple-sort-key-with-ransack/</link>
      <pubDate>Tue, 27 Dec 2022 13:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/12/27/how-to-assignment-multiple-sort-key-with-ransack/</guid>
      <description>Ransack でソートキーを複数指定する方法を備忘録として残しておく
環境  ruby: 3.0.4 rails: 6.1.0  実際のコード sort_link ヘルパーメソッドの第三引数に指定する
※その他の機能については参考を参照
# ソート順序 第1ソートキー: last_name, 第2ソートキー: first_name # 画面上のソートリンクをクリックする度に両方のキーの昇順、降順が入れ替わる &amp;lt;%= sort_link(@q, :last_name, %i(last_name first_name), &amp;#39;Last Name&amp;#39;) %&amp;gt; 第2ソートキーを常に昇順 or 降順固定にする場合は以下のようにする
&amp;lt;%= sort_link(@q, :last_name, [:last_name, &amp;#39;first_name asc&amp;#39;], &amp;#39;Last Name&amp;#39;) %&amp;gt; </description>
    </item>
    
    <item>
      <title>Rails で Active Record のデータを hash 形式に変換する方法</title>
      <link>https://kkawazoe.github.io/blog/2022/12/16/how-to-convert-active-record-to-hash-with-rails/</link>
      <pubDate>Fri, 16 Dec 2022 13:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/12/16/how-to-convert-active-record-to-hash-with-rails/</guid>
      <description>Rails で Active Record のデータを キーが id, 値が Active Record であるような Hash を作る方法を備忘録として残しておく
環境  ruby: 3.0.4 rails: 6.1.0  実際のコード index_by, inject, pluck + to_h メソッドのいずれかを使用する
前提 データの登録状態
   id book_id name     1 1 少年誌   2 1 青年誌   3 1 ビジネス   4 1 自己啓発    [Rails Console]
categories = Category.all.index_by(&amp;amp;:id) #=&amp;gt; { #=&amp;gt; 1=&amp;gt; #=&amp;gt; #&amp;lt;Category:0x0000562b92c5fcb0 #=&amp;gt; id: 1, #=&amp;gt; book_id: 1, #=&amp;gt; name: &amp;#34;少年誌&amp;#34;, #=&amp;gt; created_at: Wed, 24 Aug 2022 02:54:05.</description>
    </item>
    
    <item>
      <title>Rails における Enum について</title>
      <link>https://kkawazoe.github.io/blog/2022/12/02/about-enum-in-rails/</link>
      <pubDate>Fri, 02 Dec 2022 13:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/12/02/about-enum-in-rails/</guid>
      <description>Rails における Enum の挙動について調査した内容を備忘録として残しておく
環境  ruby: 2.7.6 rails: 5.2.8.1  実際のコード DB のカラムに対応する enum を定義した場合、自動的に scope が定義される
※Rails 6 では not_* の scope も自動的に定義される 参考
※Rails 7 では新しい構文が追加されたため、今後オプションの指定が従来のやり方だと非推奨になる可能性がある 参考
[モデル定義]
class Article &amp;lt; ApplicationRecord enum status: { draft: 0, # 下書き published: 1, # 公開中 closed: 2, # 掲載終了 }, _prefix: true end [Rails Console]
# enum 確認 Article.statuses #=&amp;gt; {&amp;#34;draft&amp;#34;=&amp;gt;0, &amp;#34;published&amp;#34;=&amp;gt;1, &amp;#34;closed&amp;#34;=&amp;gt;2} # scope Article.status_published #=&amp;gt; Article Load (7.</description>
    </item>
    
    <item>
      <title>rails console で オートコンプリートを無効にする方法</title>
      <link>https://kkawazoe.github.io/blog/2022/11/22/how-to-disable-auto-complete-with-rails-console/</link>
      <pubDate>Tue, 22 Nov 2022 13:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/11/22/how-to-disable-auto-complete-with-rails-console/</guid>
      <description>ruby 3.1 以降から irb でオートコンプリートが効くようになったがそれを無効にする方法を調査した
その結果を備忘録として残しておく
環境  ruby: 3.1.2 rails: 6.1.7  方法 カレントディレクトに .irbrc ファイルを作成して以下のように編集する
※他の設定値については 参考 を参照
IRB.conf[:USE_AUTOCOMPLETE] = false IRB.conf[:SAVE_HISTORY] = nil </description>
    </item>
    
    <item>
      <title>rails で中間テーブルをチェックボックス複数選択させて生成する方法</title>
      <link>https://kkawazoe.github.io/blog/2022/11/03/how-to-select-check-box-for-create-through-table-with-rails/</link>
      <pubDate>Thu, 03 Nov 2022 18:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/11/03/how-to-select-check-box-for-create-through-table-with-rails/</guid>
      <description>環境  ruby: 2.7.6 rails: 5.2.8.1  前提 rails で has_many の ids を使用して中間テーブルの関連付けを行う方法 の構成を参照
実際のコード erb で行うパターンと javascript で行うパターンはそれぞれ以下
※基本的には erb で行うと思うが、 erb の構成に対して値を受け渡す場合にjavascript のパターンを使用する
 erb のパターン  association を使用して as: :check_boxes オプションを指定する
&amp;lt;%= simple_form_for @book do |f| %&amp;gt; &amp;lt;%= f.association :categories, as: :check_boxes %&amp;gt; &amp;lt;%= f.button :submit %&amp;gt; &amp;lt;% end  %&amp;gt; javascript のパターン  最終的に生成される params が以下のようになるように組み立てる
[&amp;quot;&amp;quot;, 1, 3]
$(&amp;#39;form&amp;#39;).append( `&amp;lt;input type=&amp;#34;hidden&amp;#34; value=&amp;#34;&amp;#34; name=&amp;#34;book[category_ids][]&amp;#34; /&amp;gt;`, ); book.</description>
    </item>
    
    <item>
      <title>rails で has_many の ids を使用して中間テーブルの関連付けを行う方法</title>
      <link>https://kkawazoe.github.io/blog/2022/11/01/how-to-use-has-many-ids-for-create-relation-through-table-with-rails/</link>
      <pubDate>Tue, 01 Nov 2022 13:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/11/01/how-to-use-has-many-ids-for-create-relation-through-table-with-rails/</guid>
      <description>環境  ruby: 2.7.6 rails: 5.2.8.1  実際のコード [ER 図]
 [model]
class Book has_many :book_categories, dependent: :destroy has_many :categories, through: :book_categories end class BookCategory belongs_to :book belongs_to :category end class Category has_many :book_categories has_many :books, through: :book_categories end [controller]
category_ids を配列形式で許可する
def create @book = Book.save!(book_params) end private def book_params params.require(:book).permit( :title, category_ids: [] ) end </description>
    </item>
    
    <item>
      <title>ransack で scope を使用して link_to で表示する方法</title>
      <link>https://kkawazoe.github.io/blog/2022/11/01/how-to-user-scope-for-link-to-with-ransack/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/11/01/how-to-user-scope-for-link-to-with-ransack/</guid>
      <description>方法 ransackable_scopes メソッドを使用して実現する
環境  ruby: 2.7.6 rails: 5.2.8.1  実際のコード 例. User モデルの created_at カラムを基準として N 以内に作成されたユーザを取得する
[model]
# 引数なし scope :within_one_month, -&amp;gt; { where(&amp;#39;created_at &amp;gt;=&amp;#39;, Time.zone.now - 1.months) } # 引数あり scope :within_days, -&amp;gt; (day) { where(&amp;#39;created_at &amp;gt;=&amp;#39;, Time.zone.now - (day).days) } def self.ransackable_scopes(_auth_object = nil) %i(within_days within_one_month) end [erb]
&amp;lt;%= link_to( &amp;#34;1ヶ月以内に作成されたユーザ一覧&amp;#34;, users_path(@q, q: { within_one_month: true }), class: &amp;#34;btn btn-primary mr-5&amp;#34; ) link_to( &amp;#34;7日以内に作成されたユーザ一覧&amp;#34;, users_path(@q, q: { within_days: 7 }), class: &amp;#34;btn btn-primary mr-5&amp;#34; ) %&amp;gt; [controller]</description>
    </item>
    
    <item>
      <title>rspec で factory bot を使用して複数テストを作成すると同時に関連するクラスを紐づけて動的に生成する方法</title>
      <link>https://kkawazoe.github.io/blog/2022/10/30/how-to-dynamic-create-test-data-for-factory-bot-with-rspec/</link>
      <pubDate>Sun, 30 Oct 2022 21:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/10/30/how-to-dynamic-create-test-data-for-factory-bot-with-rspec/</guid>
      <description>方法 create_list と send メソッドを使用して実現する
環境  ruby: 2.7.6 rails: 5.2.8.1 rspec 3.7.0  実際のコード user のテストデータを3つ作成 かつ 関連する user_status のテストデータを紐付けおよびカラム status を動的に生成する
let(:user_status1) { UserStatus::Active } let(:user_status2) { UserStatus::Locked } let(:user_status3) { UserStatus::InActive } before do create_list(:user, 3).each.with_index(1) do |user, i| create( :user_status, user: user, status: send(&amp;#34;user_status#{i}&amp;#34;), ) end end rspec 5.2 以降であれば以下も可能 参考
let(:user_status1) { UserStatus::Active } let(:user_status2) { UserStatus::Locked } let(:user_status3) { UserStatus::InActive } before do create_list(:user, 3) do |user, i| create( :user_status, user: user, status: send(&amp;#34;user_status#{i + 1}&amp;#34;), ) end end </description>
    </item>
    
    <item>
      <title>rails で 巨大な csv ファイルをストリーム処理する方法</title>
      <link>https://kkawazoe.github.io/blog/2022/09/03/how-to-excute-stream-too-big-file-size-csv-with-rails/</link>
      <pubDate>Sat, 03 Sep 2022 21:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/09/03/how-to-excute-stream-too-big-file-size-csv-with-rails/</guid>
      <description>1 GB を超えるような csv ファイルを一度に読み込むとメモリエラーが発生する場合がある
さらに処理時間もすごくかかるため、ストリーム処理に変更などして処理の高速化した際の方法を備忘録として残しておく
方法 File#open メソッドと CSV#new メソッドを組み合わせて実現する
環境  ruby: 3.0.4 rails: 6.1.6.1  実際のコード csv ファイルの特定の文字列を置換する処理
前提 header 付の csv ファイル
リファクタリング前
class Converter def self.convert # 読み取り専用でファイルを開く read_only_file = File.open(&amp;#34;{ファイルパス}&amp;#34; , &amp;#34;r&amp;#34;) # 保存用バッファ buffer = read_only_file.read() # バッファの中身を変換 buffer.gsub!({置換対象文字列}, {置換文字列}) # ファイルを書き込みモードで開き直す file = File.open(&amp;#34;{ファイルパス}&amp;#34; , &amp;#34;w&amp;#34;) # 変更内容を出力する file.write(buffer) # close read_only_file.close() file.close() end end リファクタリング後
require &amp;#39;csv&amp;#39; require &amp;#39;fileutils&amp;#39; class Converter def self.</description>
    </item>
    
    <item>
      <title>rails で文字列置換を行う際に対応表で置換する方法</title>
      <link>https://kkawazoe.github.io/blog/2022/09/03/how-to-substring-map-with-rails/</link>
      <pubDate>Sat, 03 Sep 2022 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/09/03/how-to-substring-map-with-rails/</guid>
      <description>rails で文字列置換を行う際に対応表で置換する方法を備忘録として残しておく
方法 gsub メソッドに対して、第1引数に正規表現、第2引数に Hash を渡すことで実現する
環境  ruby: 3.0.4 rails: 6.1.6.1  実際のコード # 変換用の対応表 convert_map = { &amp;#39;a&amp;#39; =&amp;gt; &amp;#39;A&amp;#39;, &amp;#39;b&amp;#39; =&amp;gt; &amp;#39;B&amp;#39;, &amp;#39;d&amp;#39; =&amp;gt; &amp;#39;D&amp;#39; } #=&amp;gt; {&amp;#34;a&amp;#34;=&amp;gt;&amp;#34;A&amp;#34;, &amp;#34;b&amp;#34;=&amp;gt;&amp;#34;B&amp;#34;, &amp;#34;d&amp;#34;=&amp;gt;&amp;#34;D&amp;#34;} # 以下と同義 # &amp;#34;adcacbd&amp;#34;.gsub(/a|b|d/, { &amp;#39;a&amp;#39; =&amp;gt; &amp;#39;A&amp;#39;, &amp;#39;b&amp;#39; =&amp;gt; &amp;#39;B&amp;#39;, &amp;#39;d&amp;#39; =&amp;gt; &amp;#39;D&amp;#39; }) &amp;#34;adcacbd&amp;#34;.gsub(Regexp.new(&amp;#34;#{convert_map.keys.join(&amp;#39;|&amp;#39;)}&amp;#34;), convert_map) #=&amp;gt; &amp;#34;ADcAcBD&amp;#34; </description>
    </item>
    
    <item>
      <title>rails で別名がつけられているカラムを pluck で取得する方法</title>
      <link>https://kkawazoe.github.io/blog/2022/08/23/how-to-get-alias-column-pluck-method-with-rails/</link>
      <pubDate>Tue, 23 Aug 2022 22:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/08/23/how-to-get-alias-column-pluck-method-with-rails/</guid>
      <description>rails で別名がつけられているカラムを pluck で取得する方法を備忘録として残しておく
方法 シンボルでの指定ではなく、文字列で as 句含めて指定する
環境  rails: 6.1.6.1  実際のコード 例. Book と Category クラスの関係が 1 対 多 である場合
# Book クラス class Book &amp;lt; ApplicationRecord has_many :categories end # Category クラス class Category &amp;lt; ApplicationRecord belongs_to :book end # データ準備 book = Book.create!(name: &amp;#39;サンプル書籍&amp;#39;) book.categories &amp;lt;&amp;lt; Category.create(name: &amp;#39;ビジネス&amp;#39;) book.categories &amp;lt;&amp;lt; Category.create(name: &amp;#39;自己啓発&amp;#39;) # 別名を付与したカラムを取得 category_names = Book.joins(:categories) .select(:name, &amp;#39;categories.name as category_name&amp;#39;) .where(id: 1) .pluck(&amp;#39;categories.name as category_name&amp;#39;) # (1.</description>
    </item>
    
    <item>
      <title>rails で id 等の自動採番項目の不整合を修正する方法(PostgreSQL)</title>
      <link>https://kkawazoe.github.io/blog/2022/05/24/how-to-auto-seq-for-postgre-sql-with-rails/</link>
      <pubDate>Tue, 24 May 2022 09:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/05/24/how-to-auto-seq-for-postgre-sql-with-rails/</guid>
      <description>rails で 自動採番項目の不整合を修正する方法を備忘録として残しておく
方法 reset_pk_sequence! を使用する
環境  rails: 6.1.4  実際のコード ActiveRecord::Base.connection.tables.each do |table_name| ActiveRecord::Base.connection.reset_pk_sequence!(table_name) end </description>
    </item>
    
    <item>
      <title>rails でメソッドの定義場所を表示する方法</title>
      <link>https://kkawazoe.github.io/blog/2022/02/26/how-to-source-location-rails/</link>
      <pubDate>Sat, 26 Feb 2022 01:28:11 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/02/26/how-to-source-location-rails/</guid>
      <description>rails で エラーが出てどのクラスのメソッドが呼ばれているかを確認する方法を備忘録として残しておく
方法 XXX.method(:{method}).source_location を使用する
例. ActiveRecord::Base.method(:transaction).source_location
環境  ruby: 2.6.10 rails: 5.2.3  実際のコード ActiveRecord::Base.method(:transaction).source_location =&amp;gt; [&amp;#34;/usr/local/bundle/ruby/2.6.0/gems/activerecord-5.2.3/lib/active_record/transactions.rb&amp;#34;, 211] </description>
    </item>
    
    <item>
      <title>特定の RSpec のみ実行されるようにする方法</title>
      <link>https://kkawazoe.github.io/blog/2021/05/14/how-to-execute-specified-rspec/</link>
      <pubDate>Fri, 14 May 2021 09:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2021/05/14/how-to-execute-specified-rspec/</guid>
      <description>個別カスタマイズ等で追加した RSpec のみ実行させる必要があり、調査した結果を備忘録として残しておく
方法 tag オプション を使用して実現する
環境  rspec: rspec 3.8  実際のコード # # :key =&amp;gt; &amp;#39;value&amp;#39; 形式でタグを付与可能 # Group(describe, context, it) に対して付与可能 # RSpec.describe &amp;#34;group with tagged specs&amp;#34; do it &amp;#34;example I&amp;#39;m working now&amp;#34;, focus: true do; end it &amp;#34;special example with string&amp;#34;, type: &amp;#39;special&amp;#39; do; end it &amp;#34;special example with symbol&amp;#34;, type: :special do; end it &amp;#34;slow example&amp;#34;, skip: true do; end it &amp;#34;ordinary example&amp;#34;, speed: &amp;#39;slow&amp;#39; do; end end 実行方法 例.</description>
    </item>
    
    <item>
      <title>Hash の Key が Symbol または String どちらでも取得可能にする方法</title>
      <link>https://kkawazoe.github.io/blog/2021/05/12/how-to-either-obtained-value-symbol-or-string-key-of-hash/</link>
      <pubDate>Wed, 12 May 2021 09:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2021/05/12/how-to-either-obtained-value-symbol-or-string-key-of-hash/</guid>
      <description>HashWithIndifferentAccess に変換して実現する
環境  rails: rails 6.0.3.6  実際のコード rgb = { black: &amp;#39;#0000&amp;#39;, white: &amp;#39;#FFFFFF&amp;#39; }.with_indifferent_access rgb[:black] # =&amp;gt; &amp;#34;#0000&amp;#34; rgb[&amp;#39;black&amp;#39;] # =&amp;gt; &amp;#34;#0000&amp;#34; rgb[:&amp;#39;black&amp;#39;] # =&amp;gt; &amp;#34;#0000&amp;#34; rgb[:white] # =&amp;gt; &amp;#34;#FFFFFF&amp;#34; rgb[&amp;#39;white&amp;#39;] # =&amp;gt; &amp;#34;#FFFFFF&amp;#34; rgb[:&amp;#39;white&amp;#39;] # =&amp;gt; &amp;#34;#FFFFFF&amp;#34; </description>
    </item>
    
    <item>
      <title>nkf を使用して UTF-8 を CP932 に文字コード変換する方法</title>
      <link>https://kkawazoe.github.io/blog/2021/04/11/convert-string-code-utf8-to-cp932-with-nkf/</link>
      <pubDate>Sun, 11 Apr 2021 09:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2021/04/11/convert-string-code-utf8-to-cp932-with-nkf/</guid>
      <description>CSV 出力処理実装時に文字コード変換を行う必要があり対応を行った
その対処方法を備忘録として残しておく
環境  rails: rails 6.0.3.6  仕様 UTF-8 の文字列を CP932 に変換する ※変換不可能な文字は&#39;〓&#39;に変換する
実際のコード str = &amp;#39;〜変換不可能文字を含む文字列〜&amp;#39; NKF.nkf(&amp;#39;--ic=UTF-8 --oc=CP932 --fb-subchar=0x3013&amp;#39;, str).encode(&amp;#39;UTF-8&amp;#39;, &amp;#39;CP932&amp;#39;) #=&amp;gt; &amp;#34;〓変換不可能文字を含む文字列〓&amp;#34; </description>
    </item>
    
    <item>
      <title>Gem rubyXL を使用した際に起こったエラーおよび対応について</title>
      <link>https://kkawazoe.github.io/blog/2020/10/06/about-error-with-rubyxl/</link>
      <pubDate>Tue, 06 Oct 2020 09:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2020/10/06/about-error-with-rubyxl/</guid>
      <description>Gem rubyXL を使用している際に起こったエラーとその対処方法を備忘録として残しておく
環境  rails: rails 5.2.2  rubyXL について 拡張子「xlsx」を読み書き可能なライブラリ
使用感としてはテンプレートとなる Excel に対して読み書きする場合には
問題なく使用可能
但し、テンプレートに数式やグラフが含まれている場合に行などを
追加した場合に出力された Excel ファイルが破損して起動不可になる場合が
あるため注意が必要
rubyXL 発生した障害とその対応  テキストの折り返しがsheet.add_cellではできない  sheet.add_cell(col, row, &#39;text&#39;).change_text_wrap によって実装可能
テキストを折り返して表示してくれるようになる
change_contents が使えない  version 3.4.0 以降は convenience_methods を呼び出さないと利用不可
# require が必要なメソッド require &amp;#39;rubyXL/convenience_methods/cell&amp;#39; require &amp;#39;rubyXL/convenience_methods/color&amp;#39; require &amp;#39;rubyXL/convenience_methods/font&amp;#39; require &amp;#39;rubyXL/convenience_methods/workbook&amp;#39; require &amp;#39;rubyXL/convenience_methods/worksheet&amp;#39; もしくは以下で全て使用可
require &amp;#39;rubyXL/convenience_methods&amp;#39; シートのコピーができない  Marshal.load なども試してみたが、上手くいかなかったので以下を参考にして対応
参考サイト
シートコピー後、コピーしたシートを編集したら他のシートの内容も一緒に変わってしまう  change_contents の仕様と上記のシートコピーによって生じた現象
 ① シートの書式等をコピー ② change_contents で書式設定を保持したまま内容を変更 ③ 該当するコピーシートすべての内容が書き換わる という動作をしている</description>
    </item>
    
    <item>
      <title>Rails で静的エラーページにレイアウトを適用する</title>
      <link>https://kkawazoe.github.io/blog/2020/05/17/apply-layout-to-static-error-page-with-rails/</link>
      <pubDate>Sun, 17 May 2020 11:56:06 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2020/05/17/apply-layout-to-static-error-page-with-rails/</guid>
      <description>環境  rails: rails 5.2.3  方法 Gem Errgent を使用して実現する
確認 config/environments/development.rb の以下を編集して確認する
config.consider_all_requests_local = false 実際のコード 例. エラーコード 404, 500 ロケール毎に静的エラーページを生成する
=&amp;gt; 生成されるファイル 例. public/404.ja.html
desc &amp;#39;Generate Error Pages&amp;#39; task generate_error_pages: :environment do I18n.available_locales.each do |locale| I18n.locale = locale renderer = Errgent::Renderer.new( codes: [404, 500] layout: &amp;#39;layouts/error_page&amp;#39;, # where to find your layout by default output: &amp;#34;public/%s.#{locale}.html&amp;#34; # where to put generated pages by default, %s is the replacement for @code ) renderer.</description>
    </item>
    
    <item>
      <title>Docker Compose 上で Rails の秘匿情報を扱う</title>
      <link>https://kkawazoe.github.io/blog/2020/04/04/handle-credentials-info-of-rails-on-docker-compose/</link>
      <pubDate>Sat, 04 Apr 2020 10:46:01 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2020/04/04/handle-credentials-info-of-rails-on-docker-compose/</guid>
      <description>環境  rails: rails 5.2.3  方法 前提  credentials.yml.enc を使用 docker 上での rails のコンテナ名: rails  確認 例. production 環境の秘匿情報を確認する
以下のコマンドを使用して確認する
$ docker-compose exec rails bash #=&amp;gt; コンテナが起動していない場合は docker-compose run rails bash $ EDITOR=&amp;#34;vim&amp;#34; bin/rails env_credentials:show -e production 編集 例. production 環境の秘匿情報を編集する
以下のコマンドを使用して確認する
$ docker-compose exec rails bash #=&amp;gt; コンテナが起動していない場合は docker-compose run rails bash $ EDITOR=&amp;#34;vim&amp;#34; bin/rails env_credentials:edit -e production </description>
    </item>
    
    <item>
      <title>RSpec 内で動的に I18n の訳文を追加する</title>
      <link>https://kkawazoe.github.io/blog/2019/09/14/dynamic-translate-for-i18n-with-rspec/</link>
      <pubDate>Sat, 14 Sep 2019 09:56:37 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/09/14/dynamic-translate-for-i18n-with-rspec/</guid>
      <description>環境  rails: rails 5.2.3  方法 I18n::Backend::Base#store_translations を使用する
I18n.backend.store_translations( :ja, test: &amp;#39;テスト&amp;#39; ) I18n.t(:test) #=&amp;gt; テスト </description>
    </item>
    
    <item>
      <title>Rails でトークンを扱う方法</title>
      <link>https://kkawazoe.github.io/blog/2019/07/21/how-to-handle-tokens-in-rails/</link>
      <pubDate>Sun, 21 Jul 2019 18:12:58 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/07/21/how-to-handle-tokens-in-rails/</guid>
      <description>環境  rails: rails 5.2.3  方法 トークンの認証 トークンの認証については authenticate_with_http_token を使用する
以下が対象
 Authorization: Token XXX Authorization: Bearer XXX  class ApplicationController &amp;lt; ActionController::API # authenticate_with_http_token を使用するために必要 include ActionController::HttpAuthentication::Token::ControllerMethods before_action :authenticate def authenticate authenticate_with_http_token do |token, options| # 認証処理 および レスポンスが必要な場合は記述 end end end トークンの取得 トークンの取得については token_and_options を使用する
以下が対象
 Authorization: Token XXX Authorization: Bearer XXX  class ApplicationController &amp;lt; ActionController::API # token_and_options を使用するために必要 include ActionController::HttpAuthentication::Token def access_token token_and_options(request)&amp;amp;.first end end </description>
    </item>
    
    <item>
      <title>Vue.js ＋ Rails で RailsHelper と組み合わせた場合の記述方法</title>
      <link>https://kkawazoe.github.io/blog/2019/04/17/description-rails-helper-with-vuejs-and-rails/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/17/description-rails-helper-with-vuejs-and-rails/</guid>
      <description>経緯 Vue.js を Rails のフロントとして使用した場合に RailsHelper と組み合わせると若干記述が複雑になったため備忘録として残しておく
実際のコード(html テンプレートエンジンは slim を使用)  通常 a タグ  a.btn.home href=&amp;#34;#{root_path}&amp;#34; @touchStart=&amp;#34;onTouchStartForBtn&amp;#34; @touchEnd=&amp;#34;onTouchEndForBtn&amp;#34; @touchmove=&amp;#34;onTouchMoveForBtn&amp;#34;  RailsHelper での a タグ  Vue.js の bind を&#39;(シングルコート)で括る
= link_to national_rankings_path, class: &amp;#39;btn ranking&amp;#39;, &amp;#39;@touchStart&amp;#39;: &amp;#34;onTouchStartForBtn&amp;#34;, &amp;#39;@touchEnd&amp;#39;: &amp;#34;onTouchEndForBtn&amp;#34;, &amp;#39;@touchmove&amp;#39;: &amp;#34;onTouchMoveForBtn&amp;#34; </description>
    </item>
    
    <item>
      <title>Ruby on Rails の Gem CarrierWave でアップロードする際に画像をリサイズする</title>
      <link>https://kkawazoe.github.io/blog/2019/04/11/resize-when-uploading-for-carrierwave-with-rails/</link>
      <pubDate>Thu, 11 Apr 2019 13:49:45 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/11/resize-when-uploading-for-carrierwave-with-rails/</guid>
      <description>Carrier Wave について ファイルアップロード機能を提供する Gem github
実際のコード 尚、アスペクト比固定で width および height のみ指定する場合は nil を指定する
heightのみ指定 class MyUploader &amp;lt; CarrierWave::Uploader::Base include CarrierWave::MiniMagick process resize_to_limit: [1200, nil] end widthのみ指定 class MyUploader &amp;lt; CarrierWave::Uploader::Base include CarrierWave::MiniMagick process resize_to_limit: [1200, nil] end resize_to_fit と resize_to_limit の違いについて  resize_to_fit 画像が指定したサイズ未満の時
=&amp;gt; アスペクト比を維持しながら指定したサイズまで拡大する resize_to_limit 画像が指定したサイズ未満の時
=&amp;gt; なにもしない  </description>
    </item>
    
    <item>
      <title>Ruby on Rails の Gem Gretel で項目の前に画像を置く</title>
      <link>https://kkawazoe.github.io/blog/2019/04/09/set-image-before-gretel-with-rails/</link>
      <pubDate>Tue, 09 Apr 2019 17:36:18 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/09/set-image-before-gretel-with-rails/</guid>
      <description>Gretel について パンくずリストを表示する Gem
github
実際のコード # articles#index crumb :articles do |article| icon = article.flg ? image_tag(&amp;#34;表示したい画像&amp;#34;) : &amp;#34;&amp;#34; link icon + {表示文字}, {URL} parent :parent_articles, article.category end </description>
    </item>
    
    <item>
      <title>Windows10 に Ruby1.8.7 ＋ Rails2.3.18 を構築する</title>
      <link>https://kkawazoe.github.io/blog/2019/04/07/build-to-rails2-and-ruby1-with-windows10/</link>
      <pubDate>Sun, 07 Apr 2019 04:24:08 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/07/build-to-rails2-and-ruby1-with-windows10/</guid>
      <description>経緯 仕事で必要となり表題の環境を準備することになった 苦労したためその際の手順およびハマった点等を備忘録として残しておく
構築環境  ruby: ruby 1.8.7 rails: rails 2.3.18  手順  Ruby Installer で Ruby(1.8.7 p-374) および DevKit(DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe) をダウンロードする Ruby をインストールする(オプションで環境変数パスへの登録を有効にする) DevKit を展開する(自己解凍形式の圧縮ファイルなので、実行して適当なところに展開する)   3-1. コマンドプロンプトで展開した場所に移動し以下のコマンドを入力する  ruby dk.rb init ruby dk.rb install rubygems-update のバージョンをダウングレードする   4-1. 以下のコマンドを入力する  gem update --system 1.3.7 ※以下のエラーが起きる場合はこのサイトを参考に手動で rubygems-update をダウングレードする
$ gem update --system ERROR: While executing gem ... (Gem::RemoteFetcher::FetchError) SSL_connect returned=1 errno=0 state=SSLv2/v3 read server hello A: tlsv1 alert protocol version (https://rubygems.</description>
    </item>
    
    <item>
      <title>Rails の order by で自分を優先的に取得する(MySql 限定)</title>
      <link>https://kkawazoe.github.io/blog/2019/02/25/order-by-prefer-yourself-with-rails/</link>
      <pubDate>Mon, 25 Feb 2019 16:50:14 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/25/order-by-prefer-yourself-with-rails/</guid>
      <description>確認環境  ruby: ruby 2.5.3 rails: rails 5.2.2  方法  Mysqlの FIELD 関数を使用する※FIELD 関数の結果で ORDER BY する  例. レコードを order 昇順, user_id 昇順で並び替える場合
※同じ順位の場合は自分を優先
order(:order, [&amp;#34;field(user_id , #{current_user.id}) desc&amp;#34;], :user_id) ※ ポイントとしては第２ソートキーの前に ORDER BY FIELD を使用すること
また、ORDER BY FIELD で指定した分に対して desc を指定すること
※ desc を指定しないと自分以外が優先的に並び替えられてしまう)</description>
    </item>
    
    <item>
      <title>Rails で階層構造になっているテーブルに自分自身への関連を設定する</title>
      <link>https://kkawazoe.github.io/blog/2019/02/21/set-self-association-with-rails/</link>
      <pubDate>Thu, 21 Feb 2019 18:10:43 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/21/set-self-association-with-rails/</guid>
      <description>テーブル構成例 [Nodesテーブル] 最上位のノード以外は親ノードを持っている
   id name parent_id     1 parrent_node null   2 child_node_1 1   3 child_node_2 1   4 child_node_1_1 2   5 child_node_1_2 2   6 child_node_2_1 3   7 child_node_2_2 3    確認環境  ruby: ruby 2.5.3 rails: rails 5.2.2  実際のコード class Node &amp;lt; ApplicationRecord has_many :children, class_name: &amp;#34;Node&amp;#34;, foreign_key: &amp;#34;parrent_id&amp;#34; belongs_to :parrent, class_name: &amp;#34;Node&amp;#34;, optional: true # rails5 から default が require になっているため　`optional: true` を指定しないと `nil` での保存が不可 end class CreateNodes &amp;lt; ActiveRecord::Migration[5.</description>
    </item>
    
  </channel>
</rss>
