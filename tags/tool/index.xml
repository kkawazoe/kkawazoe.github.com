<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tool on Note To Self ~One Step At A Time~</title><link>https://kkawazoe.github.io/tags/tool/</link><description>Recent content in Tool on Note To Self ~One Step At A Time~</description><generator>Hugo -- gohugo.io</generator><language>jp</language><lastBuildDate>Tue, 12 Nov 2024 09:00:00 +0900</lastBuildDate><atom:link href="https://kkawazoe.github.io/tags/tool/index.xml" rel="self" type="application/rss+xml"/><item><title>Gmail でエイリアスを除くメールアドレスでフィルターをかける方法</title><link>https://kkawazoe.github.io/blog/2024/11/12/how-to-filter-by-mail-address-except-aliases-in-gmail/</link><pubDate>Tue, 12 Nov 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/11/12/how-to-filter-by-mail-address-except-aliases-in-gmail/</guid><description>Gmail でエイリアスを除くメールアドレスでフィルターをかける方法を備忘録として残しておく
方法 「&amp;quot;」で囲んだ上で「@」を半角空白に置換してフィルターをかける
例.
メールアドレス: mail-address@gmail.com
=&amp;gt; &amp;quot;mail-address gmail.com&amp;quot;</description></item><item><title>DMARC Reports を自前で集計する方法</title><link>https://kkawazoe.github.io/blog/2024/11/05/how-to-compile-dmarc-reports-on-your-own/</link><pubDate>Tue, 05 Nov 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/11/05/how-to-compile-dmarc-reports-on-your-own/</guid><description>DMARC Reports を自前で集計する方法を備忘録として残しておく
方法 GAS(Google Apps Script) を使用して集約する
新規で Spread Sheet を作成 「拡張機能」&amp;gt;「Apps Script」を選択 「ファイル」&amp;gt;「コード.gs」のデフォルトで記載されているソースを削除して以下を貼り付ける let today = new Date(); let targetDate = new Date(today); let nextDate = new Date(today); targetDate.setDate(today.getDate() - 1); nextDate.setDate(targetDate.getDate() + 1); const folderId = &amp;#39;1yGIkRYvB0ZQ3TZLLXKDmmguAH8qEJ8yV&amp;#39;; // レポートファイルを保存する親フォルダIDを指定 const sheetId = &amp;#39;10E1mo0JB8D60i2JN-JN8CfOnWQhcCKBA9Nq0iua4fLE&amp;#39;; // レポートを出力するスプレッドシートIDを指定 // 実行日の前日のメールを検索 // DMARC レポートを取得できる検索条件を指定する const query = &amp;#39;From:noreply-dmarc-support@google.com after:&amp;#39; + Utilities.formatDate(targetDate, Session.getScriptTimeZone(), &amp;#39;yyyy/MM/dd&amp;#39;) + &amp;#39; before:&amp;#39; + Utilities.formatDate(nextDate, Session.getScriptTimeZone(), &amp;#39;yyyy/MM/dd&amp;#39;); function executeAll(){ saveAttachmentsFromEmails(); parseDMARCReports(); calculateAndAppendHeaderFromTotals(); } function saveAttachmentsFromEmails() { // 日付のフォーマットをYYYYMMDDに変換 let formattedDate = Utilities.</description></item><item><title>VSCode Extension の Postman でコレクションをエクスポートする方法</title><link>https://kkawazoe.github.io/blog/2024/10/02/how-to-export-collections-with-postman-in-vscode-extension/</link><pubDate>Wed, 02 Oct 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/10/02/how-to-export-collections-with-postman-in-vscode-extension/</guid><description>VSCode Extension の Postman でコレクションをエクスポートする方法について調査した結果を備忘録として残しておく
前提 VSCode Extension の Postman にはコレクションのインポート機能は存在するがエクスポート機能は存在しない
そのため、Postman のアカウントに紐づいていることを利用して Web 版の Postman にてエクスポートする
手順 Web 版の Postman にアクセスする VSCode Extension の Postman と同じアカウントにログインする Workspaces &amp;gt; 該当の Workspace を選択 エクスポートしたいコレクションのメニューより「Export」を選択 エクスポートを行う</description></item><item><title>Terminal Alacritty の設定方法</title><link>https://kkawazoe.github.io/blog/2024/09/30/how-to-configure-terminal-alacritty/</link><pubDate>Mon, 30 Sep 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/09/30/how-to-configure-terminal-alacritty/</guid><description>Terminal Alacritty の設定方法について調査した結果を備忘録として残しておく
環境 OS: macOS 14.7 手順 Alacritty のセットアップ フォントのインストール brew install --cask font-monaspace # Hack Nerd Font brew install font-hack-nerd-font # HackGen brew install font-hackgen # HackGen Nerd brew install font-hackgen-nerd 以下のコマンドを実行する brew install --cask alacritty mkdir -p ~/.config/alacritty vim ~/.config/alacritty/alacritty.toml config ファイルを修正する 設定値については参考を参照
import = [ &amp;#34;~/.config/alacritty/themes/themes/pastel_dark.toml&amp;#34; # theme ] [env] TERM = &amp;#34;xterm-256color&amp;#34; [window] padding.x = 10 padding.y = 10 decorations = &amp;#34;Full&amp;#34; opacity = 0.</description></item><item><title>Cognito 認証が必要な API を Postman から動作させる方法</title><link>https://kkawazoe.github.io/blog/2024/06/26/how-to-make-apis-that-require-cognito-authentication-work-from-postman/</link><pubDate>Wed, 26 Jun 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/06/26/how-to-make-apis-that-require-cognito-authentication-work-from-postman/</guid><description>Cognito 認証が必要な API を Postman から動作させる方法について調査した結果を備忘録として残しておく
実際の設定 以下の通りに URL と Header, Body を設定する Postman 設定その１ Postman 設定その２ 他の API で使用するために変数に格納する Postman 設定その3 Cognito 認証が必要な API の Authorization に変数に格納した IDToken を設定する Postman 設定その４</description></item><item><title>Circle CI をローカルで実行する方法</title><link>https://kkawazoe.github.io/blog/2024/06/04/how-to-run-circle-ci-locally/</link><pubDate>Tue, 04 Jun 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/06/04/how-to-run-circle-ci-locally/</guid><description>Circle CI をローカルで実行する方法を備忘録として残しておく
前提 Mac OS OS Version: Sonoma 14.4.1 Chip: Apple M1 Container 管理ツール Rancher Desktop 使用ツール Circle CI CLI Circle CI 定義ファイル 既に作成済想定 Circle CI CLI のインストール Home Brew でインストールする
brew install circleci 使用方法 CLI で定義ファイルの文法チェックを行う circleci config validate #=&amp;gt; Config file at .circleci/config.yml is valid. circleci コマンドを使用して実行する 例. build Job 確認</description></item><item><title>Circle CI で環境変数を切り替える方法</title><link>https://kkawazoe.github.io/blog/2024/05/08/how-to-run-github-actions-locally/</link><pubDate>Wed, 08 May 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/05/08/how-to-run-github-actions-locally/</guid><description>Circle CI で環境変数を切り替える方法を備忘録として残しておく
実際のコード run ステップを使用して BASH_ENV にエクスポートする
※参考を参照
steps: - run: name: Setup Environment Variables command: |echo &amp;#39;export PATH=&amp;#34;$GOPATH&amp;#34;/bin:&amp;#34;$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; &amp;#34;$BASH_ENV&amp;#34; echo &amp;#39;export GIT_SHA1=&amp;#34;$CIRCLE_SHA1&amp;#34;&amp;#39; &amp;gt;&amp;gt; &amp;#34;$BASH_ENV&amp;#34;</description></item><item><title>GitHub Actions をローカルで実行する方法</title><link>https://kkawazoe.github.io/blog/2024/05/07/how-to-run-github-actions-locally/</link><pubDate>Tue, 07 May 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/05/07/how-to-run-github-actions-locally/</guid><description>GitHub Actions をローカルで実行する方法を備忘録として残しておく
前提 Mac OS OS Version: Sonoma 14.4.1 Chip: Apple M1 Container 管理ツール Rancher Desktop 使用ツール act GitHub Actions 既に作成済想定 act のインストール Home Brew でインストールする
brew install act 使用方法 act で実行可能な一覧を表示する act -l WARN ⚠ You are using Apple M-series chip and you have not specified container architecture, you might encounter issues while running act.</description></item><item><title>Terraform のコマンドについて</title><link>https://kkawazoe.github.io/blog/2024/04/25/about-terraform-commands/</link><pubDate>Thu, 25 Apr 2024 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/04/25/about-terraform-commands/</guid><description>Terraform のコマンドについて備忘録として残しておく
実際のコード 基本の流れ 初期化 terraform init 検証 terraform validate #=&amp;gt; Success! The configuration is valid. 実行計画確認 terraform plan インフラ構築 terraform apply その他 コード自動整形 terraform fmt リソース確認 terraform show リソース削除 terraform destroy リソース削除の実行計画確認 terraform plan -destroy</description></item><item><title>Terraform の学習時に使用したドキュメントのリンク集</title><link>https://kkawazoe.github.io/blog/2024/04/25/links-to-documentation-used-when-learning-terraform/</link><pubDate>Thu, 25 Apr 2024 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/04/25/links-to-documentation-used-when-learning-terraform/</guid><description>Terraform の学習時に使用したドキュメントのリンク集を備忘録として残しておく
ドキュメントのリンク集 基本 公式ドキュメント HCL2 CLI AWS Provider コードの記載方法に関するベストプラクティス Terraform Best Practices Terraform Registry AWS VPC terraform-aws-atlantis Trouble Shooting Quick start tutorial でエラーが発生する 以下のコマンド実行時にエラーが発生
terraform apply Error: Error pinging Docker server: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running? │ │ with provider[&amp;#34;registry.terraform.io/kreuzwerker/docker&amp;#34;], │ on main.tf line 10, in provider &amp;#34;docker&amp;#34;: │ 10: provider &amp;#34;docker&amp;#34; { 以下のコマンドで docker の sock のパスを確認する</description></item><item><title>draw.io で AWS の構成図を作成する際の Tips</title><link>https://kkawazoe.github.io/blog/2024/04/24/tips-for-creating-aws-configuration-diagrams-with-draw-io/</link><pubDate>Wed, 24 Apr 2024 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/04/24/tips-for-creating-aws-configuration-diagrams-with-draw-io/</guid><description>draw.io で AWS の構成図を作成する際の Tips を備忘録として残しておく
レイヤー機能を使用して重なり順を気にせずに作業する 図を追加した際に背面に隠れてしまい、重なりを修正する手間を解消する
手順 メニューバーから[表示]＞[レイヤー]を選択する
※初期状態では「背景」というレイヤーが配置されている 例えば以下のようにレイヤーを作成する
※上に表示されているレイヤーが前面に表示される AWS 構成図 レイヤー定義例 エクスポートについて さまざまな形式でエクスポートが行えるが XML 形式でエクスポートするとレイヤー情報もエクスポート可能</description></item><item><title>Mac でディレクトリ内の差分比較を行う方法</title><link>https://kkawazoe.github.io/blog/2024/04/15/how-to-perform-a-diff-comparison-in-a-directory-on-a-mac/</link><pubDate>Mon, 15 Apr 2024 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/04/15/how-to-perform-a-diff-comparison-in-a-directory-on-a-mac/</guid><description>普段 Diff ツールに CompareMerge2 を使用しているが無料版だと 200 アイテムまでの制限があるため他の方法を調査した方法を備忘録として残しておく
手順 diff コマンドを使用する
差分ファイル名のみ表示する -r オプション: 再起的に比較する -q オプション: 差分のあるファイルのみ表示 差分の内容は非表示 diff -r -q dir001/ dir002/ 差分ファイル数をカウントする ディレクトリの差分はない前提
diff -r -q dir001/ dir002/ | wc #=&amp;gt; 0 0 0</description></item><item><title>JMeter の環境構築方法</title><link>https://kkawazoe.github.io/blog/2024/04/04/how-to-build-a-jmeter-environment/</link><pubDate>Thu, 04 Apr 2024 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/04/04/how-to-build-a-jmeter-environment/</guid><description>JMeter の環境構築方法を備忘録として残しておく
前提 Mac OS OS Version: Sonoma 14.4.1 Chip: Apple M1 Java Version: OpenJDK 21 手順 Java をインストールする ※Eclipse Temurin™ brew tap homebrew/cask-versions brew install --cask temurin21 JMeter をダウンロードする JMeter でダウンロードしても良い
brew install jmeter 以下のコマンドを実行して JMeter を起動する jmeter</description></item><item><title>Go 言語用のデバッグ環境を VS Code 上に構築する方法</title><link>https://kkawazoe.github.io/blog/2024/04/03/how-to-build-a-debugging-environment-for-the-go-language-on-vs-code/</link><pubDate>Wed, 03 Apr 2024 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/04/03/how-to-build-a-debugging-environment-for-the-go-language-on-vs-code/</guid><description>Go 言語用のデバッグ環境を VS Code 上に構築する方法を備忘録として残しておく
※環境変数読み込み時にロードエラーになっていた
前提 Mac OS OS Version: Sonoma 14.4.1 Chip: Apple M1 Go をインストール済 $GOPATH を設定済 $GOPATH/bin を環境変数 $PATH へ追加済 サーバ情報 host: 127.0.0.1 port: 3000 ディレクトリ構成 以下のような構成になっている想定
※デバッグ対象のプログラムと環境変数ファイルが異なるディレクトリに存在する
cmd ├── main.go .env 手順 VSCode に Go 言語の拡張機能をインストール コマンドパレットから Go: Install/Update Tools を選択 以下のツールを選択して実行 gopls@latest dlv@latest launch.json を編集 { // IntelliSense を使用して利用可能な属性を学べます。 // 既存の属性の説明をホバーして表示します。 // 詳細情報は次を確認してください: https://go.</description></item><item><title>Rancher Desktop の設定について</title><link>https://kkawazoe.github.io/blog/2024/02/08/configuring-rancher-desktop/</link><pubDate>Thu, 08 Feb 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/02/08/configuring-rancher-desktop/</guid><description>普段個人で開発している時は Docker Desktop を使用しているが仕事で使用する場合には従業員数等で有償となる
そのため、代替ツールとして Rancher Desktop を調査した結果を備忘録として残しておく
設定について 以下の設定を変更することで動作が速くなる可能性がある
Preference - Virtual Machine - Emulation Virtual Machine Type に、VZを指定する 右側に出る、VZ Option の Enable Rosetta support にチェックを入れる Rosetta で動作しているか確認 下記コマンドで ubuntu に入り、 ps -ef を実行して、/mnt/lima-rosetta/rosetta と表示されていることを確認
$ docker run -it --platform linux/amd64 ubuntu # ps -ef Unable to find image &amp;#39;ubuntu:latest&amp;#39; locally latest: Pulling from library/ubuntu 445a6a12be2b: Pull complete Digest: sha256:aabed3296a3d45cede1dc866a24476c4d7e093aa806263c27ddaadbdce3c1054 Status: Downloaded newer image for ubuntu:latest root@0f03298c4ad5:/# ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 3 03:46 pts/0 00:00:00 /mnt/lima-rosetta/rosetta /bin/bash root 9 1 0 03:46 pts/0 00:00:00 /usr/bin/ps -ef Preference - Virtual Machine - Volumes 「Preferences」ボタンを押下 Virtual Machine &amp;gt; Volumes &amp;gt; Mount Type を以下に変更する Mount Type: virtiofs</description></item><item><title>Visual Studio Code Dev Containers での開発環境構築について</title><link>https://kkawazoe.github.io/blog/2024/02/08/building-a-development-environment-with-visual-studio-code-dev-containers/</link><pubDate>Thu, 08 Feb 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/02/08/building-a-development-environment-with-visual-studio-code-dev-containers/</guid><description>Visual Studio Code Dev Containers での開発環境構築について調査した結果を備忘録として残しておく
Dev Containers について 以下のような構成になる
Architecture Containers 引用元: https://code.visualstudio.com/docs/devcontainers/containers
以下のようなメリットがある
プロジェクトごとのミドルウェアなどをコンテナに閉じ込めることができる ホスト環境を汚さない VS Code の Extention もコンテナに閉じ込められる 環境構築を自動化できる 新規に作成したり、別のPCでの作り直しが簡単 環境構築について 前提条件 VS Code で以下の Extention をインストールする
Remote Development Dev Containers ※テンプレートを使用する場合 Docker Docker Desktop or Rancher Desktop 実際の例 新規で作成する場合 VS Code の左下の「&amp;gt;&amp;lt;」ボタンを押下 「新しい開発コンテナー&amp;hellip;」 を選択 ベースとなる設定を選択する 基本的には Dockerfile or Docker Compose の話になるのでそちらに慣れていれば問題なくできると思われる</description></item><item><title>pgAdmin4 で AWS の EC2 内に構築された PostgreSQL にアクセスする方法</title><link>https://kkawazoe.github.io/blog/2023/12/20/how-to-access-postgresql-built-in-aws-ec2-with-pgadmin4/</link><pubDate>Wed, 20 Dec 2023 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/12/20/how-to-access-postgresql-built-in-aws-ec2-with-pgadmin4/</guid><description>pgAdmin4 で AWS の EC2 内に構築された PostgreSQL にアクセスする方法を毎回手順を確認するため備忘録として残しておく
方法 事前作業 AWS Console にて接続に必要な情報を控えておく
EC2 踏み台の Public IP を確認
EC2 &amp;gt; リソース &amp;gt; 該当のリソースを選択 パブリック IPv4 アドレス を確認 Elastic IP が紐付けられている場合は以下を確認する
EC2 &amp;gt; Elastic IP を選択 関連付けられたインスタンス ID が一致するものを検索する 割り当てられた IPv4 アドレス を確認 RDS プロキシの設定がされている場合は以下を確認する
RDS &amp;gt; プロキシ &amp;gt; {該当の DB 識別子} を選択 プロキシエンドポイントを確認 その他 DB のパスワード (Secrets Manager)の設定確認方法
AWS Secrets Manager &amp;gt; DB のユーザパスワードを選択 シークレットの値 &amp;gt; [シークレットの値を取得する]ボタンを押下 パスワードを確認する pgAdmin4 での作業 プロパティにそれぞれ以下の値を設定する</description></item><item><title>Mac に Warp をインストールする方法</title><link>https://kkawazoe.github.io/blog/2023/11/13/how-to-install-warp-with-mac/</link><pubDate>Mon, 13 Nov 2023 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/11/13/how-to-install-warp-with-mac/</guid><description>Mac に Warp をインストールする方法を備忘録として残しておく
手順 home brew を使用してインストール $ brew install --cask warp 設定 公式サイト を参照
注意点 日本語を入力中は Terminal 上に表示がされない Vim や Github のコミットメッセージ等に厳しい ※2023/11/13 時点
issue で長い間リクエストはされているが Feature Request</description></item><item><title>GitHub の PR で折りたたみコンテンツを使用する方法</title><link>https://kkawazoe.github.io/blog/2023/01/27/how-to-accordion-content-with-pr-for-github/</link><pubDate>Fri, 27 Jan 2023 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/01/27/how-to-accordion-content-with-pr-for-github/</guid><description>GitHub の PR を作成する際に縦に長くなりすぎるため、折りたたみコンテンツを使用している
その方法を備忘録として残しておく
実際のコード html タグの details, summary タグを使用する
※画像を入れる場合は、1行空行を入れないと展開されないため要注意
&amp;lt;details&amp;gt; &amp;lt;summary&amp;gt;その１&amp;lt;/summary&amp;gt; ![画像1](/images/logo/github_logo.svg) &amp;lt;/details&amp;gt;</description></item><item><title>Mac(M1) で Path を通す方法</title><link>https://kkawazoe.github.io/blog/2023/01/25/how-to-through-a-path-with-m1-for-mac/</link><pubDate>Wed, 25 Jan 2023 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/01/25/how-to-through-a-path-with-m1-for-mac/</guid><description>Mac(M1) でパスを通す際に Intel の場合と同じ手順では上手くいかなかったので備忘録として残しておく
手順 例. mysql の path を通す場合 ※Homebrew でインストールしたもの
インストール先の path を確認 $ brew --prefix mysql@5.7 #=&amp;gt; /opt/homebrew/opt/mysql@5.7 ~/.zshrc に追記する $ echo &amp;#39;export PATH=&amp;#34;$PATH:/opt/homebrew/opt/mysql@5.7/bin&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc $ source ~/.zshrc 動作確認 $ mysql--version #=&amp;gt; mysql Ver 14.14 Distrib 5.7.40, for osx10.17 (x86_64) using EditLine wrapper</description></item><item><title>Mac OS で mov を gif に変換する方法</title><link>https://kkawazoe.github.io/blog/2022/12/18/how-to-convert-mov-to-gif-with-mac-os/</link><pubDate>Sun, 18 Dec 2022 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/12/18/how-to-convert-mov-to-gif-with-mac-os/</guid><description>Mac OS で mov を gif に変換する方法を備忘録として残しておく
手順 ffmpeg を使用する ※ファイルのリサイズのために Image Magick も使用
ffmpeg, Image Magick のインストール brew install ffmpeg brew install imagemagick gif に変換 ファイルサイズを少なくするために圧縮も行う
cd 動画のあるディレクトリ ffmpeg -i {変換対象}.mov -an -r 20 %06d.png # 20 frames/secでpng作成 ※6 桁連番の png ファイルを生成 convert *.png -resize 50% output_%06d.png # 作成した png を 50% にリサイズ convert output_*.png result.gif # gif に変換 # 生成された gif の確認は以下で行える ※Google Chrome インストールしている場合 open -a /Applications/Google\ Chrome.</description></item><item><title>Hugo と GitHub Pages の構成で自動デプロイを行う方法</title><link>https://kkawazoe.github.io/blog/2022/12/17/how-to-auto-deploy-configure-hugo-and-github-pages/</link><pubDate>Sat, 17 Dec 2022 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/12/17/how-to-auto-deploy-configure-hugo-and-github-pages/</guid><description>元々バッチを使用して手動でデプロイを行っていたが、自動デプロイする方法がないか調査を行った
その結果を備忘録として残しておく
前提 [構成]
Hugo + GitHub Pages(master ブランチが対象)
※source ブランチを Hugo で変換して master ブランチに静的サイト用の資産を配置する Hugo テーマは submodule として取り込み 実際のコード GitHub Actions を使用する
リポジトリ直下に .github/workflows フォルダを作成して配下に yml ファイルを配置することで GitHub Actions が登録される
※ source ブランチの push をトリガーに自動デプロイを行う
source ブランチをチェックアウト Hugo(Docker) を使用して、静的サイト用の資産を作成 master ブランチに push して GitHub Pages にデプロイする name: Deploy on: push: branches: - source # Target Branch Name jobs: deploy: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .</description></item><item><title>Visual Studio Code で拡張子毎に設定値を変更する方法</title><link>https://kkawazoe.github.io/blog/2022/11/22/how-to-modified-config-value-for-extensions-with-visual-studio-code/</link><pubDate>Tue, 22 Nov 2022 17:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/11/22/how-to-modified-config-value-for-extensions-with-visual-studio-code/</guid><description>経緯 Visual Studio Code にて保存時の空白のトリミングの挙動を markdown の場合のみ変えたくなったため調査を行なった
その結果を備忘録として残しておく
手順 コマンドパレットを開く Configure language specific settings を入力して選択する 拡張子を質問されるので markdown を選択する settings.json ファイルに以下のように編集する 実際の設定ファイル { &amp;#34;[markdown]&amp;#34;: { &amp;#34;files.trimTrailingWhitespace&amp;#34;: false } }</description></item><item><title>libreoffice を使用して Excel を PDF に変換する方法</title><link>https://kkawazoe.github.io/blog/2021/12/11/how-to-convert-excel-to-pdf-with-libreoffice/</link><pubDate>Sat, 11 Dec 2021 14:24:49 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2021/12/11/how-to-convert-excel-to-pdf-with-libreoffice/</guid><description>アップロードされた Excel を PDF に変換して保存する必要があり
調査を行った LibreOffice で変換する方法を備忘録として残しておく
※図形など綺麗に変換されないパターンもあるため注意が必要
前提 LibreOffice を事前にインストールしておく
/Applications/LibreOffice.app/Contents/MacOS/soffice にインストールしている場合
方法 以下のコマンドで変換を行う ※Calc を使用して PDF に変換
参考
指定できるフィルタ
/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to pdf:&amp;#34;calc_pdf_Export&amp;#34; {Excel File Path} その他 以下のようにすることで soffice コマンドを登録可能
/usr/local/bin/soffice を作成して中に以下を記載する #!/bin/bash # Need to do this because symlink won&amp;#39;t work # It complains about some .plist files /Applications/LibreOffice.app/Contents/MacOS/soffice &amp;#34;$@&amp;#34; 以下のコマンドで実行権限を付与する sudo chmod +x /usr/loca/bin/soffice 上記を sh として gist に置いているので以下でも可
sudo curl https://gist.</description></item><item><title>windows terminal でターミナル毎に起動時のディレクトリを変更する方法</title><link>https://kkawazoe.github.io/blog/2021/03/14/modify-starting-directory-for-windows-terminal/</link><pubDate>Sun, 14 Mar 2021 15:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2021/03/14/modify-starting-directory-for-windows-terminal/</guid><description>windows terminal でターミナル毎に起動時のディレクトリを変更する方法を備忘録として残しておく
環境 windows: Windows 10 Pro wsl: version 2 ディストリビューション: Ubuntu 18.04 方法 Windows Terminal を起動する 「Ctrl」+「,」を押下して setting.json を開く setting.json の設定に以下を追加する { &amp;#34;$schema&amp;#34;: &amp;#34;https://aka.ms/terminal-profiles-schema&amp;#34;, &amp;#34;defaultProfile&amp;#34;: &amp;#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&amp;#34;, &amp;#34;profiles&amp;#34;: { &amp;#34;defaults&amp;#34;: { &amp;#34;startingDirectory&amp;#34;: &amp;#34;c:\\work&amp;#34; // 追加 ターミナル共通の起動時のディレクトリを指定 }, &amp;#34;list&amp;#34;: [ { &amp;#34;guid&amp;#34;: &amp;#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Windows PowerShell&amp;#34;, &amp;#34;commandline&amp;#34;: &amp;#34;powershell.exe&amp;#34;, &amp;#34;hidden&amp;#34;: false }, { &amp;#34;guid&amp;#34;: &amp;#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Command Prompt&amp;#34;, &amp;#34;commandline&amp;#34;: &amp;#34;cmd.exe&amp;#34;, &amp;#34;hidden&amp;#34;: false }, { &amp;#34;guid&amp;#34;: &amp;#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&amp;#34;, &amp;#34;hidden&amp;#34;: false, &amp;#34;name&amp;#34;: &amp;#34;Azure Cloud Shell&amp;#34;, &amp;#34;source&amp;#34;: &amp;#34;Windows.</description></item><item><title>vagrant halt 失敗時の対応方法</title><link>https://kkawazoe.github.io/blog/2020/10/04/how-to-deal-with-vagrant-halt-failure/</link><pubDate>Sun, 04 Oct 2020 09:00:30 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2020/10/04/how-to-deal-with-vagrant-halt-failure/</guid><description>経緯 vagrant halt を行った際に以下のエラーが発生したため、その対処方法を備忘録として残しておく
手順 vagrant halt を行う 以下のエラーが発生
An action &amp;#39;halt&amp;#39; was attempted on the machine &amp;#39;default&amp;#39;, but another process is already executing an action on the machine. ess at a time. Please wait until the other Vagrant process finishes modifying this machine, then try again. If you believe this message is in error, please check the process listing for any &amp;#34;ruby&amp;#34; or &amp;#34;vagrant&amp;#34; processes and kill them.</description></item><item><title>Hugo に数式を挿入する その2</title><link>https://kkawazoe.github.io/blog/2020/05/23/insert-formula-into-hugo-part2/</link><pubDate>Sat, 23 May 2020 15:11:31 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2020/05/23/insert-formula-into-hugo-part2/</guid><description>[前回までの記事]
Hugo に数式を挿入する 経緯 mathjax のバージョンを 3 系 にアップデートした際に単純にいかなかったので備忘録として残しておく
手順 参考 を見ながらアップデートする ※version2 から version 3 への変換を利用
partials フォルダ配下の以下のファイルを修正する CDN で提供されている最新の MathJax.js の URL は、cdnjs.com で確認する
&amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; MathJax = { tex: { inlineMath: [[&amp;#39;$&amp;#39;,&amp;#39;$&amp;#39;], [&amp;#39;\\(&amp;#39;,&amp;#39;\\)&amp;#39;]], processEscapes: true, tags: &amp;#34;ams&amp;#34;, autoload: { color: [], colorV2: [&amp;#39;color&amp;#39;] }, packages: {&amp;#39;[+]&amp;#39;: [&amp;#39;noerrors&amp;#39;]} }, chtml: { matchFontHeight: false, displayAlign: &amp;#34;left&amp;#34;, // version 2 で css で変更していた 数式の表示位置の設定 displayIndent: &amp;#34;2em&amp;#34; }, options: { skipHtmlTags: [&amp;#39;script&amp;#39;, &amp;#39;noscript&amp;#39;, &amp;#39;style&amp;#39;, &amp;#39;textarea&amp;#39;, &amp;#39;pre&amp;#39;], renderActions: { /* これを記述しないと インライン数式(例.</description></item><item><title>Google Apps Script で Gmail から 特定条件のスレッドを検索しメールを取り出す</title><link>https://kkawazoe.github.io/blog/2020/03/19/use-gas-to-search-for-gmail-and-retrieve-emails/</link><pubDate>Thu, 19 Mar 2020 15:25:56 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2020/03/19/use-gas-to-search-for-gmail-and-retrieve-emails/</guid><description>実際のソース function searchContactMail() { /* Gmail から件名が「noreply」のスレッドを検索して内容を取り出す */ var strTerms = &amp;#39;noreply&amp;#39;; var myThreads = GmailApp.search(strTerms, 0, 100); var myMsgs = GmailApp.getMessagesForThreads(myThreads); //二次元配列 var contents = []; /* 各メールの内容を取り出す */ for (var i = 0; i &amp;lt; myMsgs.length; i++) { for (var j = 0; j &amp;lt; myMsgs[i].length; j++) { var data = myMsgs[i][j].getTo(); if (data !== null) { contents.push([data]); } } } /* スプレッドシートのシート「output」に出力 */ if (myMsgs.length &amp;gt; 0) { var mySheet = SpreadsheetApp.</description></item><item><title>Excel でテスト用シートを自動生成するツールを作成する</title><link>https://kkawazoe.github.io/blog/2019/04/28/auto-generate-test-sheet-tool-with-excel/</link><pubDate>Sun, 28 Apr 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/28/auto-generate-test-sheet-tool-with-excel/</guid><description>経緯 結合テストなのでエビデンスを残しておく必要があり
テスト項目ごとにシートを分ける必要があった
テスト項目が多い場合手作業で シート作成 =&amp;gt; シート名変更をするのは手間だったため
ツール化をすることにした
使用方法 「パラメータ」シートにて以下を指定する
[設定項目]
シート数: 作成するシート数 表示倍率: 作成するシートの表示倍率 シート作成後ワークグループ設定: チェックをつけるとシートを作成後に
ワークグループ(各シートが選択状態)になる 「パラメータ」シートの「実行」ボタンを押下する
実際のコード Rem Attribute VBA_ModuleType=VBAModule Option VBASupport 1 Sub ExecuteButtonClick() Dim ws As Worksheet Dim wsArray() As String Dim chkFlg As Long &amp;#39;ワークシートの初期化 For Each ws In Worksheets &amp;#39;ワークシート名が&amp;#34;パラメータ&amp;#34;以外の場合 If ws.Name &amp;lt;&amp;gt; &amp;#34;パラメータ&amp;#34; Then Application.DisplayAlerts = False ws.Delete Application.DisplayAlerts = True End If Next ws &amp;#39;チェックボックスの値を取得 chkFlg = Worksheets(&amp;#34;パラメータ&amp;#34;).</description></item><item><title>Hugo に数式を挿入する</title><link>https://kkawazoe.github.io/blog/2019/04/27/insert-formula-into-hugo/</link><pubDate>Sat, 27 Apr 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/27/insert-formula-into-hugo/</guid><description>経緯 Hugo で運用しているサイトに数式を埋め込む必要があり 調査した結果を備忘録として残しておく
手順 参考 と同じく Mathjax を使用して実現する
partials フォルダ配下に以下のファイルを作成する CDN で提供されている最新の MathJax.js の URL は、cdnjs.com で確認する
&amp;lt;script type=&amp;#34;text/javascript&amp;#34; async src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;#34;&amp;gt; MathJax.Hub.Config({ tex2jax: { inlineMath: [[&amp;#39;$&amp;#39;,&amp;#39;$&amp;#39;], [&amp;#39;\\(&amp;#39;,&amp;#39;\\)&amp;#39;]], displayMath: [[&amp;#39;$$&amp;#39;,&amp;#39;$$&amp;#39;]], processEscapes: true, processEnvironments: true, skipTags: [&amp;#39;script&amp;#39;, &amp;#39;noscript&amp;#39;, &amp;#39;style&amp;#39;, &amp;#39;textarea&amp;#39;, &amp;#39;pre&amp;#39;], TeX: { equationNumbers: { autoNumber: &amp;#34;AMS&amp;#34; }, extensions: [&amp;#34;AMSmath.js&amp;#34;, &amp;#34;AMSsymbols.js&amp;#34;] } } }); MathJax.Hub.Queue(function() { // Fix &amp;lt;code&amp;gt; tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown.</description></item><item><title>Slack ＋ Todoist ＋ Integromat でタスク管理 その２</title><link>https://kkawazoe.github.io/blog/2019/03/28/manage-task-with-slack-and-todoist-and-integromat-2/</link><pubDate>Thu, 28 Mar 2019 12:09:59 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/03/28/manage-task-with-slack-and-todoist-and-integromat-2/</guid><description>前回の残りTODO operation を使いすぎなためAPIの戻り値を配列化してメッセージを構築するようにする 手順 前回構築した API と Slack の処理の間に以下の処理を追加する
「スパナ」アイコンを押下後「JSON」を選択して以下を指定
「Parse JSON」 「Data structure」 「Add data structure」 「Specification」 「Generate」を押下して API の戻り値を貼り付けて生成 「JSON string」 「Data」を指定 「スパナ」アイコンを押下後「Flow Control」を選択して以下を指定
「Array aggregator」 「Source Module」 手順１ で作成したJSON 「Target structure type」 「Custom」を指定 「Aggregated fields」 必要な項目を指定 前回作成した slack の Text を以下のように修正</description></item><item><title>Slack ＋ Todoist ＋ Integromat でタスク管理 その１</title><link>https://kkawazoe.github.io/blog/2019/03/25/manage-task-with-slack-and-todoist-and-integromat/</link><pubDate>Mon, 25 Mar 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/03/25/manage-task-with-slack-and-todoist-and-integromat/</guid><description>したいこと 日々のタスクを管理したいというよりも忘れがちな〇月に契約更新とかの数か月、数年先のタスクを管理したい
タスク管理 完了/未完了を切り替え 期日を指定 リマインダー機能 昨日完了したタスク 今日期日のタスク 上記以外のタスク 今回使用するツール タスク管理 シンプルで管理しやすい todoist を使用 リマインダー機能 slack の channel への通知を使用 google calendar リマインダーが直前になる todoist と連携可能だが「期日指定なし」が連携されない integromat サイトが英語のみ integromat での todoist について integromat から使用できる todoist の 「Search for a task」では以下の項目しか返ってこないため要件を満たせない
足りない項目 サブタスクかどうか? 期限の情報 [OUTPUT] Bundle 1: (Collection) Task ID: タスクID User ID: ユーザID Project ID: プロジェクトID Content: 内容 Deleted: 削除されているかどうか(true/false) Archived: アーカイブされているかどうか(true/false) Completed: 完了されているかどうか(true/false) The ID of the assigned user: アサインされているユーザID Date created: 作成日時 LabelsArray ラベル配列 そのため、todoist api を叩くことで実装する</description></item><item><title>Microsoft Edge Developer(旧Modern IE)でhostsファイルを設定する方法</title><link>https://kkawazoe.github.io/blog/2019/03/19/config-hosts-file-for-microsoft-edge-developer/</link><pubDate>Tue, 19 Mar 2019 23:35:30 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/03/19/config-hosts-file-for-microsoft-edge-developer/</guid><description>経緯 普段 Mac にて開発を行っているが動作端末は Windows であることが多い
そのため、表題のツールを使用することがあるがその際に Mac 上の hosts ファイルと同様の設定をしたい場合があり苦労したため備忘録として残しておく
Microsoft Edge Developer(旧Modern IE)について ダウンロードは以下から行う
ダウンロードページの「Virtual Machines」より「Virtual machine」と「platform」を選択してダウンロードする
手順 hostsファイルの権限変更 Microsoft Edge Developer 上で以下を行う
「C:/Windows/System32/drivers/etc」に hosts ファイルがある
そのファイルを右クリック&amp;gt;Properties&amp;gt;Security&amp;gt;Editボタンで、 Users の権限に全部チェックを入れる
Mac の hosts ファイルを複製 Mac の hosts ファイルは「/private/etc/hosts」にあるので、それを前述のファイルに中身をコピーする
※hosts ファイルのループバックアドレスは固定のホスト側のIPアドレスに置き換えて記述すること
Rails での確認の際の注意点 確認作業を Rails で行う場合には追加で以下の作業を行う
IEの場合 サーバの起動の際に以下のコマンドで行う bundle exec rails s -b 0.0.0.0 インターネットオプションのLocal intranetに「localhost:3000」を登録 Edgeの場合 サーバの起動の際に以下のコマンドで行う bundle exec rails s -b 0.0.0.0 インターネットオプションの Local intranet に「localhost:3000」を登録 about:flags を入力し、「Developer Settings」の「allow localhost loopback(this might put your device at risk)」のチェックを外す</description></item><item><title>Rambox で ChatWork の未読メッセージを通知する</title><link>https://kkawazoe.github.io/blog/2019/02/28/unread-chatwork-notice-with-rambox/</link><pubDate>Thu, 28 Feb 2019 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/02/28/unread-chatwork-notice-with-rambox/</guid><description>確認環境 Windows10 Rambox: 0.6.3 経緯 普段、 仕事で Chatwork や Slack を使用しているが別々のアプリを切り替えるのが手間だったためまとめて管理できるツールがないか調査した
候補 Franz Station Rambox Franz, Station だと ChatWork で PDF ファイルのプレビューを表示した際にダウンロード用のダイアログが表示されるため 「保存」 =&amp;gt; 「PDF を開く」の手間が発生してしまうため Rambox に決定
Rambox の ChatWork の挙動 Rambox で ChatWork をサービスとして追加した場合自分にメンションがついているメッセージの場合は以下のようにバッジと未読数が表示される
Rambox バッジおよび未読数 しかし、自分にメンションがついていないメッセージについてはバッジおよび未読数は表示されないため見逃してしまう
対処方法 Rambox のサービス設定画面でカスタムコードを使用して対応する ※未読数(未読のあるルーム数) アプリ版 ChatWork と同じ挙動
Rambox サービス設定画面 実際のコード [Custom Code]
function checkUnread() { const elements = document.querySelectorAll(&amp;#34;.roomListBadges__unreadBadgeText&amp;#34;); updateBadge(elements.length); } function updateBadge(e) { e &amp;gt;= 1 ?</description></item><item><title>Visual Studio Code で Markdown PDF を使用してPDF出力する際に任意の場所で改行させる</title><link>https://kkawazoe.github.io/blog/2019/02/20/markdown-pdf-page-break/</link><pubDate>Wed, 20 Feb 2019 00:24:14 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/02/20/markdown-pdf-page-break/</guid><description>経緯 普段、 VS Code を使用しておりちょっとしたメモや資料は Markdown を使用して作成している
資料を共有をする場合に拡張機能である Markdown PDF を使用しているが、出力後のPDFで改ページが微妙な場所でされてしまったため任意の場所で改ページできないか調査した
情報元 Markdown PDF の「Page Break」の項目に記載あり
実際のコード # h1 ## h2 ### h3 &amp;lt;!-- 改行させたい位置 --&amp;gt; &amp;lt;div class=&amp;#34;page&amp;#34;/&amp;gt; # h1 ## h2 ### h3</description></item></channel></rss>