<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tool on Note To Self ~One Step At A Time~</title>
    <link>https://kkawazoe.github.io/tags/tool/</link>
    <description>Recent content in Tool on Note To Self ~One Step At A Time~</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Wed, 20 Dec 2023 12:00:00 +0900</lastBuildDate><atom:link href="https://kkawazoe.github.io/tags/tool/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pgAdmin4 で AWS の EC2 内に構築された PostgreSQL にアクセスする方法</title>
      <link>https://kkawazoe.github.io/blog/2023/12/20/how-to-access-postgresql-built-in-aws-ec2-with-pgadmin4/</link>
      <pubDate>Wed, 20 Dec 2023 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2023/12/20/how-to-access-postgresql-built-in-aws-ec2-with-pgadmin4/</guid>
      <description>pgAdmin4 で AWS の EC2 内に構築された PostgreSQL にアクセスする方法を毎回手順を確認するため備忘録として残しておく
方法 事前作業 AWS Console にて接続に必要な情報を控えておく
EC2 踏み台の Public IP を確認
 EC2 &amp;gt; リソース &amp;gt; 該当のリソースを選択 パブリック IPv4 アドレス を確認  RDS  RDS &amp;gt; データベース &amp;gt; 該当の DB 識別子を選択  その他 DB のパスワード (Secrets Manager)の設定確認方法
 AWS Secrets Manager &amp;gt; DB のユーザパスワードを選択 シークレットの値 &amp;gt; [シークレットの値を取得する]ボタンを押下 パスワードを確認する  pgAdmin4 での作業 プロパティにそれぞれ以下の値を設定する
 接続  ホスト名/アドレス: {事前作業で確認した RDS の DB 識別子} ポート番号: 5432 ※別のを指定している場合はそちらに従う 管理用データベース: postgres ※別のを指定している場合はそちらに従う ユーザ名: postgres ※別のを指定している場合はそちらに従う パスワード: {事前作業で確認した DB のパスワード}   SSH トンネル  SSH トンネリングを使用: オン トンネルホスト: {事前作業で確認した EC2 の Public IP} トンネルポート番号: 22 ユーザ名: ec2-user 認証: 識別情報ファイルを選択 識別情報ファイル: 該当 EC2 接続用の pem キーを選択    </description>
    </item>
    
    <item>
      <title>Mac に Warp をインストールする方法</title>
      <link>https://kkawazoe.github.io/blog/2023/11/13/how-to-install-warp-with-mac/</link>
      <pubDate>Mon, 13 Nov 2023 13:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2023/11/13/how-to-install-warp-with-mac/</guid>
      <description>Mac に Warp をインストールする方法を備忘録として残しておく
手順  home brew を使用してインストール  $ brew install --cask warp 設定 公式サイト を参照</description>
    </item>
    
    <item>
      <title>GitHub の PR で折りたたみコンテンツを使用する方法</title>
      <link>https://kkawazoe.github.io/blog/2023/01/27/how-to-accordion-content-with-pr-for-github/</link>
      <pubDate>Fri, 27 Jan 2023 13:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2023/01/27/how-to-accordion-content-with-pr-for-github/</guid>
      <description>GitHub の PR を作成する際に縦に長くなりすぎるため、折りたたみコンテンツを使用している
その方法を備忘録として残しておく
実際のコード html タグの details, summary タグを使用する
※画像を入れる場合は、1行空行を入れないと展開されないため要注意
&amp;lt;details&amp;gt; &amp;lt;summary&amp;gt;その１&amp;lt;/summary&amp;gt; ![画像1](/images/logo/github_logo.png) &amp;lt;/details&amp;gt; </description>
    </item>
    
    <item>
      <title>Mac(M1) で Path を通す方法</title>
      <link>https://kkawazoe.github.io/blog/2023/01/25/how-to-through-a-path-with-m1-for-mac/</link>
      <pubDate>Wed, 25 Jan 2023 13:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2023/01/25/how-to-through-a-path-with-m1-for-mac/</guid>
      <description>Mac(M1) でパスを通す際に Intel の場合と同じ手順では上手くいかなかったので備忘録として残しておく
手順 例. mysql の path を通す場合 ※Homebrew でインストールしたもの
 インストール先の path を確認  $ brew --prefix mysql@5.7 #=&amp;gt; /opt/homebrew/opt/mysql@5.7 ~/.zshrc に追記する  $ echo &amp;#39;export PATH=&amp;#34;$PATH:/opt/homebrew/opt/mysql@5.7/bin&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc $ source ~/.zshrc 動作確認  $ mysql--version #=&amp;gt; mysql Ver 14.14 Distrib 5.7.40, for osx10.17 (x86_64) using EditLine wrapper </description>
    </item>
    
    <item>
      <title>Mac OS で mov を gif に変換する方法</title>
      <link>https://kkawazoe.github.io/blog/2022/12/18/how-to-convert-mov-to-gif-with-mac-os/</link>
      <pubDate>Sun, 18 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/12/18/how-to-convert-mov-to-gif-with-mac-os/</guid>
      <description>Mac OS で mov を gif に変換する方法を備忘録として残しておく
手順 ffmpeg を使用する ※ファイルのリサイズのために Image Magick も使用
 ffmpeg, Image Magick のインストール  brew install ffmpeg brew install imagemagick gif に変換  ファイルサイズを少なくするために圧縮も行う
cd 動画のあるディレクトリ ffmpeg -i {変換対象}.mov -an -r 20 %06d.png # 20 frames/secでpng作成 ※6 桁連番の png ファイルを生成 convert *.png -resize 50% output_%06d.png # 作成した png を 50% にリサイズ convert output_*.png result.gif # gif に変換 # 生成された gif の確認は以下で行える ※Google Chrome インストールしている場合 open -a /Applications/Google\ Chrome.</description>
    </item>
    
    <item>
      <title>Hugo と GitHub Pages の構成で自動デプロイを行う方法</title>
      <link>https://kkawazoe.github.io/blog/2022/12/17/how-to-auto-deploy-configure-hugo-and-github-pages/</link>
      <pubDate>Sat, 17 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/12/17/how-to-auto-deploy-configure-hugo-and-github-pages/</guid>
      <description>元々バッチを使用して手動でデプロイを行っていたが、自動デプロイする方法がないか調査を行った
その結果を備忘録として残しておく
前提 [構成]
 Hugo + GitHub Pages(master ブランチが対象)
※source ブランチを Hugo で変換して master ブランチに静的サイト用の資産を配置する Hugo テーマは submodule として取り込み  実際のコード GitHub Actions を使用する
リポジトリ直下に .github/workflows フォルダを作成して配下に yml ファイルを配置することで GitHub Actions が登録される
※ source ブランチの push をトリガーに自動デプロイを行う
 source ブランチをチェックアウト Hugo(Docker) を使用して、静的サイト用の資産を作成 master ブランチに push して GitHub Pages にデプロイする  name: Deploy on: push: branches: - source  # Target Branch Name jobs: deploy: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .</description>
    </item>
    
    <item>
      <title>Visual Studio Code で拡張子毎に設定値を変更する方法</title>
      <link>https://kkawazoe.github.io/blog/2022/11/22/how-to-modified-config-value-for-extensions-with-visual-studio-code/</link>
      <pubDate>Tue, 22 Nov 2022 17:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/11/22/how-to-modified-config-value-for-extensions-with-visual-studio-code/</guid>
      <description>経緯 Visual Studio Code にて保存時の空白のトリミングの挙動を markdown の場合のみ変えたくなったため調査を行なった
その結果を備忘録として残しておく
手順  コマンドパレットを開く Configure language specific settings を入力して選択する 拡張子を質問されるので markdown を選択する settings.json ファイルに以下のように編集する  実際の設定ファイル { &amp;#34;[markdown]&amp;#34;: { &amp;#34;files.trimTrailingWhitespace&amp;#34;: false } } </description>
    </item>
    
    <item>
      <title>libreoffice を使用して Excel を PDF に変換する方法</title>
      <link>https://kkawazoe.github.io/blog/2021/12/11/how-to-convert-excel-to-pdf-with-libreoffice/</link>
      <pubDate>Sat, 11 Dec 2021 14:24:49 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2021/12/11/how-to-convert-excel-to-pdf-with-libreoffice/</guid>
      <description>アップロードされた Excel を PDF に変換して保存する必要があり
調査を行った LibreOffice で変換する方法を備忘録として残しておく
※図形など綺麗に変換されないパターンもあるため注意が必要
前提 LibreOffice を事前にインストールしておく
/Applications/LibreOffice.app/Contents/MacOS/soffice にインストールしている場合
方法 以下のコマンドで変換を行う ※Calc を使用して PDF に変換
参考
指定できるフィルタ
/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to pdf:&amp;#34;calc_pdf_Export&amp;#34; {Excel File Path} その他 以下のようにすることで soffice コマンドを登録可能
 /usr/local/bin/soffice を作成して中に以下を記載する  #!/bin/bash  # Need to do this because symlink won&amp;#39;t work # It complains about some .plist files /Applications/LibreOffice.app/Contents/MacOS/soffice &amp;#34;$@&amp;#34; 以下のコマンドで実行権限を付与する  sudo chmod +x /usr/loca/bin/soffice 上記を sh として gist に置いているので以下でも可
sudo curl https://gist.</description>
    </item>
    
    <item>
      <title>windows terminal でターミナル毎に起動時のディレクトリを変更する方法</title>
      <link>https://kkawazoe.github.io/blog/2021/03/14/modify-starting-directory-for-windows-terminal/</link>
      <pubDate>Sun, 14 Mar 2021 15:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2021/03/14/modify-starting-directory-for-windows-terminal/</guid>
      <description>windows terminal でターミナル毎に起動時のディレクトリを変更する方法を備忘録として残しておく
環境  windows: Windows 10 Pro wsl: version 2 ディストリビューション: Ubuntu 18.04  方法  Windows Terminal を起動する 「Ctrl」+「,」を押下して setting.json を開く setting.json の設定に以下を追加する  { &amp;#34;$schema&amp;#34;: &amp;#34;https://aka.ms/terminal-profiles-schema&amp;#34;, &amp;#34;defaultProfile&amp;#34;: &amp;#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&amp;#34;, &amp;#34;profiles&amp;#34;: { &amp;#34;defaults&amp;#34;: { &amp;#34;startingDirectory&amp;#34;: &amp;#34;c:\\work&amp;#34; // 追加 ターミナル共通の起動時のディレクトリを指定  }, &amp;#34;list&amp;#34;: [ { &amp;#34;guid&amp;#34;: &amp;#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Windows PowerShell&amp;#34;, &amp;#34;commandline&amp;#34;: &amp;#34;powershell.exe&amp;#34;, &amp;#34;hidden&amp;#34;: false }, { &amp;#34;guid&amp;#34;: &amp;#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Command Prompt&amp;#34;, &amp;#34;commandline&amp;#34;: &amp;#34;cmd.exe&amp;#34;, &amp;#34;hidden&amp;#34;: false }, { &amp;#34;guid&amp;#34;: &amp;#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&amp;#34;, &amp;#34;hidden&amp;#34;: false, &amp;#34;name&amp;#34;: &amp;#34;Azure Cloud Shell&amp;#34;, &amp;#34;source&amp;#34;: &amp;#34;Windows.</description>
    </item>
    
    <item>
      <title>vagrant halt 失敗時の対応方法</title>
      <link>https://kkawazoe.github.io/blog/2020/10/04/how-to-deal-with-vagrant-halt-failure/</link>
      <pubDate>Sun, 04 Oct 2020 09:00:30 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2020/10/04/how-to-deal-with-vagrant-halt-failure/</guid>
      <description>経緯 vagrant halt を行った際に以下のエラーが発生したため、その対処方法を備忘録として残しておく
手順  vagrant halt を行う  以下のエラーが発生
An action &amp;#39;halt&amp;#39; was attempted on the machine &amp;#39;default&amp;#39;, but another process is already executing an action on the machine. ess at a time. Please wait until the other Vagrant process finishes modifying this machine, then try again. If you believe this message is in error, please check the process listing for any &amp;#34;ruby&amp;#34; or &amp;#34;vagrant&amp;#34; processes and kill them.</description>
    </item>
    
    <item>
      <title>Hugo に数式を挿入する その2</title>
      <link>https://kkawazoe.github.io/blog/2020/05/23/insert-formula-into-hugo-part2/</link>
      <pubDate>Sat, 23 May 2020 15:11:31 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2020/05/23/insert-formula-into-hugo-part2/</guid>
      <description>[前回までの記事]
 Hugo に数式を挿入する  経緯 mathjax のバージョンを 3 系 にアップデートした際に単純にいかなかったので備忘録として残しておく
手順 参考 を見ながらアップデートする ※version2 から version 3 への変換を利用
 partials フォルダ配下の以下のファイルを修正する  CDN で提供されている最新の MathJax.js の URL は、cdnjs.com で確認する
&amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; MathJax = { tex: { inlineMath: [[&amp;#39;$&amp;#39;,&amp;#39;$&amp;#39;], [&amp;#39;\\(&amp;#39;,&amp;#39;\\)&amp;#39;]], processEscapes: true, tags: &amp;#34;ams&amp;#34;, autoload: { color: [], colorV2: [&amp;#39;color&amp;#39;] }, packages: {&amp;#39;[+]&amp;#39;: [&amp;#39;noerrors&amp;#39;]} }, chtml: { matchFontHeight: false, displayAlign: &amp;#34;left&amp;#34;, // version 2 で css で変更していた 数式の表示位置の設定  displayIndent: &amp;#34;2em&amp;#34; }, options: { skipHtmlTags: [&amp;#39;script&amp;#39;, &amp;#39;noscript&amp;#39;, &amp;#39;style&amp;#39;, &amp;#39;textarea&amp;#39;, &amp;#39;pre&amp;#39;], renderActions: { /* これを記述しないと インライン数式(例.</description>
    </item>
    
    <item>
      <title>Google Apps Script で Gmail から 特定条件のスレッドを検索しメールを取り出す</title>
      <link>https://kkawazoe.github.io/blog/2020/03/19/use-gas-to-search-for-gmail-and-retrieve-emails/</link>
      <pubDate>Thu, 19 Mar 2020 15:25:56 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2020/03/19/use-gas-to-search-for-gmail-and-retrieve-emails/</guid>
      <description>実際のソース function searchContactMail() { /* Gmail から件名が「noreply」のスレッドを検索して内容を取り出す */ var strTerms = &amp;#39;noreply&amp;#39;; var myThreads = GmailApp.search(strTerms, 0, 100); var myMsgs = GmailApp.getMessagesForThreads(myThreads); //二次元配列  var contents = []; /* 各メールの内容を取り出す */ for (var i = 0; i &amp;lt; myMsgs.length; i++) { for (var j = 0; j &amp;lt; myMsgs[i].length; j++) { var data = myMsgs[i][j].getTo(); if (data !== null) { contents.push([data]); } } } /* スプレッドシートのシート「output」に出力 */ if (myMsgs.length &amp;gt; 0) { var mySheet = SpreadsheetApp.</description>
    </item>
    
    <item>
      <title>Excel でテスト用シートを自動生成するツールを作成する</title>
      <link>https://kkawazoe.github.io/blog/2019/04/28/auto-generate-test-sheet-tool-with-excel/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/28/auto-generate-test-sheet-tool-with-excel/</guid>
      <description>経緯 結合テストなのでエビデンスを残しておく必要があり
テスト項目ごとにシートを分ける必要があった
テスト項目が多い場合手作業で シート作成 =&amp;gt; シート名変更をするのは手間だったため
ツール化をすることにした
使用方法   「パラメータ」シートにて以下を指定する
[設定項目]
 シート数: 作成するシート数 表示倍率: 作成するシートの表示倍率 シート作成後ワークグループ設定: チェックをつけるとシートを作成後に
ワークグループ(各シートが選択状態)になる    「パラメータ」シートの「実行」ボタンを押下する
  実際のコード Rem Attribute VBA_ModuleType=VBAModule Option VBASupport 1 Sub ExecuteButtonClick() Dim ws As Worksheet Dim wsArray() As String Dim chkFlg As Long &amp;#39;ワークシートの初期化  For Each ws In Worksheets &amp;#39;ワークシート名が&amp;#34;パラメータ&amp;#34;以外の場合  If ws.Name &amp;lt;&amp;gt; &amp;#34;パラメータ&amp;#34; Then Application.DisplayAlerts = False ws.Delete Application.DisplayAlerts = True End If Next ws &amp;#39;チェックボックスの値を取得  chkFlg = Worksheets(&amp;#34;パラメータ&amp;#34;).</description>
    </item>
    
    <item>
      <title>Hugo に数式を挿入する</title>
      <link>https://kkawazoe.github.io/blog/2019/04/27/insert-formula-into-hugo/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/04/27/insert-formula-into-hugo/</guid>
      <description>経緯 Hugo で運用しているサイトに数式を埋め込む必要があり 調査した結果を備忘録として残しておく
手順 参考 と同じく Mathjax を使用して実現する
 partials フォルダ配下に以下のファイルを作成する  CDN で提供されている最新の MathJax.js の URL は、cdnjs.com で確認する
&amp;lt;script type=&amp;#34;text/javascript&amp;#34; async src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;#34;&amp;gt; MathJax.Hub.Config({ tex2jax: { inlineMath: [[&amp;#39;$&amp;#39;,&amp;#39;$&amp;#39;], [&amp;#39;\\(&amp;#39;,&amp;#39;\\)&amp;#39;]], displayMath: [[&amp;#39;$$&amp;#39;,&amp;#39;$$&amp;#39;]], processEscapes: true, processEnvironments: true, skipTags: [&amp;#39;script&amp;#39;, &amp;#39;noscript&amp;#39;, &amp;#39;style&amp;#39;, &amp;#39;textarea&amp;#39;, &amp;#39;pre&amp;#39;], TeX: { equationNumbers: { autoNumber: &amp;#34;AMS&amp;#34; }, extensions: [&amp;#34;AMSmath.js&amp;#34;, &amp;#34;AMSsymbols.js&amp;#34;] } } }); MathJax.Hub.Queue(function() { // Fix &amp;lt;code&amp;gt; tags after MathJax finishes running. This is a  // hack to overcome a shortcoming of Markdown.</description>
    </item>
    
    <item>
      <title>Slack ＋ Todoist ＋ Integromat でタスク管理 その２</title>
      <link>https://kkawazoe.github.io/blog/2019/03/28/manage-task-with-slack-and-todoist-and-integromat-2/</link>
      <pubDate>Thu, 28 Mar 2019 12:09:59 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/28/manage-task-with-slack-and-todoist-and-integromat-2/</guid>
      <description>前回の残りTODO  operation を使いすぎなためAPIの戻り値を配列化してメッセージを構築するようにする  手順 前回構築した API と Slack の処理の間に以下の処理を追加する
  「スパナ」アイコンを押下後「JSON」を選択して以下を指定
 「Parse JSON」  「Data structure」  「Add data structure」  「Specification」  「Generate」を押下して API の戻り値を貼り付けて生成       「JSON string」  「Data」を指定        「スパナ」アイコンを押下後「Flow Control」を選択して以下を指定
 「Array aggregator」  「Source Module」  手順１ で作成したJSON   「Target structure type」  「Custom」を指定   「Aggregated fields」  必要な項目を指定        前回作成した slack の Text を以下のように修正</description>
    </item>
    
    <item>
      <title>Slack ＋ Todoist ＋ Integromat でタスク管理 その１</title>
      <link>https://kkawazoe.github.io/blog/2019/03/25/manage-task-with-slack-and-todoist-and-integromat/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/25/manage-task-with-slack-and-todoist-and-integromat/</guid>
      <description>したいこと 日々のタスクを管理したいというよりも忘れがちな〇月に契約更新とかの数か月、数年先のタスクを管理したい
 タスク管理  完了/未完了を切り替え 期日を指定   リマインダー機能  昨日完了したタスク 今日期日のタスク 上記以外のタスク    今回使用するツール  タスク管理 シンプルで管理しやすい todoist を使用 リマインダー機能 slack の channel への通知を使用  google calendar  リマインダーが直前になる todoist と連携可能だが「期日指定なし」が連携されない   integromat  サイトが英語のみ      integromat での todoist について integromat から使用できる todoist の 「Search for a task」では以下の項目しか返ってこないため要件を満たせない
 足りない項目  サブタスクかどうか? 期限の情報    [OUTPUT] Bundle 1: (Collection) Task ID: タスクID User ID: ユーザID Project ID: プロジェクトID Content: 内容 Deleted: 削除されているかどうか(true/false) Archived: アーカイブされているかどうか(true/false) Completed: 完了されているかどうか(true/false) The ID of the assigned user: アサインされているユーザID Date created: 作成日時 LabelsArray ラベル配列 そのため、todoist api を叩くことで実装する</description>
    </item>
    
    <item>
      <title>Microsoft Edge Developer(旧Modern IE)でhostsファイルを設定する方法</title>
      <link>https://kkawazoe.github.io/blog/2019/03/19/config-hosts-file-for-microsoft-edge-developer/</link>
      <pubDate>Tue, 19 Mar 2019 23:35:30 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/03/19/config-hosts-file-for-microsoft-edge-developer/</guid>
      <description>経緯 普段 Mac にて開発を行っているが動作端末は Windows であることが多い
そのため、表題のツールを使用することがあるがその際に Mac 上の hosts ファイルと同様の設定をしたい場合があり苦労したため備忘録として残しておく
Microsoft Edge Developer(旧Modern IE)について ダウンロードは以下から行う
ダウンロードページの「Virtual Machines」より「Virtual machine」と「platform」を選択してダウンロードする
手順 hostsファイルの権限変更 Microsoft Edge Developer 上で以下を行う
「C:/Windows/System32/drivers/etc」に hosts ファイルがある
そのファイルを右クリック&amp;gt;Properties&amp;gt;Security&amp;gt;Editボタンで、 Users の権限に全部チェックを入れる
Mac の hosts ファイルを複製 Mac の hosts ファイルは「/private/etc/hosts」にあるので、それを前述のファイルに中身をコピーする
※hosts ファイルのループバックアドレスは固定のホスト側のIPアドレスに置き換えて記述すること
Rails での確認の際の注意点 確認作業を Rails で行う場合には追加で以下の作業を行う
IEの場合  サーバの起動の際に以下のコマンドで行う  bundle exec rails s -b 0.0.0.0 インターネットオプションのLocal intranetに「localhost:3000」を登録  Edgeの場合  サーバの起動の際に以下のコマンドで行う  bundle exec rails s -b 0.0.0.0 インターネットオプションの Local intranet に「localhost:3000」を登録 about:flags を入力し、「Developer Settings」の「allow localhost loopback(this might put your device at risk)」のチェックを外す  </description>
    </item>
    
    <item>
      <title>Rambox で ChatWork の未読メッセージを通知する</title>
      <link>https://kkawazoe.github.io/blog/2019/02/28/unread-chatwork-notice-with-rambox/</link>
      <pubDate>Thu, 28 Feb 2019 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/28/unread-chatwork-notice-with-rambox/</guid>
      <description>確認環境  Windows10 Rambox: 0.6.3  経緯 普段、 仕事で Chatwork や Slack を使用しているが別々のアプリを切り替えるのが手間だったためまとめて管理できるツールがないか調査した
候補  Franz Station Rambox  Franz, Station だと ChatWork で PDF ファイルのプレビューを表示した際にダウンロード用のダイアログが表示されるため 「保存」 =&amp;gt; 「PDF を開く」の手間が発生してしまうため Rambox に決定
Rambox の ChatWork の挙動 Rambox で ChatWork をサービスとして追加した場合自分にメンションがついているメッセージの場合は以下のようにバッジと未読数が表示される
 しかし、自分にメンションがついていないメッセージについてはバッジおよび未読数は表示されないため見逃してしまう
対処方法 Rambox のサービス設定画面でカスタムコードを使用して対応する ※未読数(未読のあるルーム数) アプリ版 ChatWork と同じ挙動
 実際のコード [Custom Code]
function checkUnread() { const elements = document.querySelectorAll(&amp;#34;.roomListBadges__unreadBadgeText&amp;#34;); updateBadge(elements.length); } function updateBadge(e) { e &amp;gt;= 1 ? rambox.setUnreadCount(e) : rambox.</description>
    </item>
    
    <item>
      <title>Visual Studio Code で Markdown PDF を使用してPDF出力する際に任意の場所で改行させる</title>
      <link>https://kkawazoe.github.io/blog/2019/02/20/markdown-pdf-page-break/</link>
      <pubDate>Wed, 20 Feb 2019 00:24:14 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2019/02/20/markdown-pdf-page-break/</guid>
      <description>経緯 普段、 VS Code を使用しておりちょっとしたメモや資料は Markdown を使用して作成している
資料を共有をする場合に拡張機能である Markdown PDF を使用しているが、出力後のPDFで改ページが微妙な場所でされてしまったため任意の場所で改ページできないか調査した
情報元 Markdown PDF の「Page Break」の項目に記載あり
実際のコード # h1 ## h2  ### h3  &amp;lt;!-- 改行させたい位置 --&amp;gt; &amp;lt;div class=&amp;#34;page&amp;#34;/&amp;gt; # h1 ## h2  ### h3  </description>
    </item>
    
  </channel>
</rss>
