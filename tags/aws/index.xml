<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS on Note To Self ~One Step At A Time~</title>
    <link>https://kkawazoe.github.io/tags/aws/</link>
    <description>Recent content in AWS on Note To Self ~One Step At A Time~</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Mon, 29 Jan 2024 12:30:00 +0900</lastBuildDate><atom:link href="https://kkawazoe.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Amazon Cognito でコマンドからユーザ登録およびパスワード設定を行う方法</title>
      <link>https://kkawazoe.github.io/blog/2024/01/29/how-to-register-users-and-set-passwords-with-amazon-cognito-from-command/</link>
      <pubDate>Mon, 29 Jan 2024 12:30:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2024/01/29/how-to-register-users-and-set-passwords-with-amazon-cognito-from-command/</guid>
      <description>Amazon Cognito でコマンドからユーザ登録およびパスワード設定を行う方法について調査した内容を備忘録として残しておく
方法 該当の AWS Console にログインして AWS Cloud Shell 上で以下のコマンドを実行する
実際のコード   ユーザ登録
&amp;ndash;user-attributes は必要に応じて増やす
※「&amp;ndash;message-action SUPPRESS」のオプションを付与することで対象ユーザへの通知を止めることが可能
  aws cognito-idp admin-create-user \ --user-pool-id {ユーザプール ID} \ --username {E メールアドレス ※E メールアドレスをユーザ名に設定した場合} \ --user-attributes Name=email,Value={E メールアドレス} \ Name=email_verified,Value=TRUE \ --message-action SUPPRESS  パスワード設定
&amp;ndash;no-permanent は仮パスワード扱い
※「&amp;ndash;permanent」オプションを付与で恒久パスワード扱いになる
  aws cognito-idp admin-set-user-password \ --user-pool-id {ユーザプール ID} \ --username {ユーザ名 or sub} \ --password {password} \ --no-permanent </description>
    </item>
    
    <item>
      <title>AWS についての Tips</title>
      <link>https://kkawazoe.github.io/blog/2024/01/17/tips-about-aws/</link>
      <pubDate>Wed, 17 Jan 2024 12:30:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2024/01/17/tips-about-aws/</guid>
      <description>AWS についての Tips について備忘録として残しておく
※適宜、更新予定
DB の接続情報の確認 EC2 踏み台の Public IP を確認
 EC2 &amp;gt; リソース &amp;gt; 該当のリソースを選択 パブリック IPv4 アドレス を確認  RDS  RDS &amp;gt; データベース &amp;gt; 該当の DB 識別子を選択  Secret Maneger DB のパスワードの設定確認方法
 AWS Secrets Manager &amp;gt; DB のユーザパスワードを選択 シークレットの値 &amp;gt; [シークレットの値を取得する]ボタンを押下 パスワードを確認する  バッチ処理について AWS 内で定期実行バッチの有無を確認する場合は以下を確認する
Amazon EventBridge Scheduler  Amazon EventBridge &amp;gt; スケジューラ &amp;gt; スケジュール &amp;gt; 該当のスケジュールを選択 スケジュール &amp;gt; cron 式 を確認  Amazon EventBridge Rule Cloud Formation で設定した場合はこっちを確認する</description>
    </item>
    
    <item>
      <title>Amazon Cognito でユーザプールに登録されているユーザ一覧を取得する方法</title>
      <link>https://kkawazoe.github.io/blog/2024/01/16/how-to-get-a-list-of-users-registered-in-user-pool-in-amazon-cognito/</link>
      <pubDate>Tue, 16 Jan 2024 12:30:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2024/01/16/how-to-get-a-list-of-users-registered-in-user-pool-in-amazon-cognito/</guid>
      <description>Amazon Cognito でユーザプールに登録されているユーザ一覧を取得する方法について調査した内容を備忘録として残しておく
方法 該当の AWS Console にログインして AWS Cloud Shell 上で以下のコマンドを実行する
実際のコード aws cognito-idp list-users \ --user-pool-id {該当のユーザプール ID} \ --filter &amp;#34;{検索に使用する属性} = \&amp;#34;{検索文字列}\&amp;#34;&amp;#34; \ --attributes-to-get &amp;#34;{取得する属性(スペース区切りで複数指定可)}&amp;#34; \ | jq -r &amp;#39;.Users[] | [.Username, .Attributes[].Value] | @csv&amp;#39; \ | tr -d &amp;#39;&amp;#34;&amp;#39; \ &amp;gt; user_pool_list.csv </description>
    </item>
    
    <item>
      <title>Amazon Lamdba で登録されている関数一覧を取得する方法</title>
      <link>https://kkawazoe.github.io/blog/2024/01/16/how-to-get-a-list-of-registered-functions-in-amazon-cognito/</link>
      <pubDate>Tue, 16 Jan 2024 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2024/01/16/how-to-get-a-list-of-registered-functions-in-amazon-cognito/</guid>
      <description>Amazon Lamdba で登録されている関数一覧を取得する方法について調査した内容を備忘録として残しておく
方法 該当の AWS Console にログインして AWS Cloud Shell 上で以下のコマンドを実行する
実際のコード aws lambda list-functions --region {リージョン名} \ | jq &amp;#39;.Functions[] | [.FunctionName]&amp;#39; \ | jq -rs &amp;#39;map([.[]])[] | @csv&amp;#39; \ | tr -d &amp;#39;&amp;#34;&amp;#39; &amp;gt; lambda-functions-list.csv </description>
    </item>
    
    <item>
      <title>Amazon Pinpoint API で push 通知を送信する方法</title>
      <link>https://kkawazoe.github.io/blog/2023/12/28/how-to-send-push-notifications-with-amazon-pinpoint-api/</link>
      <pubDate>Thu, 28 Dec 2023 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2023/12/28/how-to-send-push-notifications-with-amazon-pinpoint-api/</guid>
      <description>Amazon Pinpoint API で push 通知を送信する方法について調査した内容を備忘録として残しておく
前提構成: 前回記事を参照
方法 デベロッパーガイドを参照
※上記の以下の部分はパラメータがほとんど同じため共通化した方が良さそう
リファクタリング前 ・・・ if (service == &amp;#39;GCM&amp;#39;) { var messageRequest = { &amp;#39;Addresses&amp;#39;: { [token]: { &amp;#39;ChannelType&amp;#39;: &amp;#39;GCM&amp;#39; } }, &amp;#39;MessageConfiguration&amp;#39;: { &amp;#39;GCMMessage&amp;#39;: { &amp;#39;Action&amp;#39;: action, &amp;#39;Body&amp;#39;: message, &amp;#39;Priority&amp;#39;: priority, &amp;#39;SilentPush&amp;#39;: silent, &amp;#39;Title&amp;#39;: title, &amp;#39;TimeToLive&amp;#39;: ttl, &amp;#39;Url&amp;#39;: url } } }; } else if (service == &amp;#39;APNS&amp;#39;) { var messageRequest = { &amp;#39;Addresses&amp;#39;: { [token]: { &amp;#39;ChannelType&amp;#39; : &amp;#39;APNS&amp;#39; } }, &amp;#39;MessageConfiguration&amp;#39;: { &amp;#39;APNSMessage&amp;#39;: { &amp;#39;Action&amp;#39;: action, &amp;#39;Body&amp;#39;: message, &amp;#39;Priority&amp;#39;: priority, &amp;#39;SilentPush&amp;#39;: silent, &amp;#39;Title&amp;#39;: title, &amp;#39;TimeToLive&amp;#39;: ttl, &amp;#39;Url&amp;#39;: url } } }; } ・・・ リファクタリング後 ・・・ var messageRequest = { &amp;#39;Addresses&amp;#39;: { [token]: { &amp;#39;ChannelType&amp;#39;: service } }, &amp;#39;MessageConfiguration&amp;#39;: { /** * リファクタリングポイント: * []とテンプレートリテラルを使用して連装配列の key を動的に生成する */ [`${service}Message`]: { &amp;#39;Action&amp;#39;: action, &amp;#39;Body&amp;#39;: message, &amp;#39;Priority&amp;#39;: priority, &amp;#39;SilentPush&amp;#39;: silent, &amp;#39;Title&amp;#39;: title, &amp;#39;TimeToLive&amp;#39;: ttl, &amp;#39;Url&amp;#39;: url } } }; ・・・ </description>
    </item>
    
    <item>
      <title>AWS と Firebase を連携して Push 通知を行う場合の設定について</title>
      <link>https://kkawazoe.github.io/blog/2023/12/20/how-to-set-up-push-notification-with-aws-and-firebase/</link>
      <pubDate>Wed, 20 Dec 2023 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2023/12/20/how-to-set-up-push-notification-with-aws-and-firebase/</guid>
      <description>AWS と Firebase を連携して Push 通知を行う場合の設定について調査した内容を備忘録として残しておく
方法 Amazon Pinpoint を使用
 Amazon Pinpoint &amp;gt; 使用を開始する &amp;gt; Pinpoint campaign orchestration を選択 [プロジェクトを管理]ボタンを押下 該当のプロジェクト名を選択 設定 &amp;gt; プッシュ通知 を選択 [編集]ボタンを押下  Apple Push Notification service (APNs)  デフォルトの認証タイプ  キー認証情報(推奨)   有効にする APN チャネルを選択  任意のチャネルを選択   キー ID  Apple Developer Programで確認   バンドル識別子  Apple Developer Programで確認   チーム識別子  Apple Developer Programで確認   認証キー(.p8 ファイル)  Apple Developer Programで取得    Firebase Cloud Messaging (FCM)  デフォルトの認証タイプ  トークン認証情報(推奨)   サービス json (.</description>
    </item>
    
    <item>
      <title>pgAdmin4 で AWS の EC2 内に構築された PostgreSQL にアクセスする方法</title>
      <link>https://kkawazoe.github.io/blog/2023/12/20/how-to-access-postgresql-built-in-aws-ec2-with-pgadmin4/</link>
      <pubDate>Wed, 20 Dec 2023 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2023/12/20/how-to-access-postgresql-built-in-aws-ec2-with-pgadmin4/</guid>
      <description>pgAdmin4 で AWS の EC2 内に構築された PostgreSQL にアクセスする方法を毎回手順を確認するため備忘録として残しておく
方法 事前作業 AWS Console にて接続に必要な情報を控えておく
EC2 踏み台の Public IP を確認
 EC2 &amp;gt; リソース &amp;gt; 該当のリソースを選択 パブリック IPv4 アドレス を確認  Elastic IP が紐付けられている場合は以下を確認する
 EC2 &amp;gt; Elastic IP を選択 関連付けられたインスタンス ID が一致するものを検索する 割り当てられた IPv4 アドレス を確認  RDS プロキシの設定がされている場合は以下を確認する
 RDS &amp;gt; プロキシ &amp;gt; {該当の DB 識別子} を選択 プロキシエンドポイントを確認  その他 DB のパスワード (Secrets Manager)の設定確認方法
 AWS Secrets Manager &amp;gt; DB のユーザパスワードを選択 シークレットの値 &amp;gt; [シークレットの値を取得する]ボタンを押下 パスワードを確認する  pgAdmin4 での作業 プロパティにそれぞれ以下の値を設定する</description>
    </item>
    
  </channel>
</rss>
