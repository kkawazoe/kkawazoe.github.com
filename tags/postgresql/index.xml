<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PostgreSQL on Note To Self ~One Step At A Time~</title>
    <link>https://kkawazoe.github.io/tags/postgresql/</link>
    <description>Recent content in PostgreSQL on Note To Self ~One Step At A Time~</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Wed, 20 Dec 2023 12:00:00 +0900</lastBuildDate><atom:link href="https://kkawazoe.github.io/tags/postgresql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pgAdmin4 で AWS の EC2 内に構築された PostgreSQL にアクセスする方法</title>
      <link>https://kkawazoe.github.io/blog/2023/12/20/how-to-access-postgresql-built-in-aws-ec2-with-pgadmin4/</link>
      <pubDate>Wed, 20 Dec 2023 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2023/12/20/how-to-access-postgresql-built-in-aws-ec2-with-pgadmin4/</guid>
      <description>pgAdmin4 で AWS の EC2 内に構築された PostgreSQL にアクセスする方法を毎回手順を確認するため備忘録として残しておく
方法 事前作業 AWS Console にて接続に必要な情報を控えておく
EC2 踏み台の Public IP を確認
 EC2 &amp;gt; リソース &amp;gt; 該当のリソースを選択 パブリック IPv4 アドレス を確認  RDS  RDS &amp;gt; データベース &amp;gt; 該当の DB 識別子を選択  その他 DB のパスワード (Secrets Manager)の設定確認方法
 AWS Secrets Manager &amp;gt; DB のユーザパスワードを選択 シークレットの値 &amp;gt; [シークレットの値を取得する]ボタンを押下 パスワードを確認する  pgAdmin4 での作業 プロパティにそれぞれ以下の値を設定する
 接続  ホスト名/アドレス: {事前作業で確認した RDS の DB 識別子} ポート番号: 5432 ※別のを指定している場合はそちらに従う 管理用データベース: postgres ※別のを指定している場合はそちらに従う ユーザ名: postgres ※別のを指定している場合はそちらに従う パスワード: {事前作業で確認した DB のパスワード}   SSH トンネル  SSH トンネリングを使用: オン トンネルホスト: {事前作業で確認した EC2 の Public IP} トンネルポート番号: 22 ユーザ名: ec2-user 認証: 識別情報ファイルを選択 識別情報ファイル: 該当 EC2 接続用の pem キーを選択    </description>
    </item>
    
    <item>
      <title>PostgreSQL で テーブルのカラム内の特定の文字数を取得する方法</title>
      <link>https://kkawazoe.github.io/blog/2022/08/22/how-to-get-count-specific-string-with-postgre-sql/</link>
      <pubDate>Mon, 22 Aug 2022 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/08/22/how-to-get-count-specific-string-with-postgre-sql/</guid>
      <description>PostgreSQL で テーブルのカラム内の特定の文字数を取得する方法を備忘録として残しておく
方法 sum, length, regexp_replace を使用する
環境  PostgreSQL: 13.3  実際のコード  regexp_replace 関数で name カラム内の 「仼」、「鶴」を空文字に置換 length 関数で 1 の置換前の文字数および置換後の文字数を取得 sum 関数で 2 で取得したものを計算(置換前文字数 - 置換後文字数) ※coalsesce 関数は null が返却された場合のデフォルト値を設定  select &amp;#39;ユーザテーブル--名前カラム中の「仼」または「鶴」の件数&amp;#39;, coalesce(sum(length(name)-length(regexp_replace(name, &amp;#39;[仼鶴]&amp;#39;,&amp;#39;&amp;#39;,&amp;#39;g&amp;#39;))), 0) from users; </description>
    </item>
    
    <item>
      <title>PostgreSQL で CSVをインポートする方法</title>
      <link>https://kkawazoe.github.io/blog/2022/05/24/how-to-import-csv-with-postgre-sql/</link>
      <pubDate>Tue, 24 May 2022 12:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/05/24/how-to-import-csv-with-postgre-sql/</guid>
      <description>PostgreSQL で CSV をインポートする方法を備忘録として残しておく
方法 \COPY を使用する
環境  PostgreSQL: 13.3  実際のコード su - postgres psql \c {DB 名}; \COPY {テーブル名} FROM &amp;#39;{csvファイルパス}&amp;#39; DELIMITER &amp;#39;,&amp;#39; CSV; # 例 HEADER なしの場合 \COPY users FROM &amp;#39;./users.csv&amp;#39; DELIMITER &amp;#39;,&amp;#39; CSV; # 例 HEADER ありの場合 \COPY users FROM &amp;#39;./users.csv&amp;#39; DELIMITER &amp;#39;,&amp;#39; CSV HEADER; # エクスポートする場合は以下 su - postgres psql \c {DB 名}; \COPY {テーブル名} TO &amp;#39;{csvファイルパス}&amp;#39; WITH CSV DELIMITER &amp;#39;,&amp;#39;; # 例 HEADER なしの場合 \COPY users TO &amp;#39;.</description>
    </item>
    
    <item>
      <title>rails で id 等の自動採番項目の不整合を修正する方法(PostgreSQL)</title>
      <link>https://kkawazoe.github.io/blog/2022/05/24/how-to-auto-seq-for-postgre-sql-with-rails/</link>
      <pubDate>Tue, 24 May 2022 09:00:00 +0900</pubDate>
      
      <guid>https://kkawazoe.github.io/blog/2022/05/24/how-to-auto-seq-for-postgre-sql-with-rails/</guid>
      <description>rails で 自動採番項目の不整合を修正する方法を備忘録として残しておく
方法 reset_pk_sequence! を使用する
環境  rails: 6.1.4  実際のコード ActiveRecord::Base.connection.tables.each do |table_name| ActiveRecord::Base.connection.reset_pk_sequence!(table_name) end </description>
    </item>
    
  </channel>
</rss>
