<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PostgreSQL on Note To Self ~One Step At A Time~</title><link>https://kkawazoe.github.io/tags/postgresql/</link><description>Recent content in PostgreSQL on Note To Self ~One Step At A Time~</description><generator>Hugo -- gohugo.io</generator><language>jp</language><lastBuildDate>Tue, 24 Dec 2024 09:00:00 +0900</lastBuildDate><atom:link href="https://kkawazoe.github.io/tags/postgresql/index.xml" rel="self" type="application/rss+xml"/><item><title>PostgreSQL で jsonb 型のカラムの一部を検索条件にする方法</title><link>https://kkawazoe.github.io/blog/2024/12/24/how-to-make-a-part-of-a-columns-of-type-jsonb-a-search-condition-in-postgresql/</link><pubDate>Tue, 24 Dec 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/12/24/how-to-make-a-part-of-a-columns-of-type-jsonb-a-search-condition-in-postgresql/</guid><description>PostgreSQL で jsonb 型のカラムの一部を検索条件にする方法を備忘録として残しておく
詳細は公式を参照
方法 以下の DB 構成およびレコードの場合
Books Table id field: SERIAL type ※Primary Key value1: 1 value2: 2 options field: JSONB type value1: {&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;aaa&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;bbb&amp;rdquo;} value2: {&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;ccc&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;ddd&amp;rdquo;} SELECT options-&amp;gt;&amp;gt;&amp;#39;key_2&amp;#39; FROM books WHERE options-&amp;gt;&amp;gt;&amp;#39;key_1&amp;#39; = &amp;#39;ccc&amp;#39;; #=&amp;gt; &amp;#39;ddd&amp;#39; 以下の DB 構成およびレコードの場合(配列)
Books Table id field: SERIAL type ※Primary Key value1: 1 value2: 2 options field: JSONB type value: [{&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;aaa&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;bbb&amp;rdquo;}, {&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;ccc&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;ddd&amp;rdquo;}] value: [{&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;eee&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;fff&amp;rdquo;}, {&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;ggg&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;hhh&amp;rdquo;}] SELECT options-&amp;gt;&amp;gt;&amp;#39;key_2&amp;#39; FROM books, JSONB_ARRAY_ELEMENTS(options) option WHERE option-&amp;gt;&amp;gt;&amp;#39;key_1&amp;#39; = &amp;#39;ccc&amp;#39;; #=&amp;gt; &amp;#39;ddd&amp;#39;</description></item><item><title>PostgreSQL で jsonb 型のカラムの一部を更新する方法</title><link>https://kkawazoe.github.io/blog/2024/12/11/how-to-update-some-columns-of-type-jsonb-in-postgresql/</link><pubDate>Wed, 11 Dec 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/12/11/how-to-update-some-columns-of-type-jsonb-in-postgresql/</guid><description>PostgreSQL で jsonb 型のカラムの一部を更新する方法を備忘録として残しておく
方法 以下の DB 構成および更新前のレコードの場合
Book Table id field: SERIAL type ※Primary Key value: 1 options field: JSONB type value: {&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;aaa&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;bbb&amp;rdquo;} UPDATE book SET options = options || &amp;#39;{&amp;#34;key_1&amp;#34;: &amp;#34;ccc&amp;#34;}&amp;#39;, WHERE id = 1; 更新後
Book Table id field: SERIAL type ※Primary Key value: 1 options field: JSONB type value: {&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;ccc&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;bbb&amp;rdquo;}</description></item><item><title>ShellScript で踏み台サーバ(EC2)経由で DB にアクセスして SQL を実行する方法</title><link>https://kkawazoe.github.io/blog/2024/07/18/how-to-access-a-db-via-a-stepping-stone-server-and-execute-sql-in-shell-script/</link><pubDate>Thu, 18 Jul 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/07/18/how-to-access-a-db-via-a-stepping-stone-server-and-execute-sql-in-shell-script/</guid><description>ShellScript で踏み台サーバ(EC2)経由で DB にアクセスして SQL を実行する方法について調査した結果を備忘録として残しておく
環境 OS: MacOS DB: PostgreSQL フォルダ構成 ./ ├── sql/ │ └── execute.sql └── execute_sql.sh 実際のコード 環境変数(xxx 部分)は実際の環境に応じて書き換える
#!/bin/sh # DEV EC2_HOST_DEV=xxx EC2_PEM_KEY_DEV=xxx DB_HOST_DEV=xxx DB_PORT_DEV=5432 DB_NAME_DEV=xxx DB_USER_DEV=xxx DB_PASSWORD_DEV=xxx # STG EC2_HOST_STG=xxx EC2_PEM_KEY_STG=xxx DB_HOST_STG=xxx DB_PORT_STG=5432 DB_NAME_STG=xxx DB_USER_STG=xxx DB_PASSWORD_STG=xxx # PRD EC2_HOST_PRD=xxx EC2_PEM_KEY_PRD=xxx DB_HOST_PRD=xxx DB_PORT_PRD=5432 DB_NAME_PRD=xxx DB_USER_PRD=xxx DB_PASSWORD_PRD=xxx # Shared SQL_DIR=sql SQL_FILE=${SQL_DIR}/execute.sql LOG_FILE=log/batch.log read -p &amp;#34;Which environment connect to? (dev/stg/prd): &amp;#34; input_environment # Convert to uppercase environment=$(echo &amp;#34;${input_environment}&amp;#34; | tr &amp;#39;[:lower:]&amp;#39; &amp;#39;[:upper:]&amp;#39;) echo &amp;#34;【Start Processing】$(date &amp;#34;+%Y/%m/%d %H:%M:%S&amp;#34;)&amp;#34; &amp;gt;&amp;gt; ${LOG_FILE} 2&amp;gt;&amp;amp;1 # Check the environment case &amp;#34;${input_environment}&amp;#34; in &amp;#34;dev&amp;#34; | &amp;#34;stg&amp;#34; | &amp;#34;prd&amp;#34;) echo &amp;#34;Connecting to ${environment}environment.</description></item><item><title>Amazon Linux 2 に PostgreSQL 13 をインストールする方法</title><link>https://kkawazoe.github.io/blog/2024/03/29/how-to-install-postgresql-13-on-amazon-linux-2/</link><pubDate>Fri, 29 Mar 2024 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/03/29/how-to-install-postgresql-13-on-amazon-linux-2/</guid><description>Amazon Linux 2 に PostgreSQL 13 をインストールする際にエラーが発生したため、インストールできるように調査した内容を備忘録として残しておく
手順 postgresql13 を以下のコマンドでインストールする sudo amazon-linux-extras install postgresql13 以下のエラーが発生
failure: repodata/repomd.xml from pgdg-common: [Errno 256] No more mirrors to try. https://download.postgresql.org/pub/repos/yum/common/redhat/rhel-2-x86_64/repodata/repomd.xml: [Errno 14] HTTPS Error 404 - Not Found Installation failed. Check that you have permissions to install. 以下のコマンドで対象ファイルの内容を更新する ※事前にバックアップすること sudo sed -i &amp;quot;s/\$releasever/7/g&amp;quot; &amp;quot;/etc/yum.repos.d/pgdg-redhat-all.repo&amp;quot; 再度、 postgresql13 をインストールする 以下のエラーが発生
failure: repodata/repomd.xml from pgdg-common: [Errno 256] No more mirrors to try. https://download.</description></item><item><title>pgAdmin4 で AWS の EC2 内に構築された PostgreSQL にアクセスする方法</title><link>https://kkawazoe.github.io/blog/2023/12/20/how-to-access-postgresql-built-in-aws-ec2-with-pgadmin4/</link><pubDate>Wed, 20 Dec 2023 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/12/20/how-to-access-postgresql-built-in-aws-ec2-with-pgadmin4/</guid><description>pgAdmin4 で AWS の EC2 内に構築された PostgreSQL にアクセスする方法を毎回手順を確認するため備忘録として残しておく
方法 事前作業 AWS Console にて接続に必要な情報を控えておく
EC2 踏み台の Public IP を確認
EC2 &amp;gt; リソース &amp;gt; 該当のリソースを選択 パブリック IPv4 アドレス を確認 Elastic IP が紐付けられている場合は以下を確認する
EC2 &amp;gt; Elastic IP を選択 関連付けられたインスタンス ID が一致するものを検索する 割り当てられた IPv4 アドレス を確認 RDS プロキシの設定がされている場合は以下を確認する
RDS &amp;gt; プロキシ &amp;gt; {該当の DB 識別子} を選択 プロキシエンドポイントを確認 その他 DB のパスワード (Secrets Manager)の設定確認方法
AWS Secrets Manager &amp;gt; DB のユーザパスワードを選択 シークレットの値 &amp;gt; [シークレットの値を取得する]ボタンを押下 パスワードを確認する pgAdmin4 での作業 プロパティにそれぞれ以下の値を設定する</description></item><item><title>PostgreSQL で テーブルのカラム内の特定の文字数を取得する方法</title><link>https://kkawazoe.github.io/blog/2022/08/22/how-to-get-count-specific-string-with-postgre-sql/</link><pubDate>Mon, 22 Aug 2022 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/08/22/how-to-get-count-specific-string-with-postgre-sql/</guid><description>PostgreSQL で テーブルのカラム内の特定の文字数を取得する方法を備忘録として残しておく
方法 sum, length, regexp_replace を使用する
環境 PostgreSQL: 13.3 実際のコード regexp_replace 関数で name カラム内の 「仼」、「鶴」を空文字に置換 length 関数で 1 の置換前の文字数および置換後の文字数を取得 sum 関数で 2 で取得したものを計算(置換前文字数 - 置換後文字数) ※coalsesce 関数は null が返却された場合のデフォルト値を設定 select &amp;#39;ユーザテーブル--名前カラム中の「仼」または「鶴」の件数&amp;#39;, coalesce(sum(length(name)-length(regexp_replace(name, &amp;#39;[仼鶴]&amp;#39;,&amp;#39;&amp;#39;,&amp;#39;g&amp;#39;))), 0) from users;</description></item><item><title>PostgreSQL で CSVをインポートする方法</title><link>https://kkawazoe.github.io/blog/2022/05/24/how-to-import-csv-with-postgre-sql/</link><pubDate>Tue, 24 May 2022 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/05/24/how-to-import-csv-with-postgre-sql/</guid><description>PostgreSQL で CSV をインポートする方法を備忘録として残しておく
方法 \COPY を使用する
環境 PostgreSQL: 13.3 実際のコード su - postgres psql \c {DB 名}; \COPY {テーブル名} FROM &amp;#39;{csvファイルパス}&amp;#39; DELIMITER &amp;#39;,&amp;#39; CSV; # 例 HEADER なしの場合 \COPY users FROM &amp;#39;./users.csv&amp;#39; DELIMITER &amp;#39;,&amp;#39; CSV; # 例 HEADER ありの場合 \COPY users FROM &amp;#39;./users.csv&amp;#39; DELIMITER &amp;#39;,&amp;#39; CSV HEADER; # エクスポートする場合は以下 su - postgres psql \c {DB 名}; \COPY {テーブル名} TO &amp;#39;{csvファイルパス}&amp;#39; WITH CSV DELIMITER &amp;#39;,&amp;#39;; # 例 HEADER なしの場合 \COPY users TO &amp;#39;.</description></item><item><title>rails で id 等の自動採番項目の不整合を修正する方法(PostgreSQL)</title><link>https://kkawazoe.github.io/blog/2022/05/24/how-to-auto-seq-for-postgre-sql-with-rails/</link><pubDate>Tue, 24 May 2022 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/05/24/how-to-auto-seq-for-postgre-sql-with-rails/</guid><description>rails で 自動採番項目の不整合を修正する方法を備忘録として残しておく
方法 reset_pk_sequence! を使用する
環境 rails: 6.1.4 実際のコード ActiveRecord::Base.connection.tables.each do |table_name| ActiveRecord::Base.connection.reset_pk_sequence!(table_name) end</description></item></channel></rss>