<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitHub on Note To Self ~One Step At A Time~</title><link>https://kkawazoe.github.io/tags/github/</link><description>Recent content in GitHub on Note To Self ~One Step At A Time~</description><generator>Hugo -- gohugo.io</generator><language>jp</language><lastBuildDate>Tue, 07 May 2024 12:00:00 +0900</lastBuildDate><atom:link href="https://kkawazoe.github.io/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub Actions をローカルで実行する方法</title><link>https://kkawazoe.github.io/blog/2024/05/07/how-to-run-github-actions-locally/</link><pubDate>Tue, 07 May 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/05/07/how-to-run-github-actions-locally/</guid><description>GitHub Actions をローカルで実行する方法を備忘録として残しておく
前提 Mac OS OS Version: Sonoma 14.4.1 Chip: Apple M1 Container 管理ツール Rancher Desktop 使用ツール act GitHub Actions 既に作成済想定 act のインストール Home Brew でインストールする
brew install act 使用方法 act で実行可能な一覧を表示する act -l WARN ⚠ You are using Apple M-series chip and you have not specified container architecture, you might encounter issues while running act.</description></item><item><title>GitHub Actions で AWS S3 に静的ファイルのディレクトリごとデプロイする方法</title><link>https://kkawazoe.github.io/blog/2024/03/06/how-to-deploy-a-whole-directory-of-static-files-to-aws-s3-with-github-actions/</link><pubDate>Wed, 06 Mar 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/03/06/how-to-deploy-a-whole-directory-of-static-files-to-aws-s3-with-github-actions/</guid><description>GitHub Actions で AWS S3 に静的ファイルのディレクトリごとデプロイする方法を備忘録として残しておく
事前準備 GitHub Actions 用の IAM ユーザを作成 GitHub の Environments に上記 IAM ユーザのシークレットを登録 Environments &amp;gt; Environment Secrets S3 のバケットを作成（ホスティングする場合は公開設定にする） S3 のバケット名はグローバルでユニークにする必要がある 公式ドキュメント 前提 S3 のバケットは作成済 Package Manager は npm を使用(yarn でも可) npm build で dist フォルダ配下にデプロイ資産が作成される 実際のコード name: cd-dev on: push: branches: - &amp;#34;develop&amp;#34; workflow_dispatch: jobs: build-deploy: runs-on: ubuntu-latest environment: develop steps: - name: Checkout uses: actions/checkout@v4 # ① - uses: actions/setup-node@v4 with: node-version: 20 cache: &amp;#39;npm&amp;#39; cache-dependency-path: ${{ github.</description></item><item><title>GitHub の PR で折りたたみコンテンツを使用する方法</title><link>https://kkawazoe.github.io/blog/2023/01/27/how-to-accordion-content-with-pr-for-github/</link><pubDate>Fri, 27 Jan 2023 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/01/27/how-to-accordion-content-with-pr-for-github/</guid><description>GitHub の PR を作成する際に縦に長くなりすぎるため、折りたたみコンテンツを使用している
その方法を備忘録として残しておく
実際のコード html タグの details, summary タグを使用する
※画像を入れる場合は、1行空行を入れないと展開されないため要注意
&amp;lt;details&amp;gt; &amp;lt;summary&amp;gt;その１&amp;lt;/summary&amp;gt; ![画像1](/images/logo/github_logo.svg) &amp;lt;/details&amp;gt;</description></item><item><title>Hugo と GitHub Pages の構成で自動デプロイを行う方法</title><link>https://kkawazoe.github.io/blog/2022/12/17/how-to-auto-deploy-configure-hugo-and-github-pages/</link><pubDate>Sat, 17 Dec 2022 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/12/17/how-to-auto-deploy-configure-hugo-and-github-pages/</guid><description>元々バッチを使用して手動でデプロイを行っていたが、自動デプロイする方法がないか調査を行った
その結果を備忘録として残しておく
前提 [構成]
Hugo + GitHub Pages(master ブランチが対象)
※source ブランチを Hugo で変換して master ブランチに静的サイト用の資産を配置する Hugo テーマは submodule として取り込み 実際のコード GitHub Actions を使用する
リポジトリ直下に .github/workflows フォルダを作成して配下に yml ファイルを配置することで GitHub Actions が登録される
※ source ブランチの push をトリガーに自動デプロイを行う
source ブランチをチェックアウト Hugo(Docker) を使用して、静的サイト用の資産を作成 master ブランチに push して GitHub Pages にデプロイする name: Deploy on: push: branches: - source # Target Branch Name jobs: deploy: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .</description></item><item><title>GitHub で自分にレビュー依頼が来ているプルリクエストを一覧で表示する方法</title><link>https://kkawazoe.github.io/blog/2021/06/02/how-to-show-reviewer-pullrequest-assign-self/</link><pubDate>Wed, 02 Jun 2021 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2021/06/02/how-to-show-reviewer-pullrequest-assign-self/</guid><description>経緯 表題の件を行う必要があり調査を行ったため備忘録として残しておく
手順 1. GitHub にログインする 2. 以下を GitHub 内で検索する is:open is:pr review-requested:{自分のユーザー名} もしくは rewiew-requested で確認可能 ※PR 内でコメントをつけたりすると対象から外れてしまうため注意が必要
追記 以下で検索すればコメント等つけた場合も含めて検索されそう ※こちらは逆に未レビューのものが対象から外れてしまうため注意が必要
is:open is:pr reviewed-by:{自分のユーザー名} その他 他のコマンドについては 参考 を参照</description></item><item><title>github で access token を使用してリポジトリを clone する</title><link>https://kkawazoe.github.io/blog/2019/06/20/clone-repository-use-access-token-with-github/</link><pubDate>Thu, 20 Jun 2019 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/06/20/clone-repository-use-access-token-with-github/</guid><description>経緯 表題の件を行う必要があり対応を行ったため備忘録として残しておく
手順 1. アクセストークンを作成する GitHub アカウントにログインし，Settings &amp;gt; Developer settings から Personal access tokens を選択する
Generate new token を押下する
2. 以下のコマンドを実行してリポジトリを clone する git clone https://{アカウント名}:{アクセストークン}@github.com/{アカウント名}/{リポジトリ名} 3. ローカルの設定を追加する git config --local user.name {アカウント名} git config --local user.email {アカウントのメールアドレス}</description></item><item><title>Git コマンドについて</title><link>https://kkawazoe.github.io/blog/2019/04/18/about-git-command/</link><pubDate>Thu, 18 Apr 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/18/about-git-command/</guid><description>基本的なコマンドを含めて備忘録として残しておく
実際のコード 基本的な流れ Git 初期化 git init Git 接続先設定 git remote add {Fork 元リモート名} {Fork 元接続先URL} git remote add {Fork 先リモート名} {Fork 先接続先URL} 最新ソース取得 git pull {Fork 元リモート名} {ブランチ名} トピックブランチ作成 git checkout -b topic/#{issue番号}-作業者名 開発 ステージングにあげる git add -A # untracked files を除いてステージングに挙げる場合は以下 git add -u コミットする git commit -m &amp;#34;コメント&amp;#34; プルリクエストを投げる git push {Fork 元リモート名} {ブランチ名} ※修正がある場合はgit addから先を繰り返し
その他 ローカルの修正を元に戻す 一部ファイルのみ戻す場合</description></item><item><title>GitHub への公開鍵の登録</title><link>https://kkawazoe.github.io/blog/2019/04/15/register-public-key-on-github/</link><pubDate>Mon, 15 Apr 2019 11:51:14 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/15/register-public-key-on-github/</guid><description>毎回、PC をセットアップする際に調べてしまうため備忘録として残しておく
実際のコード Mac 以下のコマンドを GitHub のEメールアドレスに置き換えて実行 $ ssh-keygen -t rsa -b 4096 -C &amp;#34;your_email@example.com&amp;#34; -f &amp;#34;id_rsa&amp;#34; &amp;gt; Generating public/private rsa key pair. 以下が表示されるのでファイル場所を入力(デフォルトでいい場合は「Enter」押下) &amp;gt; Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter] 以下が表示されるのでパスフレーズを入力(なしでいい場合は「Enter」押下) &amp;gt; Enter passphrase (empty for no passphrase): [Type a passphrase] &amp;gt; Enter same passphrase again: [Type passphrase again] SSH キーを ssh-agent に追加する
4-1. バックグラウンドでssh-agentを起動
$ eval &amp;#34;$(ssh-agent -s)&amp;#34; &amp;gt; Agent pid 59566 ※ macOS Sierra 10.</description></item></channel></rss>