<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Note To Self ~One Step At A Time~</title><link>https://kkawazoe.github.io/post/</link><description>Recent content in Posts on Note To Self ~One Step At A Time~</description><generator>Hugo -- gohugo.io</generator><language>jp</language><lastBuildDate>Thu, 19 Jun 2025 00:00:00 +0900</lastBuildDate><atom:link href="https://kkawazoe.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>RSpec で Cookie のテストを行う方法</title><link>https://kkawazoe.github.io/blog/2025/06/19/how-to-test-cookies-in-rspec/</link><pubDate>Thu, 19 Jun 2025 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2025/06/19/how-to-test-cookies-in-rspec/</guid><description>RSpec で Cookie のテストを行う方法を備忘録として残しておく
環境 ruby: 3.0.5 rails: 6.1.7 テスト方法 RSpec の Controller テストで Cookie のテストを行いたい場合、response.cookies[‘key’] で Cookieの内容を取得してテストする
例. Controller 側で以下のような Cookie を設定していた場合
def sample cookies[&amp;#34;sample&amp;#34;] = &amp;#39;ok&amp;#39; end RSpec 側は以下のようにして値のテストを行うことができる
expect(response.cookies[&amp;#39;sample&amp;#39;]).to eq &amp;#39;ok&amp;#39;</description></item><item><title>Serverless 構成で lambda ローカルデバッグ用に AWS SAM CLI を使用する</title><link>https://kkawazoe.github.io/blog/2025/05/16/using-the-aws-sam-cli-for-lambda-local-debugging-in-a-serverless-configuration/</link><pubDate>Fri, 16 May 2025 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2025/05/16/using-the-aws-sam-cli-for-lambda-local-debugging-in-a-serverless-configuration/</guid><description>Serverless 構成で lambda ローカルデバッグ用に AWS SAM CLI を使用する方法を調査したものを備忘録として残しておく
環境 Infrastructure: AWS lambda: nodejs(20.X) Secret Manager RDS: PostgreSQL AWS API Gateway API Key あり AWS SAM CLI Docker Compose API 仕様書 OpenAPI 3.0 AWS SAM 環境について 必要なファイルの内、重要な部分のみ記載
フォルダ構成 ├── layers/ │ ├── package.json │ └── pg-layer.zip │ ├── scripts/ │ ├── create-pg-layer.sh │ ├── init-localstack.sh │ └── local-secret.</description></item><item><title>Rails 8 docker を使用している場合に rspec > requests spec で 403 エラーが発生した場合の確認点について</title><link>https://kkawazoe.github.io/blog/2025/05/08/rails-8-what-to-check-if-you-get-a-403-error-in-rspec-requests-spec-when-using-docker/</link><pubDate>Thu, 08 May 2025 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2025/05/08/rails-8-what-to-check-if-you-get-a-403-error-in-rspec-requests-spec-when-using-docker/</guid><description>Rails 8 docker を使用している場合に rspec &amp;gt; requests spec で 403 エラーが発生した場合の確認点について調査したものを備忘録として残しておく
環境 ruby: 3.4.2 rails: 8.0.2 mode: API mode エラー内容 Rails 6 以降で追加された DNS リバインディングに関するエラーが発生している
※エラー内容と根本原因は異なるため注意
状況としては以下の通り
Rails Server 起動しての実行は成功 docker-compose exec app bash bin/rails s -b 0.0.0.0 RSpec &amp;gt; Request 実行時に 403 エラーが発生 Request Spec 以外は成功 docker-compose exec app bash bin/rspec spec/requests/xxxx_spec.rb 下記の html が返却される &amp;lt;!-- 一部抜粋 --&amp;gt; &amp;lt;main role=&amp;#34;main&amp;#34; id=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;h2&amp;gt;To allow requests to these hosts, make sure they are valid hostnames (containing only numbers, letters, dashes and dots), then add the following to your environment configuration:&amp;lt;/h2&amp;gt; &amp;lt;pre&amp;gt; config.</description></item><item><title>Rails 8 rails new コマンドのオプションについて</title><link>https://kkawazoe.github.io/blog/2025/04/14/rails-8-about-the-rails-new-command-options/</link><pubDate>Mon, 14 Apr 2025 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2025/04/14/rails-8-about-the-rails-new-command-options/</guid><description>Rails 8 rails new コマンドのオプションについてまとめたものを備忘録として残しておく
環境 ruby: 3.4.2 rails: 8.0.2 mode: API mode 全オプション rails new -h で確認
Usage: rails new APP_PATH [options] Options: [--skip-namespace] # Skip namespace (affects only isolated engines) # Default: false [--skip-collision-check] # Skip collision check # Default: false -r, [--ruby=PATH] # Path to the Ruby binary of your choice # Default: /Users/kazuki_kawazoe/.rbenv/versions/3.4.2/bin/ruby -n, [--name=NAME] # Name of the app -m, [--template=TEMPLATE] # Path to some application template (can be a filesystem path or URL) -d, [--database=DATABASE] # Preconfigure for selected database # Default: sqlite3 # Possible values: mysql, trilogy, postgresql, sqlite3, mariadb-mysql, mariadb-trilogy -G, [--skip-git] # Skip git init, .</description></item><item><title>Cursor と Confluence および Jira との連携方法</title><link>https://kkawazoe.github.io/blog/2025/04/03/how-cursor-works-with-confluence-and-jira/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2025/04/03/how-cursor-works-with-confluence-and-jira/</guid><description>Model Context Protocol(以下、MCP)を使用して連携する
※MCP Atlassianを参照
連携方法 MCP Atlassian の導入 API トークンの取得 Atlassian Account にアクセス API トークンを作成 コピー 環境変数(例. ATLASSIAN_API_TOKEN)に設定 uv のインストール brew install uv uvx mcp-atlassian Cursor の MCP設定 { &amp;#34;mcpServers&amp;#34;: { &amp;#34;mcp-atlassian&amp;#34;: { &amp;#34;command&amp;#34;: &amp;#34;uvx&amp;#34;, &amp;#34;args&amp;#34;: [ &amp;#34;mcp-atlassian&amp;#34;, &amp;#34;--confluence-url=https://&amp;lt;&amp;lt;Your Domain Name&amp;gt;&amp;gt;.atlassian.net/wiki&amp;#34;, &amp;#34;--confluence-username=&amp;lt;&amp;lt;Your Mail Address&amp;gt;&amp;gt;&amp;#34;, &amp;#34;--confluence-token=&amp;lt;&amp;lt;ATLASSIAN_API_TOKEN&amp;gt;&amp;gt;&amp;#34;, &amp;#34;--jira-url=https://wlc-poc.atlassian.net&amp;#34;, &amp;#34;--jira-username=&amp;lt;&amp;lt;Your Mail Address&amp;gt;&amp;gt;&amp;#34;, &amp;#34;--jira-token=&amp;lt;&amp;lt;ATLASSIAN_API_TOKEN&amp;gt;&amp;gt;&amp;#34; ] } } } 利用方法 Issueの取得：「JIRA から &amp;laquo;Ticket 番号&amp;raquo; について教えて」</description></item><item><title>Rails 8 リリースノートまとめ</title><link>https://kkawazoe.github.io/blog/2025/03/19/rails-8-release-notes-summary/</link><pubDate>Wed, 19 Mar 2025 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2025/03/19/rails-8-release-notes-summary/</guid><description>Rails 8 リリースノートについてまとめたものを備忘録として残しておく
Rails 7 リリースノートまとめ Rails 7.1 リリースノートまとめ Rails 7.2 リリースノートまとめ Rails 8 系での新機能および変更点 Kamal（Docker コンテナのデプロイツール） Kamalという Docker コンテナを本番環境に簡単にデプロイするツールが同梱されるようになった
※Rails アプリケーションのデプロイで使用されていた Capistrano をコンテナように置き換えたツールのイメージ
Thruster（HTTP/2 プロキシサーバ） Rails アプリケーションの Docker ファイルに、Thruster と呼ばれるプロキシサーバの設定が含まれ、Puma の前段に配置するようになった
これにより、Nginx など別の Web サーバーを用意する必要がなくなる
Thrusterの機能 HTTP/2のサポート Let&amp;rsquo;s Encrypt による自動化された TLS 証明書の管理 公開アセット（JavaScript、CSS、画像など）の HTTP キャッシュ X-Sendfile のサポートと圧縮 Solid Cable Solid Cable によって Redis を使用せずに WebSocket を使用したリアルタイム機能を使用することができる
Solid Cache Solid Cache によってメモリを使用した Redis や Memcached よりも長期間にわたって大容量のアプリケーションのデータのキャッシュを行うことができる</description></item><item><title>Rails 7.2 リリースノートまとめ</title><link>https://kkawazoe.github.io/blog/2025/03/19/rails-7-2-release-notes-summary/</link><pubDate>Wed, 19 Mar 2025 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2025/03/19/rails-7-2-release-notes-summary/</guid><description>Rails 7.2 リリースノートについてまとめたものを備忘録として残しておく
他バージョンのリリースノートまとめ Rails 7 リリースノートまとめ Rails 7.1 リリースノートまとめ Rails 7.2 系での新機能および変更点 開発用のDockerコンテナ（devコンテナ） Docker コンテナをフル機能の開発環境として使用できる dev コンテナと呼ばれる新機能が追加されました。
デフォルトでは、以下のようなコンテナが含まれています。
データベース（SQLite, PostgreSQL, MySQL, MariaDBなど） Active Storage Redis システムテスト（Headless Chrome） 新規のアプリケーションで dev コンテナを使用するには、rails new でアプリケーションを生成する際に --devcontainer オプションを追加する
rails new myapp --devcontainer YJIT のデフォルト化 YJIT は Ruby の JIT コンパイラで、有効にすることで Rails アプリケーションのパフォーマンスを大幅に向上させ、レイテンシを15〜25%改善することができる
Rails 7.2 で Ruby 3.3以上を使用している場合は、YJIT がデフォルトで有効となる
無効にする場合は以下の設定が必要
Rails.application.config.yjit = false ブラウザのバージョンの Guard デフォルト化 アプリケーション生成時に以下の設定が Application Controller に追加されるようになった</description></item><item><title>Rails 7.1 リリースノートまとめ</title><link>https://kkawazoe.github.io/blog/2025/03/18/rails-7-1-release-notes-summary/</link><pubDate>Tue, 18 Mar 2025 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2025/03/18/rails-7-1-release-notes-summary/</guid><description>Rails 7.1 リリースノートについてまとめたものを備忘録として残しておく
他バージョンのリリースノートまとめ Rails 7 リリースノートまとめ Rails 7.1 系での新機能および変更点 Dockerfileの生成 新規アプリケーションで Dockerfile が自動生成されるようになった
複合プライマリキーのサポート 複合プライマリキーがサポートされ、マイグレーションや、Active Record のクエリメソッドなど Rails のアプリケーション全般で使用できるようになった
DB に複合プライマリキーを使用したテーブルを作成するには、以下のようにマイグレーションの change_table の primary_key: オプションにカラム名の配列を渡す
class CreateBooks &amp;lt; ActiveRecord::Migration[7.1] def change create_table :books, primary_key: [:store_id, :sku] do |t| t.integer :store_id t.string :sku t.string :name t.text :description end end end 使用例 クエリメソッド Product.find([3, &amp;#34;XYZ12345&amp;#34;]) # store_id: 3, sku: &amp;#34;XYZ12345&amp;#34;を指定 Product.where(Product.primary_key =&amp;gt; [[1, &amp;#34;ABC98765&amp;#34;], [7, &amp;#34;ZZZ11111&amp;#34;]]) # store_id: 3, sku: &amp;#34;XYZ12345&amp;#34;とstore_id: 7, sku: &amp;#34;ZZZ11111&amp;#34; Product.</description></item><item><title>Rails 7 リリースノートまとめ</title><link>https://kkawazoe.github.io/blog/2025/03/18/rails-7-release-notes-summary/</link><pubDate>Tue, 18 Mar 2025 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2025/03/18/rails-7-release-notes-summary/</guid><description>Rails 7 リリースノートについてまとめたものを備忘録として残しておく
Rails 7 系での新機能および変更点 JavaScriptフロントエンドの刷新 ESM（ECMAScript modules）や import maps を使用し、Node.js をインストールせずにモダンな JavaScript が利用可能
※デフォルトでは Hotwire, Stimulus, Turbo がインストールされる
CSS Bundling 以下のサポートが追加 Tailwind CSS PostCSS アプリケーション新規作成時に指定可能
rails new myapp --css tailwind 既存に追加する場合は Gemfile に以下を追加して
gem &amp;#39;cssbundling-rails&amp;#39; 以下のコマンドを実行することでインストールおよび初期設定が可能
bin/bundle install bin/rails css:install:tailwind Active Recordの実行時暗号化機能 データの暗号化が可能になった
bin/rails db:encryption:init コマンドを実行してランダムなキーを生成 結果をbin/rails credentials:editで開いたエディタの画面に貼り付けて保存 Model で以下のように指定 class User &amp;lt; ApplicationRecord encrypts :name end Spring のデフォルト値の変更 大規模なアプリケーション以外では Spring があまり意味をなさなくなったため、デフォルトがオフに変更</description></item><item><title>Tbls についての Tips</title><link>https://kkawazoe.github.io/blog/2025/03/14/tips-on-tbls/</link><pubDate>Fri, 14 Mar 2025 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2025/03/14/tips-on-tbls/</guid><description>Tbls についての Tipsを備忘録として残しておく
環境 OS: macOS 15.3 手順 Tbls について 実際の DB に接続してテーブル定義書を生成してくれるツール
様々な形式(markdown, Excel 等)で生成してくれる
※詳細は Tbls を参照
設定ファイルについて # # @see https://github.com/k1LoW/tbls # # Data Source Name ## @see https://github.com/k1LoW/tbls#dsn # dsn: postgres://&amp;lt;&amp;lt;user&amp;gt;&amp;gt;:&amp;lt;&amp;lt;pass&amp;gt;&amp;gt;@localhost:5432/&amp;lt;&amp;lt;dbname&amp;gt;&amp;gt; # To connect with SSL mode disabled # dsn: postgres://&amp;lt;&amp;lt;user&amp;gt;&amp;gt;:&amp;lt;&amp;lt;pass&amp;gt;&amp;gt;@localhost:5432/&amp;lt;&amp;lt;dbname&amp;gt;&amp;gt;?sslmode=disable # DSN configuration values should be found in the .env file TBLS_DSN # Disable output of schema data # Default is false disableOutputSchema: false format: # Adjust the column width of Markdown format table # Default is false adjust: true # Sort the order of table list and columns # Default is false sort: false # Display sequential numbers in table rows # Default is false number: false # The comments for each table in the Tables section of the index page will display the text up to the first double newline (first paragraph).</description></item><item><title>Terminal Ghostty の設定方法</title><link>https://kkawazoe.github.io/blog/2025/01/07/how-to-configure-terminal-ghostty/</link><pubDate>Tue, 07 Jan 2025 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2025/01/07/how-to-configure-terminal-ghostty/</guid><description>Terminal Ghostty の設定方法について調査した結果を備忘録として残しておく
環境 OS: macOS 14.7 手順 Ghostty のセットアップ フォントのインストール brew install --cask font-monaspace # Hack Nerd Font brew install font-hack-nerd-font # HackGen brew install font-hackgen # HackGen Nerd brew install font-hackgen-nerd 以下のコマンドを実行する brew install --cask ghostty mkdir -p ~/.config/ghostty vim ~/.config/ghostty/config config ファイルを修正する 設定値については参考を参照
theme = iTerm2 Pastel Dark Background font-family = HackGen35 Console NF font-size = 16 macos-non-native-fullscreen = true macos-titlebar-proxy-icon = hidden macos-titlebar-style = tabs window-padding-x = 20 window-padding-y = 20 # クイックターミナルの位置を画面下部に設定 quick-terminal-position = &amp;quot;bottom&amp;quot; # クイックターミナルを表示するスクリーンを設定 (メインスクリーン) quick-terminal-screen = &amp;quot;main&amp;quot; # アニメーション時間を設定（0で即時表示） quick-terminal-animation-duration = 0 # グローバルホットキーを設定 keybind = &amp;quot;global:ctrl+cmd+`=toggle_quick_terminal&amp;quot; Ghostty チートシート キーバインディング 内容 ⌘+T 新規タブ作成 ⌘+[ or ⌘+] タブを移動 ⌘+D 横にスプリット ⇧+⌘+D 縦にスプリット ⌘+[ or ⌘+] スプリットを移動 ⇧+⌘+↵ スプリットをズーム、ズームアウト option+click クリックしたところにカーソルを合わせられます テーマのプレビュー ghostty +list-themes</description></item><item><title>PostgreSQL で jsonb 型のカラムの一部を検索条件にする方法</title><link>https://kkawazoe.github.io/blog/2024/12/24/how-to-make-a-part-of-a-columns-of-type-jsonb-a-search-condition-in-postgresql/</link><pubDate>Tue, 24 Dec 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/12/24/how-to-make-a-part-of-a-columns-of-type-jsonb-a-search-condition-in-postgresql/</guid><description>PostgreSQL で jsonb 型のカラムの一部を検索条件にする方法を備忘録として残しておく
詳細は公式を参照
方法 以下の DB 構成およびレコードの場合
Books Table id field: SERIAL type ※Primary Key value1: 1 value2: 2 options field: JSONB type value1: {&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;aaa&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;bbb&amp;rdquo;} value2: {&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;ccc&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;ddd&amp;rdquo;} SELECT options-&amp;gt;&amp;gt;&amp;#39;key_2&amp;#39; FROM books WHERE options-&amp;gt;&amp;gt;&amp;#39;key_1&amp;#39; = &amp;#39;ccc&amp;#39;; #=&amp;gt; &amp;#39;ddd&amp;#39; 以下の DB 構成およびレコードの場合(配列)
Books Table id field: SERIAL type ※Primary Key value1: 1 value2: 2 options field: JSONB type value: [{&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;aaa&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;bbb&amp;rdquo;}, {&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;ccc&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;ddd&amp;rdquo;}] value: [{&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;eee&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;fff&amp;rdquo;}, {&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;ggg&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;hhh&amp;rdquo;}] SELECT options-&amp;gt;&amp;gt;&amp;#39;key_2&amp;#39; FROM books, JSONB_ARRAY_ELEMENTS(options) option WHERE option-&amp;gt;&amp;gt;&amp;#39;key_1&amp;#39; = &amp;#39;ccc&amp;#39;; #=&amp;gt; &amp;#39;ddd&amp;#39;</description></item><item><title>PostgreSQL で jsonb 型のカラムの一部を更新する方法</title><link>https://kkawazoe.github.io/blog/2024/12/11/how-to-update-some-columns-of-type-jsonb-in-postgresql/</link><pubDate>Wed, 11 Dec 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/12/11/how-to-update-some-columns-of-type-jsonb-in-postgresql/</guid><description>PostgreSQL で jsonb 型のカラムの一部を更新する方法を備忘録として残しておく
方法 以下の DB 構成および更新前のレコードの場合
Book Table id field: SERIAL type ※Primary Key value: 1 options field: JSONB type value: {&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;aaa&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;bbb&amp;rdquo;} UPDATE book SET options = options || &amp;#39;{&amp;#34;key_1&amp;#34;: &amp;#34;ccc&amp;#34;}&amp;#39;, WHERE id = 1; 更新後
Book Table id field: SERIAL type ※Primary Key value: 1 options field: JSONB type value: {&amp;ldquo;key_1&amp;rdquo;: &amp;ldquo;ccc&amp;rdquo;, &amp;ldquo;key_2&amp;rdquo;: &amp;ldquo;bbb&amp;rdquo;}</description></item><item><title>数値文字列の並び替え方法</title><link>https://kkawazoe.github.io/blog/2024/11/22/how-to-sort-numeric-strings/</link><pubDate>Fri, 22 Nov 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/11/22/how-to-sort-numeric-strings/</guid><description>数値文字列の並び替え方法を備忘録として残しておく
方法 localeCompare メソッドの option numeric を使用する
例.
数値以外の文字を含むパターン Before Sort [&amp;ldquo;v1.0&amp;rdquo;, &amp;ldquo;v2.1&amp;rdquo;, &amp;ldquo;v1.4&amp;rdquo;, &amp;ldquo;v2.0&amp;rdquo;, &amp;ldquo;v1.11.3&amp;rdquo;, &amp;ldquo;v1.1.4&amp;rdquo;, &amp;ldquo;v1.1.1&amp;rdquo;] After Sort [&amp;ldquo;v2.1&amp;rdquo;, &amp;ldquo;v2.0&amp;rdquo;, &amp;ldquo;v1.11.3&amp;rdquo;, &amp;ldquo;v1.4&amp;rdquo;, &amp;ldquo;v1.1.4&amp;rdquo;, &amp;ldquo;v1.1.1&amp;rdquo;, &amp;ldquo;v1.0&amp;rdquo;] 数値以外の文字を含まないパターン Before Sort [&amp;ldquo;1.0&amp;rdquo;, &amp;ldquo;2.1&amp;rdquo;, &amp;ldquo;1.4&amp;rdquo;, &amp;ldquo;2.0&amp;rdquo;, &amp;ldquo;1.11.3&amp;rdquo;, &amp;ldquo;1.1.4&amp;rdquo;, &amp;ldquo;1.1.1&amp;rdquo;] After Sort [&amp;ldquo;2.1&amp;rdquo;, &amp;ldquo;2.0&amp;rdquo;, &amp;ldquo;1.11.3&amp;rdquo;, &amp;ldquo;1.4&amp;rdquo;, &amp;ldquo;1.1.4&amp;rdquo;, &amp;ldquo;1.1.1&amp;rdquo;, &amp;ldquo;1.0&amp;rdquo;] 実際のコード</description></item><item><title>長期間使用していない AWS Lambda の inactive 状態を active 状態にする方法</title><link>https://kkawazoe.github.io/blog/2024/11/21/solution-if-you-want-to-keep-amazon-rds-stopped/</link><pubDate>Thu, 21 Nov 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/11/21/solution-if-you-want-to-keep-amazon-rds-stopped/</guid><description>長期間使用していない AWS Lambda の inactive 状態を active 状態にする方法を備忘録として残しておく
事象 関数が数週間アイドルのままの場合、Inactive 状態になり、その状態で関数を呼び出すとエラーになる
詳細は以下を参照
AWS Lambda関数の状態の追跡 対象の洗い出し 以下のスクリプトを AWS CLI にて使用することで対象の洗い出しが行える
#!/bin/sh aws --profile &amp;lt;&amp;lt;プロフィール名&amp;gt;&amp;gt; lambda list-functions --region &amp;lt;&amp;lt;リージョン名&amp;gt;&amp;gt; --query &amp;#39;Functions[?starts_with(FunctionName, `&amp;lt;&amp;lt;関数名プレフィックス&amp;gt;&amp;gt;`) == `true`].FunctionName&amp;#39; &amp;gt; lambda_list.json lambda_names=`jq -r .[] lambda_list.json` for lambda_name in $lambda_names; do aws --profile &amp;lt;&amp;lt;プロフィール名&amp;gt;&amp;gt; lambda get-function --output text --function-name $lambda_name --query &amp;#39;Configuration.[FunctionName, State, LastUpdateStatus]&amp;#39; | sort -k 1 | column -t -s &amp;#34;`printf &amp;#39;\t&amp;#39;`&amp;#34; done 解消方法 inactive の状態で lambda を実行するとエラーになるがしばらくすると active 状態となり実行可能となる</description></item><item><title>Gmail でエイリアスを除くメールアドレスでフィルターをかける方法</title><link>https://kkawazoe.github.io/blog/2024/11/12/how-to-filter-by-mail-address-except-aliases-in-gmail/</link><pubDate>Tue, 12 Nov 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/11/12/how-to-filter-by-mail-address-except-aliases-in-gmail/</guid><description>Gmail でエイリアスを除くメールアドレスでフィルターをかける方法を備忘録として残しておく
方法 「&amp;quot;」で囲んだ上で「@」を半角空白に置換してフィルターをかける
例.
メールアドレス: mail-address@gmail.com
=&amp;gt; &amp;quot;mail-address gmail.com&amp;quot;</description></item><item><title>DMARC Reports を自前で集計する方法</title><link>https://kkawazoe.github.io/blog/2024/11/05/how-to-compile-dmarc-reports-on-your-own/</link><pubDate>Tue, 05 Nov 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/11/05/how-to-compile-dmarc-reports-on-your-own/</guid><description>DMARC Reports を自前で集計する方法を備忘録として残しておく
方法 GAS(Google Apps Script) を使用して集約する
新規で Spread Sheet を作成 「拡張機能」&amp;gt;「Apps Script」を選択 「ファイル」&amp;gt;「コード.gs」のデフォルトで記載されているソースを削除して以下を貼り付ける let today = new Date(); let targetDate = new Date(today); let nextDate = new Date(today); targetDate.setDate(today.getDate() - 1); nextDate.setDate(targetDate.getDate() + 1); const folderId = '&amp;lt;&amp;lt;Folder ID&amp;gt;&amp;gt;'; // レポートファイルを保存する親フォルダIDを指定 const sheetId = '&amp;lt;&amp;lt;Sheet ID&amp;gt;&amp;gt;'; // レポートを出力するスプレッドシートIDを指定 // 実行日の前日のメールを検索 // DMARC レポートを取得できる検索条件を指定する const query = 'From:noreply-dmarc-support@google.com after:' + Utilities.formatDate(targetDate, Session.getScriptTimeZone(), 'yyyy/MM/dd') + ' before:' + Utilities.</description></item><item><title>Amazon RDS を停止させたままにしたい場合の解決法</title><link>https://kkawazoe.github.io/blog/2024/10/29/solution-if-you-want-to-keep-amazon-rds-stopped/</link><pubDate>Tue, 29 Oct 2024 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/10/29/solution-if-you-want-to-keep-amazon-rds-stopped/</guid><description>Amazon RDS は一時停止した場合、最大7日間までしか停止できない
しかし停止させたままにしたい状況が発生したため調査を行なった
その際のまとめを備忘録として残しておく
解決案 Lambda 関数を使用する 公式推奨 EventBridge を使用する どちらかというと夜間休日止めるのに最適 実際の手順 Lambda 関数を使用する IAM &amp;gt; ポリシー を選択
以下でポリシーを作成
{ &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [ { &amp;#34;Sid&amp;#34;: &amp;#34;VisualEditor0&amp;#34;, &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, &amp;#34;Action&amp;#34;: [ &amp;#34;rds:StartDBCluster&amp;#34;, &amp;#34;rds:StopDBCluster&amp;#34;, &amp;#34;rds:ListTagsForResource&amp;#34;, &amp;#34;rds:DescribeDBInstances&amp;#34;, &amp;#34;rds:StopDBInstance&amp;#34;, &amp;#34;rds:DescribeDBClusters&amp;#34;, &amp;#34;rds:StartDBInstance&amp;#34; ], &amp;#34;Resource&amp;#34;: &amp;#34;*&amp;#34; } ] } IAM &amp;gt; ロール を選択
以下でロールを作成
信頼できるエンティティタイプを選択: AWS サービス またはサービスを選択してユースケースを表示: Lambda ポリシー: 手順 2 で作成したポリシー RDS &amp;gt; データベース &amp;gt; &amp;laquo;該当の DB インスタンス&amp;raquo; を選択</description></item><item><title>VSCode Extension の Postman でコレクションをエクスポートする方法</title><link>https://kkawazoe.github.io/blog/2024/10/02/how-to-export-collections-with-postman-in-vscode-extension/</link><pubDate>Wed, 02 Oct 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/10/02/how-to-export-collections-with-postman-in-vscode-extension/</guid><description>VSCode Extension の Postman でコレクションをエクスポートする方法について調査した結果を備忘録として残しておく
前提 VSCode Extension の Postman にはコレクションのインポート機能は存在するがエクスポート機能は存在しない
そのため、Postman のアカウントに紐づいていることを利用して Web 版の Postman にてエクスポートする
手順 Web 版の Postman にアクセスする VSCode Extension の Postman と同じアカウントにログインする Workspaces &amp;gt; 該当の Workspace を選択 エクスポートしたいコレクションのメニューより「Export」を選択 エクスポートを行う</description></item><item><title>Terminal Alacritty の設定方法</title><link>https://kkawazoe.github.io/blog/2024/09/30/how-to-configure-terminal-alacritty/</link><pubDate>Mon, 30 Sep 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/09/30/how-to-configure-terminal-alacritty/</guid><description>Terminal Alacritty の設定方法について調査した結果を備忘録として残しておく
環境 OS: macOS 14.7 手順 Alacritty のセットアップ フォントのインストール brew install --cask font-monaspace # Hack Nerd Font brew install font-hack-nerd-font # HackGen brew install font-hackgen # HackGen Nerd brew install font-hackgen-nerd 以下のコマンドを実行する brew install --cask alacritty mkdir -p ~/.config/alacritty vim ~/.config/alacritty/alacritty.toml config ファイルを修正する 設定値については参考を参照
import = [ &amp;#34;~/.config/alacritty/themes/themes/pastel_dark.toml&amp;#34; # theme ] [env] TERM = &amp;#34;xterm-256color&amp;#34; [window] padding.x = 10 padding.y = 10 decorations = &amp;#34;Full&amp;#34; opacity = 0.</description></item><item><title>Google Form のログインが必須になる設定について</title><link>https://kkawazoe.github.io/blog/2024/09/17/how-to-set-up-google-form-to-require-login/</link><pubDate>Tue, 17 Sep 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/09/17/how-to-set-up-google-form-to-require-login/</guid><description>Google Form のログインが必須になる設定について調査した結果を備忘録として残しておく
Google アカウントでのログインが必須となる設定 メールアドレスを収集する 回答の編集を許可する 回答を1回に制限する 質問にファイルアップロードが含まれている場合</description></item><item><title>AWS コスト削減 Tips その2</title><link>https://kkawazoe.github.io/blog/2024/09/06/aws-cost-reduction-tips-part-2/</link><pubDate>Fri, 06 Sep 2024 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/09/06/aws-cost-reduction-tips-part-2/</guid><description>AWS コスト削減 Tipsを備忘録として残しておく
[前回までの記事]
AWS コスト削減 Tips CloudWatch 全体コストの確認 Cost Explorer にて確認
※詳細は公式を参照
[レポートパラメータ]
日付範囲 任意 ※月単位で確認するのであれば「6ヶ月」等を指定 粒度 任意 ※月単位で確認するのであれば「月別」を指定 グループ化の条件 ディメンション 使用タイプ フィルター サービス CloudWatch リージョン 任意 Data-Processing-bytesコスト詳細確認 手順は公式を参照 サイズ降順で並んで出力される コスト削減方法 ログ送信量を削減 ※効果中 〜 効果大 console.log を削除 CloudWatch への出力を text =&amp;gt; json に変更してログレベルを制御 例.</description></item><item><title>AWS コスト削減 Tips</title><link>https://kkawazoe.github.io/blog/2024/09/06/aws-cost-reduction-tips/</link><pubDate>Fri, 06 Sep 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/09/06/aws-cost-reduction-tips/</guid><description>AWS コスト削減 Tipsを備忘録として残しておく
EC2 インスタンスタイプの変更 ※効果小 〜 効果中 最適なインスタンスタイプの選定については、公式参照 使用していない期間(夜間/休日等)での停止 ※効果大 特に開発・検証環境については検討する余地あり 踏み台サーバとして運用している場合は、本番環境も検討する余地あり NAT Gateway 使用していない期間(夜間/休日等)での削除 ※効果大 特に開発・検証環境については検討する余地あり 但し、再作成とセットで自動化する必要あり RDS 使用していない期間(夜間/休日等)での停止 ※効果大 特に開発・検証環境については検討する余地あり EC2 と比較して停止状態からの起動に時間がかかるため注意が必要 DB のデータ容量によるが 15 〜 30 分程度みた方が良い Backup に関わるコスト確認 ※効果小 〜 効果中 バックアップ要件に関わるので顧客確認要 確認方法は以下記事を参照 Amazon Aurora のバックアップストレージ費用の確認方法</description></item><item><title>AWS ルートユーザに設定されている MFA が不明な場合のログイン方法</title><link>https://kkawazoe.github.io/blog/2024/09/03/how-to-login-when-the-mfa-set-for-the-aws-root-user-is-unknown/</link><pubDate>Tue, 03 Sep 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/09/03/how-to-login-when-the-mfa-set-for-the-aws-root-user-is-unknown/</guid><description>AWS ルートユーザに設定されている MFA が不明な場合のログイン方法を備忘録として残しておく
状況 ルートユーザ メールアドレス: 把握 パスワード: 不明 MFA: 故障 or 紛失 実際の手順 公式の手順 を参考に行う
事前作業 公式の手順 を参考に行う
IAM ユーザ認証情報を使用して、更新する AWS アカウントの AWS Billing and Cost Management コンソールにログインする [Contact Information] の横にある [Edit]を選択 アカウントに関連付けられている電話番号を更新
※電話番号の国コードが正しく、余分なスペースが含まれていないことを確認 [Update]を選択 作業手順 AWS アカウントのルートユーザーの E メールアドレスを使用してサインインする [Root user sign in]ページで、ルートアカウントのパスワードを入力する [Amazon Web Services Sign In With Authentication Device]ページで、[Troubleshoot MFA? Click here] を選択 [Troubleshoot Your Authentication Device] ページで、[Sign In using alternative factors]を選択 [Step 1: Email address verification]で、メールアドレスが正しいことを検証し、[Send verification email]を選択 件名が「AWS Email Verification」である AWS からの E メールで、[Verify your email address]を選択</description></item><item><title>Amazon Aurora のバックアップストレージ費用の確認方法</title><link>https://kkawazoe.github.io/blog/2024/08/28/how-to-check-amazon-aurora-backup-storage-costs/</link><pubDate>Wed, 28 Aug 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/08/28/how-to-check-amazon-aurora-backup-storage-costs/</guid><description>AWS のコスト削減の一環として Amazon Aurora のバックアップストレージ費用の確認方法について調査した結果を備忘録として残しておく
実際の手順 Cost Explorer にて確認
[レポートパラメータ]
日付範囲 任意 ※月単位で確認するのであれば「6ヶ月」等を指定 粒度 任意 ※月単位で確認するのであれば「月別」を指定 グループ化の条件 ディメンション 使用タイプ フィルター サービス Relational Database Service（RDS） リージョン 任意 使用タイプ Aurora:BackupUsage(GB-Month) Aurora:StorageIOUsage(IOs) Aurora:StorageUsage(GB-Month)</description></item><item><title>AWS CLI で MFA 認証を設定済の IAM ユーザを使用してコマンドを実行する方法</title><link>https://kkawazoe.github.io/blog/2024/08/22/how-to-execute-commands-in-the-aws-cli-using-an-iam-user-with-mfa-authentication-already-set-up/</link><pubDate>Thu, 22 Aug 2024 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/08/22/how-to-execute-commands-in-the-aws-cli-using-an-iam-user-with-mfa-authentication-already-set-up/</guid><description>AWS CLI で MFA 認証を設定済の IAM ユーザを使用してコマンドを実行する方法について調査した結果を備忘録として残しておく
環境 OS: MacOS AWS にて IAM ユーザを作成して MFA 認証を設定済 aws-mfa をインストール済 aws-mfa 設定 IAM ユーザのアクセスキーを作成してダウンロード &amp;laquo;profile 名&amp;raquo;-long-term で Profile を設定 デフォルト Region, Output を設定したい場合は &amp;laquo;profile 名&amp;raquo; の Profile を設定 以下のコマンドを実行 # ARN は IAM &amp;gt; ユーザー &amp;gt; &amp;lt;&amp;lt;IAM ユーザ&amp;gt;&amp;gt; の [セキュリティ認証情報]タブ &amp;gt; 多要素認証 (MFA) の識別子のため注意 aws-mfa --device arn:aws:iam::&amp;lt;&amp;lt;AWS アカウント&amp;gt;&amp;gt;:mfa/&amp;lt;&amp;lt;IAM ユーザ&amp;gt;&amp;gt; --profile &amp;lt;&amp;lt;profile 名&amp;gt;&amp;gt; 追加で ~/.aws/credentials に以下を設定 [&amp;lt;profile 名&amp;gt;-long-term] aws_mfa_device = &amp;lt;&amp;lt;arn:aws:iam::*:mfa/${aws:username}&amp;gt;&amp;gt; 使用の仕方 AWS CLI にてコマンドを実行する前に以下のコマンドを実行する</description></item><item><title>ShellScript で Amazon SNS トピックに紐づかないサブスクリプションを削除する方法</title><link>https://kkawazoe.github.io/blog/2024/07/26/how-to-remove-subscriptions-not-tied-to-amazon-sns-topics-in-shell-script/</link><pubDate>Fri, 26 Jul 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/07/26/how-to-remove-subscriptions-not-tied-to-amazon-sns-topics-in-shell-script/</guid><description>ShellScript で Amazon SNS トピックに紐づかないサブスクリプションを削除する方法について調査した結果を備忘録として残しておく
環境 OS: MacOS 実際のコード &amp;lt;&amp;lt;AWS Configure Profile&amp;gt;&amp;gt; 部分は実際の環境に応じて書き換える
#!/bin/bash AWS_PROFILE=&amp;lt;&amp;lt;AWS Configure Profile&amp;gt;&amp;gt; # SNSトピック一覧を取得 topics=$(aws sns list-topics --profile=${AWS_PROFILE} | jq -r &amp;#39;.Topics[].TopicArn&amp;#39;) # SNSサブスクリプション一覧を取得 subscriptions=$(aws sns list-subscriptions --profile=${AWS_PROFILE}) # トピックに紐づかないサブスクリプションを削除 echo $subscriptions | jq -c &amp;#39;.Subscriptions[]&amp;#39; | while read subscription; do subscriptionArn=$(echo $subscription | jq -r &amp;#39;.SubscriptionArn&amp;#39;) topicArn=$(echo $subscription | jq -r &amp;#39;.TopicArn&amp;#39;) # サブスクリプションのtopicArnがtopicsに含まれていなければ削除 if ! echo $topics | grep $topicArn &amp;gt; /dev/null then aws sns unsubscribe --subscription-arn $subscriptionArn --profile=${AWS_PROFILE} echo &amp;#34;削除したサブスクリプション: $subscriptionArn&amp;#34; fi done</description></item><item><title>ShellScript で MFA 認証設定済の IAM を使用して S3 に画像をアップロードする方法</title><link>https://kkawazoe.github.io/blog/2024/07/22/how-to-upload-images-to-s3-using-iam-with-mfa-authentication-configured-in-shell-script/</link><pubDate>Mon, 22 Jul 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/07/22/how-to-upload-images-to-s3-using-iam-with-mfa-authentication-configured-in-shell-script/</guid><description>ShellScript で MFA 認証設定済の IAM を使用して S3 に画像をアップロードする方法について調査した結果を備忘録として残しておく
環境 OS: MacOS aws-mfa をインストールして登録済 aws-mfa 設定を参照 aws-mfa 設定 通常の aws profile を設定 1 で設定した &amp;laquo;profile 名&amp;raquo;-long-term で Profile を設定 追加で ~/.aws/credentials に以下を設定 [&amp;lt;&amp;lt;profile 名&amp;gt;&amp;gt;-long-term] aws_mfa_device = &amp;lt;&amp;lt;arn:aws:iam::*:mfa/${aws:username}&amp;gt;&amp;gt; フォルダ構成 ./ ├── img/ │ └── image_001.png └── upload_image.sh 実際のコード &amp;lt;&amp;lt;AWS Profile Prefix&amp;gt;&amp;gt; 部分は実際の環境に応じて書き換える
#!/bin/sh # Shared AWS_PROFILE_PREFIX=&amp;lt;&amp;lt;AWS Profile Prefix&amp;gt;&amp;gt; IMAGE_UPLOAD_DIR=img read -p &amp;#34;Which environment connect to?</description></item><item><title>ShellScript で踏み台サーバ(EC2)経由で DB にアクセスして SQL を実行する方法</title><link>https://kkawazoe.github.io/blog/2024/07/18/how-to-access-a-db-via-a-stepping-stone-server-and-execute-sql-in-shell-script/</link><pubDate>Thu, 18 Jul 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/07/18/how-to-access-a-db-via-a-stepping-stone-server-and-execute-sql-in-shell-script/</guid><description>ShellScript で踏み台サーバ(EC2)経由で DB にアクセスして SQL を実行する方法について調査した結果を備忘録として残しておく
環境 OS: MacOS DB: PostgreSQL フォルダ構成 ./ ├── sql/ │ └── execute.sql └── execute_sql.sh 実際のコード 環境変数(xxx 部分)は実際の環境に応じて書き換える
#!/bin/sh # DEV EC2_HOST_DEV=xxx EC2_PEM_KEY_DEV=xxx DB_HOST_DEV=xxx DB_PORT_DEV=5432 DB_NAME_DEV=xxx DB_USER_DEV=xxx DB_PASSWORD_DEV=xxx # STG EC2_HOST_STG=xxx EC2_PEM_KEY_STG=xxx DB_HOST_STG=xxx DB_PORT_STG=5432 DB_NAME_STG=xxx DB_USER_STG=xxx DB_PASSWORD_STG=xxx # PRD EC2_HOST_PRD=xxx EC2_PEM_KEY_PRD=xxx DB_HOST_PRD=xxx DB_PORT_PRD=5432 DB_NAME_PRD=xxx DB_USER_PRD=xxx DB_PASSWORD_PRD=xxx # Shared SQL_DIR=sql SQL_FILE=${SQL_DIR}/execute.sql LOG_FILE=log/batch.log read -p &amp;#34;Which environment connect to? (dev/stg/prd): &amp;#34; input_environment # Convert to uppercase environment=$(echo &amp;#34;${input_environment}&amp;#34; | tr &amp;#39;[:lower:]&amp;#39; &amp;#39;[:upper:]&amp;#39;) echo &amp;#34;【Start Processing】$(date &amp;#34;+%Y/%m/%d %H:%M:%S&amp;#34;)&amp;#34; &amp;gt;&amp;gt; ${LOG_FILE} 2&amp;gt;&amp;amp;1 # Check the environment case &amp;#34;${input_environment}&amp;#34; in &amp;#34;dev&amp;#34; | &amp;#34;stg&amp;#34; | &amp;#34;prd&amp;#34;) echo &amp;#34;Connecting to ${environment}environment.</description></item><item><title>API Gateway のオーソライザに Cognito を使用している API を Postman から動作させる方法</title><link>https://kkawazoe.github.io/blog/2024/06/26/how-to-make-apis-that-require-cognito-authentication-work-from-postman/</link><pubDate>Wed, 26 Jun 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/06/26/how-to-make-apis-that-require-cognito-authentication-work-from-postman/</guid><description>API Gateway のオーソライザに Cognito を使用している API を Postman から動作させる方法について調査した結果を備忘録として残しておく
実際の設定 以下の通りに URL と Header, Body を設定する Postman 設定その１ Postman 設定その２ 他の API で使用するために変数に格納する Postman 設定その3 Cognito 認証が必要な API の Authorization に変数に格納した IDToken を設定する Postman 設定その４</description></item><item><title>S3 でアップロードされているオブジェクトの総数を取得する方法</title><link>https://kkawazoe.github.io/blog/2024/06/13/how-to-get-the-total-number-of-objects-uploaded-in-s3/</link><pubDate>Thu, 13 Jun 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/06/13/how-to-get-the-total-number-of-objects-uploaded-in-s3/</guid><description>S3 でアップロードされているオブジェクトの総数を取得する方法について調査した結果を備忘録として残しておく
実際のコード aws s3 ls s3://&amp;lt;&amp;lt;bucket-name/path/to/&amp;gt;&amp;gt; --recursive --human-readable --summarize その他 最終更新日の降順でソートして出力 UI 上だとできないのでコマンドを使用する
aws s3 ls s3://&amp;lt;&amp;lt;bucket-name/path/to/&amp;gt;&amp;gt; | sort -nr</description></item><item><title>Circle CI をローカルで実行する方法</title><link>https://kkawazoe.github.io/blog/2024/06/04/how-to-run-circle-ci-locally/</link><pubDate>Tue, 04 Jun 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/06/04/how-to-run-circle-ci-locally/</guid><description>Circle CI をローカルで実行する方法を備忘録として残しておく
前提 Mac OS OS Version: Sonoma 14.4.1 Chip: Apple M1 Container 管理ツール Rancher Desktop 使用ツール Circle CI CLI Circle CI 定義ファイル 既に作成済想定 Circle CI CLI のインストール Home Brew でインストールする
brew install circleci 使用方法 CLI で定義ファイルの文法チェックを行う circleci config validate #=&amp;gt; Config file at .circleci/config.yml is valid. circleci コマンドを使用して実行する 例. build Job 確認</description></item><item><title>SendGrid の設定および動作確認方法について</title><link>https://kkawazoe.github.io/blog/2024/06/01/how-to-configure-send-grid-and-checkits-operation/</link><pubDate>Sat, 01 Jun 2024 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/06/01/how-to-configure-send-grid-and-checkits-operation/</guid><description>SendGrid の設定および動作確認方法を備忘録として残しておく
前提 2024/4/1 以降の新しい方式 Domain Authentication DNS: Amazon Route 53 実際の手順 SendGrid 管理画面にて API Key を作成
参考
SendGrid 管理画面にて Domain Authentication の設定を行う
Domain Authentication(SPF/DKIM設定)
テストメールを送信して動作確認を行う
参考
メールテンプレートを作成
参考
メールテンプレートを使用した動作確認を行う
参考1 参考2 Curl での動作確認 テンプレートなし [構文]
curl -X POST https://api.sendgrid.com/v3/mail/send \ -d &amp;#34;JSONデータを指定&amp;#34; \ -H &amp;#34;Authorization: Bearer &amp;lt;&amp;lt;API Key&amp;gt;&amp;gt;&amp;#34; \ -H &amp;#34;Content-Type: application/json&amp;#34; [JSON データ]</description></item><item><title>M1 Mac の nodenv で古い Node.js をインストールできない場合の解決方法</title><link>https://kkawazoe.github.io/blog/2024/05/30/m1-solution-for-failure-to-install-older-nodejs-with-nodenv-on-mac/</link><pubDate>Thu, 30 May 2024 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/05/30/m1-solution-for-failure-to-install-older-nodejs-with-nodenv-on-mac/</guid><description>M1 Mac の nodenv で古い Node.js をインストールできない場合の解決方法を備忘録として残しておく
前提 CPU: Apple M1 macOS: Sonoma 14.5 Node.js Version: 14.21.3 インストール時のエラー nodenv install 14.21.3 #=&amp;gt; BUILD FAILED (OS X 14.5 using node-build 4.9.138) 解決方法 以下のコマンドでインストールを行う
arch -x86_64 nodenv install 14.21.3 原因 Apple M1 は ARM(darwin-arm64) だが公式では 16 以降が対応
そのため未満のバージョンをインストールした際にエラーになる場合がある
Node.js 16 CHANGELOG</description></item><item><title>(新) AWS 認定ソリューションアーキテクト - アソシエイトへの道 その2</title><link>https://kkawazoe.github.io/blog/2024/05/19/new-road-to-aws-certified-solutions-architect-associate-part2/</link><pubDate>Sun, 19 May 2024 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/05/19/new-road-to-aws-certified-solutions-architect-associate-part2/</guid><description>AWS 認定ソリューションアーキテクト - アソシエイトを学習する中で間違えやすいポイントを備忘録として残しておく
[前回までの記事]
(新) AWS 認定ソリューションアーキテクト - アソシエイトへの道 受験結果 無事に合格した
実際に組んでみたり、ベストプラクティスを確認することが大事だと感じた
勉強に使用したもの udemy</description></item><item><title>(新) AWS 認定ソリューションアーキテクト - アソシエイトへの道</title><link>https://kkawazoe.github.io/blog/2024/05/16/new-road-to-aws-certified-solutions-architect-associate/</link><pubDate>Thu, 16 May 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/05/16/new-road-to-aws-certified-solutions-architect-associate/</guid><description>AWS 認定ソリューションアーキテクト - アソシエイトを学習する中で間違えやすいポイントを備忘録として残しておく
EC2 Auto Scaling 動的スケーリング 簡易スケーリングポリシー(ターゲッツ追跡スケーリングポリシー) 一定の CPU 利用に応じてスケーリングを実行する ステップスケーリングポリシー スケールさせるインスタンス数を段階的に増やすステップを設定する ターミネーションポリシー スケールイン時のインスタンスを終了させる方法を定義する 手動スケーリング 希望する容量を調整して、手動でスケーリングを実施する スケジュールさせたスケーリング スケーリングを実施する日時を指定して、スケーリングを実行する AWS Nitro Enclaves 高度な機密情報の保護や安全措置を向上する、分離されたコンピューティング環境を作成することができる
EBS EBS のコピーについて EBS 自体は別リージョンに移動して利用することはできない
以下のような手順が必要
スナップショットを作成 S3 スナップショットが格納される 別リージョンの S3 にコピーする 別リージョンのEBS に復元する EBS の RAID 構成 RAID 0 目的 パフォーマンスを向上させる 複数のディスクを 1 台のディスクのように扱う 読み書きを高速化する構成 ストライピング RAID 1 目的 ボリュームの冗長性を高める 2 つのボリュームを同時にミラーリングする EFS VPC 内の Amazon EFS ファイルシステムにアクセスする VPC に 1 つ以上のマウントターゲットを作成する必要がある リージョンファイルシステム AWS リージョン内の各アベイラビリティーゾーンにマウントターゲットを作成 1 ゾーンファイルシステム ファイルシステムと同じアベイラビリティーゾーンにマウントターゲットを 1 つだけ作成 VPC Direct Connect Direct Connect は AWS とオンプレミス環境間の専用線接続サービス ゲートウェイ型エンドポイント VPC 内の EC2 インスタンスから、プライベートネットワークを経由する</description></item><item><title>AWS Certificate Manager で管理している証明書一覧を全リージョンに対して取得する方法</title><link>https://kkawazoe.github.io/blog/2024/05/09/how-to-retrieve-the-list-of-certificates-managed-by-aws-certificate-manager-for-all-regions/</link><pubDate>Thu, 09 May 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/05/09/how-to-retrieve-the-list-of-certificates-managed-by-aws-certificate-manager-for-all-regions/</guid><description>AWS Certificate Manager で管理している証明書一覧を全リージョンに対して取得する方法について調査した結果を備忘録として残しておく
実際のコード # AWSのリージョンのリストを取得する REGIONS=(`aws ec2 describe-regions --query Regions[*].RegionName --output text`) # リージョン毎に証明書のリストを出力する # 証明書 Arn, ドメイン名, タイプ, ステータス, 使用中かどうか for region in ${REGIONS[@]} do echo &amp;#34;[${region}]&amp;#34; aws acm list-certificates --output text --region ${region} --query &amp;#34;CertificateSummaryList[].[CertificateArn, DomainName, Type, Status, InUse]&amp;#34; | sort -k 1 | column -t -s &amp;#34;`printf &amp;#39;\t&amp;#39;`&amp;#34; echo &amp;#34;---------------------&amp;#34; done</description></item><item><title>Circle CI で環境変数を切り替える方法</title><link>https://kkawazoe.github.io/blog/2024/05/08/how-to-run-github-actions-locally/</link><pubDate>Wed, 08 May 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/05/08/how-to-run-github-actions-locally/</guid><description>Circle CI で環境変数を切り替える方法を備忘録として残しておく
実際のコード run ステップを使用して BASH_ENV にエクスポートする
※参考を参照
steps: - run: name: Setup Environment Variables command: |echo &amp;#39;export PATH=&amp;#34;$GOPATH&amp;#34;/bin:&amp;#34;$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; &amp;#34;$BASH_ENV&amp;#34; echo &amp;#39;export GIT_SHA1=&amp;#34;$CIRCLE_SHA1&amp;#34;&amp;#39; &amp;gt;&amp;gt; &amp;#34;$BASH_ENV&amp;#34;</description></item><item><title>GitHub Actions をローカルで実行する方法</title><link>https://kkawazoe.github.io/blog/2024/05/07/how-to-run-github-actions-locally/</link><pubDate>Tue, 07 May 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/05/07/how-to-run-github-actions-locally/</guid><description>GitHub Actions をローカルで実行する方法を備忘録として残しておく
前提 Mac OS OS Version: Sonoma 14.4.1 Chip: Apple M1 Container 管理ツール Rancher Desktop 使用ツール act GitHub Actions 既に作成済想定 act のインストール Home Brew でインストールする
brew install act 使用方法 act で実行可能な一覧を表示する act -l WARN ⚠ You are using Apple M-series chip and you have not specified container architecture, you might encounter issues while running act.</description></item><item><title>Terraform のコマンドについて</title><link>https://kkawazoe.github.io/blog/2024/04/25/about-terraform-commands/</link><pubDate>Thu, 25 Apr 2024 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/04/25/about-terraform-commands/</guid><description>Terraform のコマンドについて備忘録として残しておく
実際のコード 基本の流れ 初期化 terraform init 検証 terraform validate #=&amp;gt; Success! The configuration is valid. 実行計画確認 terraform plan インフラ構築 terraform apply その他 コード自動整形 terraform fmt リソース確認 terraform show リソース削除 terraform destroy リソース削除の実行計画確認 terraform plan -destroy</description></item><item><title>Terraform の学習時に使用したドキュメントのリンク集</title><link>https://kkawazoe.github.io/blog/2024/04/25/links-to-documentation-used-when-learning-terraform/</link><pubDate>Thu, 25 Apr 2024 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/04/25/links-to-documentation-used-when-learning-terraform/</guid><description>Terraform の学習時に使用したドキュメントのリンク集を備忘録として残しておく
ドキュメントのリンク集 基本 公式ドキュメント HCL2 CLI AWS Provider コードの記載方法に関するベストプラクティス Terraform Best Practices Terraform Registry AWS VPC terraform-aws-atlantis Trouble Shooting Quick start tutorial でエラーが発生する 以下のコマンド実行時にエラーが発生
terraform apply Error: Error pinging Docker server: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running? │ │ with provider[&amp;#34;registry.terraform.io/kreuzwerker/docker&amp;#34;], │ on main.tf line 10, in provider &amp;#34;docker&amp;#34;: │ 10: provider &amp;#34;docker&amp;#34; { 以下のコマンドで docker の sock のパスを確認する</description></item><item><title>AWS Lambda の amplify-login で始まる関数の要否判断について</title><link>https://kkawazoe.github.io/blog/2024/04/24/determining-whether-a-function-starting-with-amplify-login-in-aws-lambda-is-required-or-not/</link><pubDate>Wed, 24 Apr 2024 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/04/24/determining-whether-a-function-starting-with-amplify-login-in-aws-lambda-is-required-or-not/</guid><description>AWS Lambda の amplify-login で始まる関数の要否判断について調査した結果を備忘録として残しておく
調査に至った事象 AWS より以下のメールが配信されていた
対象の Lambda 関数を確認すると掲題のものが指摘を受けていたが、作成した記憶はなく要否の判断がつかなかったため、調査を行なった
[アクションが必要です] AWS Lambda での Node.js 16 のサポート終了について | [Action Required] AWS Lambda end of support for Node.js 16 English follows Japanese | 英語のメッセージは日本語の後にございます いつもお世話になっております。 [Amazon Health Dashboard はこのコミュニケーションに関するリマインダー通知を定期的にトリガーする場合があります] お客様の AWS アカウントに現在、Node.js 16 ランタイムを使用する AWS Lambda 関数が 1 つ以上あることが判明したため、ご連絡いたしております。 Lambda での Node.js 16 のサポートは 2024 年 6 月 12 日に終了します。これは、2023 年 9 月 11 日に Node.js 16 がサポート終了 (EOL) したことに続くものです [1]。 Lambda ランタイムサポートポリシー [2] で説明されているように、Lambda の言語ランタイムのサポートはいくつかの段階で終了します。2024 年 6 月 12 日以降、Lambda は Lambda 関数で使用される Node.</description></item><item><title>draw.io で AWS の構成図を作成する際の Tips</title><link>https://kkawazoe.github.io/blog/2024/04/24/tips-for-creating-aws-configuration-diagrams-with-draw-io/</link><pubDate>Wed, 24 Apr 2024 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/04/24/tips-for-creating-aws-configuration-diagrams-with-draw-io/</guid><description>draw.io で AWS の構成図を作成する際の Tips を備忘録として残しておく
レイヤー機能を使用して重なり順を気にせずに作業する 図を追加した際に背面に隠れてしまい、重なりを修正する手間を解消する
手順 メニューバーから[表示]＞[レイヤー]を選択する
※初期状態では「背景」というレイヤーが配置されている 例えば以下のようにレイヤーを作成する
※上に表示されているレイヤーが前面に表示される AWS 構成図 レイヤー定義例 エクスポートについて さまざまな形式でエクスポートが行えるが XML 形式でエクスポートするとレイヤー情報もエクスポート可能</description></item><item><title>AWS 関連のリンクまとめ</title><link>https://kkawazoe.github.io/blog/2024/04/19/aws-related-link-summary/</link><pubDate>Fri, 19 Apr 2024 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/04/19/aws-related-link-summary/</guid><description>AWS 関連のリンクについて毎回探してしまうためまとめておく
※一度でも調査に使用したものをまとめていく
ベストプラクティスおよびサービスの導入理由 Well-Architected セキュリティの柱 検知 インフラストラクチャ保護 データ保護 AWS ホワイトペーバーとガイド DDos 耐性のベストプラクティス サービスの状態 各サービスごとのリンク Cognito ユーザプールの大文字・小文字の区別 RDS Amazon Aurora DB Aurora DB クラスターのバックアップと復元 Amazon Aurora Serverless V1 Amazon S3 への DB スナップショットデータのエクスポート Amazon Pinpoint プッシュ通知の送信 API Reference SES DMARC 対応 送信制限 本番稼働する際の制限解除について E メール受信時のフィードバックについて SNS 米国製品番号について ACM ACM 証明書について サポートされるリージョンについて 自動更新について EC2 インスタンスでパブリックキーを追加または削除する VPC AWS サービスが利用する IP アドレス範囲について WAF Managed Rules CloudFront フィールドレベル暗号化を使用した機密データの保護 API Gateway Amazon API Gateway のクォータと重要な注意点 Cloud Shell Amazon VPC AWS CloudShell での使用 classmethod の記事</description></item><item><title>Mac でディレクトリ内の差分比較を行う方法</title><link>https://kkawazoe.github.io/blog/2024/04/15/how-to-perform-a-diff-comparison-in-a-directory-on-a-mac/</link><pubDate>Mon, 15 Apr 2024 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/04/15/how-to-perform-a-diff-comparison-in-a-directory-on-a-mac/</guid><description>普段 Diff ツールに CompareMerge2 を使用しているが無料版だと 200 アイテムまでの制限があるため他の方法を調査した方法を備忘録として残しておく
手順 diff コマンドを使用する
差分ファイル名のみ表示する -r オプション: 再起的に比較する -q オプション: 差分のあるファイルのみ表示 差分の内容は非表示 diff -r -q dir001/ dir002/ 差分ファイル数をカウントする ディレクトリの差分はない前提
diff -r -q dir001/ dir002/ | wc #=&amp;gt; 0 0 0</description></item><item><title>JMeter の環境構築方法</title><link>https://kkawazoe.github.io/blog/2024/04/04/how-to-build-a-jmeter-environment/</link><pubDate>Thu, 04 Apr 2024 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/04/04/how-to-build-a-jmeter-environment/</guid><description>JMeter の環境構築方法を備忘録として残しておく
前提 Mac OS OS Version: Sonoma 14.4.1 Chip: Apple M1 Java Version: OpenJDK 21 手順 Java をインストールする ※Eclipse Temurin™ brew tap homebrew/cask-versions brew install --cask temurin21 JMeter をダウンロードする JMeter でダウンロードしても良い
brew install jmeter 以下のコマンドを実行して JMeter を起動する jmeter</description></item><item><title>Go 言語用のデバッグ環境を VS Code 上に構築する方法</title><link>https://kkawazoe.github.io/blog/2024/04/03/how-to-build-a-debugging-environment-for-the-go-language-on-vs-code/</link><pubDate>Wed, 03 Apr 2024 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/04/03/how-to-build-a-debugging-environment-for-the-go-language-on-vs-code/</guid><description>Go 言語用のデバッグ環境を VS Code 上に構築する方法を備忘録として残しておく
※環境変数読み込み時にロードエラーになっていた
前提 Mac OS OS Version: Sonoma 14.4.1 Chip: Apple M1 Go をインストール済 $GOPATH を設定済 $GOPATH/bin を環境変数 $PATH へ追加済 サーバ情報 host: 127.0.0.1 port: 3000 ディレクトリ構成 以下のような構成になっている想定
※デバッグ対象のプログラムと環境変数ファイルが異なるディレクトリに存在する
cmd ├── main.go .env 手順 VSCode に Go 言語の拡張機能をインストール コマンドパレットから Go: Install/Update Tools を選択 以下のツールを選択して実行 gopls@latest dlv@latest launch.json を編集 { // IntelliSense を使用して利用可能な属性を学べます。 // 既存の属性の説明をホバーして表示します。 // 詳細情報は次を確認してください: https://go.</description></item><item><title>AWS EC2 Instance Connect で接続する方法</title><link>https://kkawazoe.github.io/blog/2024/03/30/how-to-connect-with-aws-ec2-instance-connect/</link><pubDate>Sat, 30 Mar 2024 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/03/30/how-to-connect-with-aws-ec2-instance-connect/</guid><description>AWS EC2 Instance Connect で接続する際にエラーが発生したため、接続できるように調査した内容を備忘録として残しておく
前提 AWS EC2 Instance Connect をインストールしておく
手順 Amazon EC2 コンソール を開く ナビゲーションペインで、[インスタンス] を選択する インスタンスを選択し、[接続] を選択する [EC2 Instance Connect] を選択する ユーザー名を検証し、[Connect (接続)] を選択してターミナルウィンドウを開く 以下のエラーが発生
インスタンス接続の設定中に問題が発生し、ログインに失敗しました。このインスタンスが開始したばかりの場合は、1～2 分後にもう一度試してください 公式のトラブルシューティングを確認
=&amp;gt; セキュリティグループに、EC2 Instance Connect サービス IP がホワイトリストにされていないのが原因だった
以下のコマンドを実行して EC2 Instance Connect サービス IP を確認する curl -s https://ip-ranges.amazonaws.com/ip-ranges.json| jq -r &amp;#39;.prefixes[] | select(.region==&amp;#34;&amp;lt;&amp;lt;対象リージョン&amp;gt;&amp;gt;&amp;#34;) | select(.service==&amp;#34;EC2_INSTANCE_CONNECT&amp;#34;) | .ip_prefix&amp;#39; セキュリティグループのインバウンドルールを更新して、手順 6 で確認した IP 範囲から TCP ポート 22 にアクセスできるようにルールを更新する 再度、EC2 Instance Connect に接続する</description></item><item><title>Amazon Linux 2 に PostgreSQL 13 をインストールする方法</title><link>https://kkawazoe.github.io/blog/2024/03/29/how-to-install-postgresql-13-on-amazon-linux-2/</link><pubDate>Fri, 29 Mar 2024 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/03/29/how-to-install-postgresql-13-on-amazon-linux-2/</guid><description>Amazon Linux 2 に PostgreSQL 13 をインストールする際にエラーが発生したため、インストールできるように調査した内容を備忘録として残しておく
手順 postgresql13 を以下のコマンドでインストールする sudo amazon-linux-extras install postgresql13 以下のエラーが発生
failure: repodata/repomd.xml from pgdg-common: [Errno 256] No more mirrors to try. https://download.postgresql.org/pub/repos/yum/common/redhat/rhel-2-x86_64/repodata/repomd.xml: [Errno 14] HTTPS Error 404 - Not Found Installation failed. Check that you have permissions to install. 以下のコマンドで対象ファイルの内容を更新する ※事前にバックアップすること sudo sed -i &amp;quot;s/\$releasever/7/g&amp;quot; &amp;quot;/etc/yum.repos.d/pgdg-redhat-all.repo&amp;quot; 再度、 postgresql13 をインストールする 以下のエラーが発生
failure: repodata/repomd.xml from pgdg-common: [Errno 256] No more mirrors to try. https://download.</description></item><item><title>Amazon Aurora PostgreSQL で一部のテーブルに対するアクセス制御を行う方法</title><link>https://kkawazoe.github.io/blog/2024/03/08/how-to-control-access-to-some-tables-in-amazon-aurora-postgresql/</link><pubDate>Fri, 08 Mar 2024 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/03/08/how-to-control-access-to-some-tables-in-amazon-aurora-postgresql/</guid><description>Amazon RDS で一部のテーブルに対するアクセス制御を行う方法について調査した内容を備忘録として残しておく
前提 構成および RDS Proxy に接続可能な DB ユーザを追加する方法については前回記事を参照
前回の記事: Amazon RDS で RDS Proxy に接続可能な DB ユーザを追加する方法
手順 Role に対して適宜必要な権限を付与 例. public Schema の全テーブルへの全権限を付与
grant all on all tables in schema public to &amp;lt;&amp;lt;DB ユーザ&amp;gt;&amp;gt;; アクセス制御を行うテーブルからアクセス権限を取り消す 例. public T_USER_HISTORY テーブルのアクセス権限を取り消す
revoke select on &amp;#34;public&amp;#34;.&amp;#34;T_USER_HISTORY&amp;#34; from &amp;lt;&amp;lt;DB ユーザ&amp;gt;&amp;gt;; 権限の確認 該当テーブルの Access privileges 欄を確認して r(read) がないことを確認する
\dp #=&amp;gt; &amp;lt;&amp;lt;DB ユーザ&amp;gt;&amp;gt;=awdDxt/postgres</description></item><item><title>Amazon RDS で RDS Proxy に接続可能な DB ユーザを追加する方法</title><link>https://kkawazoe.github.io/blog/2024/03/08/how-to-add-a-db-user-that-can-connect-to-rds-proxy-in-amazon-rds/</link><pubDate>Fri, 08 Mar 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/03/08/how-to-add-a-db-user-that-can-connect-to-rds-proxy-in-amazon-rds/</guid><description>Amazon RDS で RDS Proxy に接続可能な DB ユーザを追加する方法について調査した内容を備忘録として残しておく
前提 以下の構成を想定 ※RDS は Aurora PostgreSQL Version 13.8
構成図 手順 参考
DB ユーザ追加
以下のコマンドを使用してユーザを追加する
※実運用時は、適宜必要な権限を付与する
postgres=&amp;gt; CREATE ROLE &amp;lt;&amp;lt;ロール名&amp;gt;&amp;gt; LOGIN PASSWORD &amp;#39;&amp;lt;&amp;lt;パスワード&amp;gt;&amp;gt;&amp;#39;; # 例. ログイン属性, 接続数制限なし, パスワード指定 postgres=&amp;gt; CREATE ROLE &amp;lt;&amp;lt;ロール名&amp;gt;&amp;gt; WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT NOREPLICATION NOBYPASSRLS CONNECTION LIMIT -1 PASSWORD &amp;#39;&amp;lt;&amp;lt;パスワード&amp;gt;&amp;gt;&amp;#39;; Secrets Manager にデータベース認証情報設定
AWS Secrets Manager のマネジメントコンソールから、先ほど登録した DB ユーザに対応するシークレットを作成する
設定 シークレットのタイプ: Amazon RDSデータベースの認証情報 ユーザー名: 該当のもの パスワード: 該当のもの DBインスタンス: 該当のもの RDS Proxy とシークレットの関連付け</description></item><item><title>GitHub Actions で AWS S3 に静的ファイルのディレクトリごとデプロイする方法</title><link>https://kkawazoe.github.io/blog/2024/03/06/how-to-deploy-a-whole-directory-of-static-files-to-aws-s3-with-github-actions/</link><pubDate>Wed, 06 Mar 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/03/06/how-to-deploy-a-whole-directory-of-static-files-to-aws-s3-with-github-actions/</guid><description>GitHub Actions で AWS S3 に静的ファイルのディレクトリごとデプロイする方法を備忘録として残しておく
事前準備 GitHub Actions 用の IAM ユーザを作成 GitHub の Environments に上記 IAM ユーザのシークレットを登録 Environments &amp;gt; Environment Secrets S3 のバケットを作成（ホスティングする場合は公開設定にする） S3 のバケット名はグローバルでユニークにする必要がある 公式ドキュメント 前提 S3 のバケットは作成済 Package Manager は npm を使用(yarn でも可) npm build で dist フォルダ配下にデプロイ資産が作成される 実際のコード name: cd-dev on: push: branches: - &amp;#34;develop&amp;#34; workflow_dispatch: jobs: build-deploy: runs-on: ubuntu-latest environment: develop steps: - name: Checkout uses: actions/checkout@v4 # ① - uses: actions/setup-node@v4 with: node-version: 20 cache: &amp;#39;npm&amp;#39; cache-dependency-path: ${{ github.</description></item><item><title>Amazon IAM で登録されているユーザ一覧を取得する方法</title><link>https://kkawazoe.github.io/blog/2024/02/20/how-to-get-a-list-of-registered-users-in-amazon-iam/</link><pubDate>Tue, 20 Feb 2024 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/02/20/how-to-get-a-list-of-registered-users-in-amazon-iam/</guid><description>Amazon IAM で登録されているユーザ一覧を取得する方法について調査した内容を備忘録として残しておく
方法 該当の AWS Console にログインして AWS Cloud Shell 上で以下のコマンドを実行する
実際のコード aws iam list-users \ | jq -r &amp;#39;.Users[] | [.UserName, .CreateDate, .PasswordLastUsed] | @csv&amp;#39; \ | tr -d &amp;#39;&amp;#34;&amp;#39; \ &amp;gt; iam_users_list.csv</description></item><item><title>Rancher Desktop の設定について</title><link>https://kkawazoe.github.io/blog/2024/02/08/configuring-rancher-desktop/</link><pubDate>Thu, 08 Feb 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/02/08/configuring-rancher-desktop/</guid><description>普段個人で開発している時は Docker Desktop を使用しているが仕事で使用する場合には従業員数等で有償となる
そのため、代替ツールとして Rancher Desktop を調査した結果を備忘録として残しておく
設定について 以下の設定を変更することで動作が速くなる可能性がある
Preference - Virtual Machine - Emulation Virtual Machine Type に、VZを指定する 右側に出る、VZ Option の Enable Rosetta support にチェックを入れる Rosetta で動作しているか確認 下記コマンドで ubuntu に入り、 ps -ef を実行して、/mnt/lima-rosetta/rosetta と表示されていることを確認
$ docker run -it --platform linux/amd64 ubuntu # ps -ef Unable to find image &amp;#39;ubuntu:latest&amp;#39; locally latest: Pulling from library/ubuntu 445a6a12be2b: Pull complete Digest: sha256:aabed3296a3d45cede1dc866a24476c4d7e093aa806263c27ddaadbdce3c1054 Status: Downloaded newer image for ubuntu:latest root@0f03298c4ad5:/# ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 3 03:46 pts/0 00:00:00 /mnt/lima-rosetta/rosetta /bin/bash root 9 1 0 03:46 pts/0 00:00:00 /usr/bin/ps -ef Preference - Virtual Machine - Volumes 「Preferences」ボタンを押下 Virtual Machine &amp;gt; Volumes &amp;gt; Mount Type を以下に変更する Mount Type: virtiofs Preference - Application - Administrative Access 「Preferences」ボタンを押下 Application &amp;gt; General &amp;gt; Administrative Access を以下に変更する Allow to acquire administrative credentials(sudo access) これにチェックをしないとユーザ権限で実行された際に docker.</description></item><item><title>Visual Studio Code Dev Containers での開発環境構築について</title><link>https://kkawazoe.github.io/blog/2024/02/08/building-a-development-environment-with-visual-studio-code-dev-containers/</link><pubDate>Thu, 08 Feb 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/02/08/building-a-development-environment-with-visual-studio-code-dev-containers/</guid><description>Visual Studio Code Dev Containers での開発環境構築について調査した結果を備忘録として残しておく
Dev Containers について 以下のような構成になる
Architecture Containers 引用元: https://code.visualstudio.com/docs/devcontainers/containers
以下のようなメリットがある
プロジェクトごとのミドルウェアなどをコンテナに閉じ込めることができる ホスト環境を汚さない VS Code の Extention もコンテナに閉じ込められる 環境構築を自動化できる 新規に作成したり、別のPCでの作り直しが簡単 環境構築について 前提条件 VS Code で以下の Extention をインストールする
Remote Development Dev Containers ※テンプレートを使用する場合 Docker Docker Desktop or Rancher Desktop 実際の例 新規で作成する場合 VS Code の左下の「&amp;gt;&amp;lt;」ボタンを押下 「新しい開発コンテナー&amp;hellip;」 を選択 ベースとなる設定を選択する 基本的には Dockerfile or Docker Compose の話になるのでそちらに慣れていれば問題なくできると思われる</description></item><item><title>Amazon SES でカスタムドメインに対して DMARC 対応を行う方法</title><link>https://kkawazoe.github.io/blog/2024/02/06/how-to-dmarc-support-for-custom-domains-in-amazon-ses/</link><pubDate>Tue, 06 Feb 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/02/06/how-to-dmarc-support-for-custom-domains-in-amazon-ses/</guid><description>Amazon SES でカスタムドメインに対して DMARC 対応を行う方法について調査した内容を備忘録として残しておく
前提 対象のドメインを「検証済み ID」として作成済 DKIM が設定済 DNS サービスの提供元が Route 53 方法 Amazon SES &amp;gt; 設定: 検証済み ID を選択 対象の ID を選択 カスタム MAIL FROM ドメイン &amp;gt; 「編集」ボタンを押下 以下のように設定して「保存」ボタンを押下 カスタム MAIL FROM ドメインの使用: チェック MAIL FROM ドメイン: 任意の値 MX 障害時の動作: 以下のどちらか デフォルトの MAIL FROM ドメインの使用 メッセージの拒否 DNS レコードの発行を行う Route 53 &amp;gt; ホストゾーン &amp;gt; {対象のドメイン} を選択 「レコードを作成」を押下 以下を設定する レコード名: _dmarc レコードタイプ: TXT 値: v=DMARC1; p=none テストEメール確認して OK なら値を「v=DMARC1; p=reject」, 「v=DMARC1; p=reject」の順に変更 詳細はDMARC を実装するためのベストプラクティス参照 確認方法 例えば、以下のような方法で確認する</description></item><item><title>Amazon Cognito のユーザプールのバックアップおよびリストアを行う方法</title><link>https://kkawazoe.github.io/blog/2024/02/01/how-to-backup-and-restore-an-amazon-cognito-user-pool/</link><pubDate>Thu, 01 Feb 2024 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/02/01/how-to-backup-and-restore-an-amazon-cognito-user-pool/</guid><description>Amazon Cognito のユーザプールのバックアップおよびリストアを行う方法について調査した内容を備忘録として残しておく
方法 以下の２つの方法が考えられる
Cognito User Profiles Export リファレンスアーキテクチャ Lambda でユーザプールの一覧を取得して csv で出力して S3 に保存する
※リストアはユーザ CSV インポート機能で行う 実際のコード const { stringify } = require(&amp;#34;csv-stringify/sync&amp;#34;); module.exports = async (params) =&amp;gt; { const csvString = stringify(params, { header: true, quoted_string: false }) return csvString; }; const { CognitoIdentityProvider } = require(&amp;#34;@aws-sdk/client-cognito-identity-provider&amp;#34;); const cognito = new CognitoIdentityProvider(); module.exports = async (param) =&amp;gt; { let cognitoUsers = new Array(); let cognitoData; try { let params = { UserPoolId: process.</description></item><item><title>外形監視に AWS Synthetics Canary を導入する場合に Cognito 認証と組み合わせる方法</title><link>https://kkawazoe.github.io/blog/2024/01/31/how-to-combine-with-cognito-authentication-when-deploying-aws-synthetics-canary-for-external-monitoring/</link><pubDate>Wed, 31 Jan 2024 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/01/31/how-to-combine-with-cognito-authentication-when-deploying-aws-synthetics-canary-for-external-monitoring/</guid><description>外形監視に AWS Synthetics Canary を導入する場合に Cognito 認証と組み合わせる方法について調査した内容を備忘録として残しておく
方法 CloudWatch &amp;gt; Synthetics Canary を選択 「Canary を作成」ボタンを押下 以下を設定 設計図を使用する 設計図: API Canary Canary ビルダー: 任意の Canary 名 Amazon API Gateway API を使用中: チェックを入れる API を選択: API Gateway から API とステージを選択 使用している API, ステージを選択 Host Name: 使用している Host Name を指定 HTTP リクエスト HTTP リクエストを追加ボタンを押下 監視したい API の情報を設定 スクリプトエディタ: スクリプトを参照 スケジュール: 任意のスケジュールを選択 アクセス許可 IAM ロール: 既存のロールを選択 ポリシーを参照 「保存」ボタンを押下 実際のコード スクリプト 基本的にはデフォルトのままで良いが Request Header に Cognito の ID トークンを付与する必要がある</description></item><item><title>Amazon Cognito でコマンドからユーザ登録およびパスワード設定を行う方法</title><link>https://kkawazoe.github.io/blog/2024/01/29/how-to-register-users-and-set-passwords-with-amazon-cognito-from-command/</link><pubDate>Mon, 29 Jan 2024 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/01/29/how-to-register-users-and-set-passwords-with-amazon-cognito-from-command/</guid><description>Amazon Cognito でコマンドからユーザ登録およびパスワード設定を行う方法について調査した内容を備忘録として残しておく
方法 該当の AWS Console にログインして AWS Cloud Shell 上で以下のコマンドを実行する
実際のコード ユーザ登録
&amp;ndash;user-attributes は必要に応じて増やす
※「&amp;ndash;message-action SUPPRESS」のオプションを付与することで対象ユーザへの通知を止めることが可能
aws cognito-idp admin-create-user \ --user-pool-id &amp;lt;&amp;lt;ユーザプール ID&amp;gt;&amp;gt; \ --username &amp;lt;&amp;lt;E メールアドレス ※E メールアドレスをユーザ名に設定した場合&amp;gt;&amp;gt; \ --user-attributes Name=email,Value=&amp;lt;&amp;lt;E メールアドレス&amp;gt;&amp;gt; \ Name=email_verified,Value=TRUE \ --message-action SUPPRESS パスワード設定
&amp;ndash;no-permanent は仮パスワード扱い
※「&amp;ndash;permanent」オプションを付与で恒久パスワード扱いになる
aws cognito-idp admin-set-user-password \ --user-pool-id &amp;lt;&amp;lt;ユーザプール ID&amp;gt;&amp;gt; \ --username &amp;lt;&amp;lt;ユーザ名 or sub&amp;gt;&amp;gt; \ --password &amp;lt;&amp;lt;password&amp;gt;&amp;gt; \ --no-permanent</description></item><item><title>AWS についての Tips</title><link>https://kkawazoe.github.io/blog/2024/01/17/tips-about-aws/</link><pubDate>Wed, 17 Jan 2024 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/01/17/tips-about-aws/</guid><description>AWS についての Tips について備忘録として残しておく
※適宜、更新予定
DB の接続情報の確認 EC2 踏み台の Public IP を確認
※通常は Elastic IP を付与しているので固定のはず
EC2 &amp;gt; リソース &amp;gt; 該当のリソースを選択 パブリック IPv4 アドレス を確認 RDS RDS &amp;gt; データベース &amp;gt; 該当の DB 識別子を選択 接続とセキュリティ &amp;gt; エンドポイントを確認 RDS プロキシを設定している場合は以下
RDS &amp;gt; データベース &amp;gt; 該当の DB 識別子を選択 プロキシ &amp;gt; 該当のプロキシ識別子を選択 プロキシエンドポイント &amp;gt; エンドポイントを確認 Secret Manager DB のパスワードの設定確認方法
AWS Secrets Manager &amp;gt; DB のユーザパスワードを選択 シークレットの値 &amp;gt; [シークレットの値を取得する]ボタンを押下 パスワードを確認する バッチ処理について AWS 内で定期実行バッチの有無を確認する場合は以下を確認する</description></item><item><title>Amazon Cognito でユーザプールに登録されているユーザ一覧を取得する方法</title><link>https://kkawazoe.github.io/blog/2024/01/16/how-to-get-a-list-of-users-registered-in-user-pool-in-amazon-cognito/</link><pubDate>Tue, 16 Jan 2024 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/01/16/how-to-get-a-list-of-users-registered-in-user-pool-in-amazon-cognito/</guid><description>Amazon Cognito でユーザプールに登録されているユーザ一覧を取得する方法について調査した内容を備忘録として残しておく
方法 該当の AWS Console にログインして AWS Cloud Shell 上で以下のコマンドを実行する
実際のコード aws cognito-idp list-users \ --user-pool-id {該当のユーザプール ID} \ --filter &amp;#34;{検索に使用する属性} = \&amp;#34;{検索文字列}\&amp;#34;&amp;#34; \ --attributes-to-get &amp;#34;{取得する属性(スペース区切りで複数指定可)}&amp;#34; \ | jq -r &amp;#39;.Users[] | [.Username, .Attributes[].Value] | @csv&amp;#39; \ | tr -d &amp;#39;&amp;#34;&amp;#39; \ &amp;gt; user_pool_list.csv</description></item><item><title>Amazon Lambda で登録されている関数一覧を取得する方法</title><link>https://kkawazoe.github.io/blog/2024/01/16/how-to-get-a-list-of-registered-functions-in-amazon-lambda/</link><pubDate>Tue, 16 Jan 2024 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2024/01/16/how-to-get-a-list-of-registered-functions-in-amazon-lambda/</guid><description>Amazon Lambda で登録されている関数一覧を取得する方法について調査した内容を備忘録として残しておく
方法 該当の AWS Console にログインして AWS Cloud Shell 上で以下のコマンドを実行する
実際のコード aws lambda list-functions --region {リージョン名} \ | jq &amp;#39;.Functions[] | [.FunctionName]&amp;#39; \ | jq -rs &amp;#39;map([.[]])[] | @csv&amp;#39; \ | tr -d &amp;#39;&amp;#34;&amp;#39; \ &amp;gt; lambda-functions-list.csv</description></item><item><title>Amazon Pinpoint API で push 通知を送信する方法</title><link>https://kkawazoe.github.io/blog/2023/12/28/how-to-send-push-notifications-with-amazon-pinpoint-api/</link><pubDate>Thu, 28 Dec 2023 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/12/28/how-to-send-push-notifications-with-amazon-pinpoint-api/</guid><description>Amazon Pinpoint API で push 通知を送信する方法について調査した内容を備忘録として残しておく
前提構成: 前回記事を参照
方法 デベロッパーガイドを参照
※上記の以下の部分はパラメータがほとんど同じため共通化した方が良さそう
リファクタリング前 ・・・ if (service == &amp;#39;GCM&amp;#39;) { var messageRequest = { &amp;#39;Addresses&amp;#39;: { [token]: { &amp;#39;ChannelType&amp;#39;: &amp;#39;GCM&amp;#39; } }, &amp;#39;MessageConfiguration&amp;#39;: { &amp;#39;GCMMessage&amp;#39;: { &amp;#39;Action&amp;#39;: action, &amp;#39;Body&amp;#39;: message, &amp;#39;Priority&amp;#39;: priority, &amp;#39;SilentPush&amp;#39;: silent, &amp;#39;Title&amp;#39;: title, &amp;#39;TimeToLive&amp;#39;: ttl, &amp;#39;Url&amp;#39;: url } } }; } else if (service == &amp;#39;APNS&amp;#39;) { var messageRequest = { &amp;#39;Addresses&amp;#39;: { [token]: { &amp;#39;ChannelType&amp;#39; : &amp;#39;APNS&amp;#39; } }, &amp;#39;MessageConfiguration&amp;#39;: { &amp;#39;APNSMessage&amp;#39;: { &amp;#39;Action&amp;#39;: action, &amp;#39;Body&amp;#39;: message, &amp;#39;Priority&amp;#39;: priority, &amp;#39;SilentPush&amp;#39;: silent, &amp;#39;Title&amp;#39;: title, &amp;#39;TimeToLive&amp;#39;: ttl, &amp;#39;Url&amp;#39;: url } } }; } ・・・ リファクタリング後 ・・・ var messageRequest = { &amp;#39;Addresses&amp;#39;: { [token]: { &amp;#39;ChannelType&amp;#39;: service } }, &amp;#39;MessageConfiguration&amp;#39;: { /** * リファクタリングポイント: * []とテンプレートリテラルを使用して連装配列の key を動的に生成する */ [`${service}Message`]: { &amp;#39;Action&amp;#39;: action, &amp;#39;Body&amp;#39;: message, &amp;#39;Priority&amp;#39;: priority, &amp;#39;SilentPush&amp;#39;: silent, &amp;#39;Title&amp;#39;: title, &amp;#39;TimeToLive&amp;#39;: ttl, &amp;#39;Url&amp;#39;: url } } }; ・・・</description></item><item><title>AWS と Firebase を連携して Push 通知を行う場合の設定について</title><link>https://kkawazoe.github.io/blog/2023/12/20/how-to-set-up-push-notification-with-aws-and-firebase/</link><pubDate>Wed, 20 Dec 2023 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/12/20/how-to-set-up-push-notification-with-aws-and-firebase/</guid><description>AWS と Firebase を連携して Push 通知を行う場合の設定について調査した内容を備忘録として残しておく
方法 Amazon Pinpoint を使用
Amazon Pinpoint &amp;gt; 使用を開始する &amp;gt; Pinpoint campaign orchestration を選択 [プロジェクトを管理]ボタンを押下 該当のプロジェクト名を選択 設定 &amp;gt; プッシュ通知 を選択 [編集]ボタンを押下 Apple Push Notification service (APNs) デフォルトの認証タイプ キー認証情報(推奨) 有効にする APN チャネルを選択 任意のチャネルを選択 キー ID Apple Developer Programで確認 バンドル識別子 Apple Developer Programで確認 チーム識別子 Apple Developer Programで確認 認証キー(.p8 ファイル) Apple Developer Programで取得 Firebase Cloud Messaging (FCM) デフォルトの認証タイプ トークン認証情報(推奨) サービス json (.</description></item><item><title>pgAdmin4 で AWS の EC2 内に構築された PostgreSQL にアクセスする方法</title><link>https://kkawazoe.github.io/blog/2023/12/20/how-to-access-postgresql-built-in-aws-ec2-with-pgadmin4/</link><pubDate>Wed, 20 Dec 2023 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/12/20/how-to-access-postgresql-built-in-aws-ec2-with-pgadmin4/</guid><description>pgAdmin4 で AWS の EC2 内に構築された PostgreSQL にアクセスする方法を毎回手順を確認するため備忘録として残しておく
方法 事前作業 AWS Console にて接続に必要な情報を控えておく
EC2 踏み台の Public IP を確認
EC2 &amp;gt; リソース &amp;gt; 該当のリソースを選択 パブリック IPv4 アドレス を確認 Elastic IP が紐付けられている場合は以下を確認する
EC2 &amp;gt; Elastic IP を選択 関連付けられたインスタンス ID が一致するものを検索する 割り当てられた IPv4 アドレス を確認 RDS プロキシの設定がされている場合は以下を確認する
RDS &amp;gt; プロキシ &amp;gt; {該当の DB 識別子} を選択 プロキシエンドポイントを確認 その他 DB のパスワード (Secrets Manager)の設定確認方法
AWS Secrets Manager &amp;gt; DB のユーザパスワードを選択 シークレットの値 &amp;gt; [シークレットの値を取得する]ボタンを押下 パスワードを確認する pgAdmin4 での作業 プロパティにそれぞれ以下の値を設定する</description></item><item><title>Google Analytics で Google Tag Manager で設定したイベントパラメータを計測および表示を行う方法</title><link>https://kkawazoe.github.io/blog/2023/12/02/how-to-measure-and-display-event-parameters-set-by-gtm-in-ga/</link><pubDate>Sat, 02 Dec 2023 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/12/02/how-to-measure-and-display-event-parameters-set-by-gtm-in-ga/</guid><description>Google Analytics(GA) で Google Tag Manager(以下 GTM) で設定したイベントパラメータを計測および表示を行う方法を備忘録として残しておく
前提 ソースコードに GTM との連携用のスクリプトが導入済であること ソースコード上に以下のようなカスタムイベント発火のコードが設定されていること pushDataLayer({ event: &amp;#34;watch_video&amp;#34;, userID: userId, datetime: `${date}${time}`, }); 方法 [管理] &amp;gt; [データの収集と修正] &amp;gt; [データ ストリーム]を選択 対象のサイトを選択 測定 ID をコピーして退避しておく [Google マーケティング プラットフォーム] &amp;gt; [タグマネージャー]を選択 GTM での作業 変数の登録 [変数] &amp;gt; [ユーザ定義変数] &amp;gt; [新規]ボタンを押下 変数名に「user_id」と入力 変数のタイプに[データレイヤーの変数]を選択 データレイヤーの変数名に「userId」を入力 [保存]ボタンを押下 「datetime」も同じように登録する トリガーの登録 [トリガー] &amp;gt; [新規]ボタンを押下 名称に「動画再生」と入力 [トリガーの設定]の中央アイコンを押下 [その他] &amp;gt; [カスタムイベント]を選択 イベント名に「watch_video」を入力 [保存]ボタンを押下 タグの登録 [タグ] &amp;gt; [新規]ボタンを押下 名称に「動画再生」と入力 [トリガー]の中央アイコンを押下 トリガーの登録で登録した「動画再生」を選択 [タグの設定]の中央アイコンを押下 [Google アナリティクス] &amp;gt; [Google アナリティクス: GA4 イベント]を選択 測定 ID に事前に退避しておいた測定 ID を入力 イベント名に「watch_video」を入力 イベント パラメータに 「user_id」を入力 値に「{{user_id}}」を入力 イベント パラメータに 「datetime」を入力 値に「{{datetime}}」を入力 [保存]ボタンを押下 [プレビュー]ボタンを押下してカスタムイベントが測定されることを確認 [公開]ボタンを押下 GA での作業 カスタムディメンションの設定 Google Analytics にログイン [管理]&amp;gt;[データの表示]&amp;gt;[カスタム定義]を選択 [カスタム ディメンションを作成]を押下 ディメンション名に「ユーザID」と入力 範囲に「イベント」を選択 説明に任意の値を入力 イベント パラメータに「user_id」を入力 「保存」ボタンを押下 datetime も同じように登録 ※ディメンション名は「イベント実行時間」 動画再生時間収集用の探索の設定 ※探索は前日までのデータしか対象にできないため設定の確認は後日に行うことになる</description></item><item><title>Google Tag Manager でローカル環境のデバッグを行う方法</title><link>https://kkawazoe.github.io/blog/2023/12/01/debug-to-local-environment-with-gtm/</link><pubDate>Fri, 01 Dec 2023 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/12/01/debug-to-local-environment-with-gtm/</guid><description>Google Tag Manager でローカル環境のデバッグを行う方法を備忘録として残しておく
前提 Google Tag Manager(以下 GTM) に検証用のコンテナを準備して
コンテナ ID をローカル環境に設定してあること ローカル環境を起動してブラウザでアクセスできる状態であること 方法 GTM にログイン [プレビュー]リンクから Tag Assistant を起動 Tag Assistantの「Your website’s URL」にローカル環境のURLを入力 [Connect] ボタンを押下</description></item><item><title>rails で複数検索条件のリファクタリング</title><link>https://kkawazoe.github.io/blog/2023/11/26/refactoring-to-multi-search-conditional-with-rails/</link><pubDate>Sun, 26 Nov 2023 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/11/26/refactoring-to-multi-search-conditional-with-rails/</guid><description>検索条件の入力が複数あるような画面で入力があった条件のみを AND 条件としたい場合、メソッド内に if 文が乱立してしまい、可読性が下がってしまう
そのため、将来的に条件が追加された場合でも、可読性が下がらないようにリファクタリングした内容を備忘録として残しておく
環境 ruby: 3.0.5 rails: 6.1.7 方法 検索条件をそれぞれ scope に切り出す scope 内で skip 条件を next if で記載する メソッドでそれぞれの scope を呼び出す 前提 検索条件はメソッドの引数として Hash 形式で渡される
実際の例 タイトルと内容で入力があった場合に AND 条件で検索を行い、条件にあった本を取得する
※全ての条件が未入力の場合は全件表示
class Book &amp;lt; ApplicationRecord scope :with_title, -&amp;gt; (title) do next if title.blank? where(&amp;#39;title LIKE ?&amp;#39;, &amp;#34;%#{title}%&amp;#34;) end scope :with_summary, -&amp;gt; (summary) do next if summary.blank? where(&amp;#39;summary LIKE ?&amp;#39;, &amp;#34;%#{summary}%&amp;#34;) end def self.</description></item><item><title>Mac に Warp をインストールする方法</title><link>https://kkawazoe.github.io/blog/2023/11/13/how-to-install-warp-with-mac/</link><pubDate>Mon, 13 Nov 2023 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/11/13/how-to-install-warp-with-mac/</guid><description>Mac に Warp をインストールする方法を備忘録として残しておく
手順 home brew を使用してインストール $ brew install --cask warp 設定 公式サイト を参照
注意点 日本語を入力中は Terminal 上に表示がされない Vim や Github のコミットメッセージ等に厳しい ※2023/11/13 時点
issue で長い間リクエストはされているが Feature Request</description></item><item><title>Go Tour のローカルでの実行方法</title><link>https://kkawazoe.github.io/blog/2023/06/05/how-to-run-go-tour-locally/</link><pubDate>Mon, 05 Jun 2023 12:30:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/06/05/how-to-run-go-tour-locally/</guid><description>Go Tour をローカルで実行しようとした際に手順通りに行った際にエラーが発生したため調査を行った際の調査結果を備忘録として残しておく
環境 OS : MacOS Ventura(13.4) golang: go1.20.4 エラー内容 go get github.com/atotto/go-tour-jp/gotour gotour #=&amp;gt; zsh: command not found: gotour 対応方法 以下のコマンドで実行する
tour</description></item><item><title>rails で routes.rb を分割管理する方法</title><link>https://kkawazoe.github.io/blog/2023/04/29/how-to-manage-split-routes-with-rails/</link><pubDate>Sat, 29 Apr 2023 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/04/29/how-to-manage-split-routes-with-rails/</guid><description>プロジェクト自体が大きくなってきた際に routes.rb にまとめて記載すると見づらくて追加しようとした際にわかりずらい課題が発生した
そのため、rails で routes.rb を分割管理する方法を備忘録として残しておく
参考
環境 ruby: 3.0.5 rails: 6.1.7 方法 concern を使用して共通の routes を定義する draw を使用して別ファイルに分割する 前提 config |-routes | |-concerns.rb # プロジェクト共通の routes | |-foo_service_provider.rb # Foo サービス用の routes | |-hoge_service_provider.rb # Hoge サービス用の routes | |-service_provider_common.rb # サービス共通の routes |-routes.rb 実際の例 concern :loggable do get &amp;#34;login&amp;#34;, to: &amp;#34;sessions#new&amp;#34; post &amp;#34;login&amp;#34;, to: &amp;#34;sessions#create&amp;#34; delete &amp;#34;logout&amp;#34;, to: &amp;#34;sessions#destroy&amp;#34; end concern :data do namespace :data do get &amp;#34;download&amp;#34; end end namespace :service_provider, path: &amp;#34;services&amp;#34; do concerns :loggable scope :home, as: :home do get &amp;#34;/&amp;#34;, to: &amp;#34;home#index&amp;#34; end end draw(:service_provider_common) namespace :service_provider, path: &amp;#34;services&amp;#34; do concerns :data end draw(:service_provider_common) namespace :service_provider, path: &amp;#34;services&amp;#34; do resources :users, only: [:index, :show] end # == Route Map # # Prefix Verb URI Pattern Controller#Action # admin_login GET /admin/login(.</description></item><item><title>rails で本番環境で画像が表示されない場合に確認すること(jpeg)</title><link>https://kkawazoe.github.io/blog/2023/04/12/not-displayed-image-jpeg-for-production-with-rails/</link><pubDate>Wed, 12 Apr 2023 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/04/12/not-displayed-image-jpeg-for-production-with-rails/</guid><description>rails で本番環境で画像が表示されない場合に確認することを備忘録として残しておく
※表示されない画像が jpeg の場合
環境 ruby: 3.0.5 rails: 6.1.7 事象について 開発環境では表示されていた画像が本番環境にデプロイしてみると画像が表示されない事象が発生した。
※scss の background-image の image-url かと思ったが view ファイルの image_tag で発生していた
sass-rails
原因について assets-precompile 時に xxx.jpeg =&amp;gt; xxx.jpg に統一されるため、 Not Found 扱いになるらしい
上記のため、 image_tag で指定している拡張子を jpg に指定してあげる必要がある
※可能であれば、画像自体の拡張子を jpg に統一してあげると手戻りがないと思われる</description></item><item><title>rails で ActiveModelSerializers から PankoSerializer に移行する</title><link>https://kkawazoe.github.io/blog/2023/02/11/migration-active-model-serializers-to-panko-serializer-with-rails/</link><pubDate>Sat, 11 Feb 2023 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/02/11/migration-active-model-serializers-to-panko-serializer-with-rails/</guid><description>rails で ActiveModelSerializers から PankoSerializer に移行する手順を備忘録として残しておく
※今回のは、単純な serializer のみのため、panko_serializer について検証が必要
環境 ruby: 3.0.5 rails: 6.1.7 active_model_serializers: 0.10.13 panko_serializer: 0.7.9 実際のソース [Gemfile]
- gem &amp;#39;active_model_serializers&amp;#39; + gem &amp;#39;panko_serializer&amp;#39; [serializer]
継承するクラスを変更
- class Book::ListSerializer &amp;lt; ActiveModel::Serializer + class Book::ListSerializer &amp;lt; Panko::Serializer attributes( :id, :title, :summary, :restrict, :to_favorite_registered_count ) def restrict Book.restricts[object.restrict] end end [controller]
each_serializer を使用する場合
def index @books = Book.all - render json: @books, each_serializer: Book::ListSerializer + render json: Panko::ArraySerializer.</description></item><item><title>rails で遷移元の URL を取得してリダイレクトする方法</title><link>https://kkawazoe.github.io/blog/2023/02/08/how-to-redirect-to-get-transition-url-with-rails/</link><pubDate>Wed, 08 Feb 2023 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/02/08/how-to-redirect-to-get-transition-url-with-rails/</guid><description>rails で遷移元の URL を取得してリダイレクトする方法を備忘録として残しておく
環境 ruby: 2.7.6 rails: 5.2.8.1 仕様 お気に入り登録のようにDB更新を行いたいが、画面遷移はさせたくない
(遷移元が複数ある かつ ユーザビリティ的に良くない)ため 画面遷移させないようにしたい 実際のソース controller の該当アクションを以下のようにする
class FavoritesController &amp;lt; ApplicationController def create redirect_back fallback_location: root_path end end # 以下も上手くいくが referer が取得できなかった場合を考えると上が良さそう class FavoritesController &amp;lt; ApplicationController def create redirect_to request.referer end end</description></item><item><title>rails で複合項目で一意性チェックを行う方法</title><link>https://kkawazoe.github.io/blog/2023/02/03/how-to-validate-unique-for-multi-columns-with-rails/</link><pubDate>Fri, 03 Feb 2023 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/02/03/how-to-validate-unique-for-multi-columns-with-rails/</guid><description>rails で複合項目で一意性チェックを行う方法を備忘録として残しておく
環境 ruby: 3.0.5 rails: 6.1.7 実際のコード [ER 図]
ER 図 [model]
uniqueness + scope で validate を行う
class Book has_many :book_categories, dependent: :destroy has_many :categories, through: :book_categories end class BookCategory belongs_to :book belongs_to :category # book_id + category_id で一意かどうかをチェック validates :book_id, uniqueness: { scope: :category_id } end class Category has_many :book_categories has_many :books, through: :book_categories end [migrate]
unique index を追加する
class CreateBookCategoriess &amp;lt; ActiveRecord::Migration[6.</description></item><item><title>GitHub の PR で折りたたみコンテンツを使用する方法</title><link>https://kkawazoe.github.io/blog/2023/01/27/how-to-accordion-content-with-pr-for-github/</link><pubDate>Fri, 27 Jan 2023 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/01/27/how-to-accordion-content-with-pr-for-github/</guid><description>GitHub の PR を作成する際に縦に長くなりすぎるため、折りたたみコンテンツを使用している
その方法を備忘録として残しておく
実際のコード html タグの details, summary タグを使用する
※画像を入れる場合は、1行空行を入れないと展開されないため要注意
&amp;lt;details&amp;gt; &amp;lt;summary&amp;gt;その１&amp;lt;/summary&amp;gt; ![画像1](/images/logo/github_logo.svg) &amp;lt;/details&amp;gt;</description></item><item><title>Mac(M1) で Path を通す方法</title><link>https://kkawazoe.github.io/blog/2023/01/25/how-to-through-a-path-with-m1-for-mac/</link><pubDate>Wed, 25 Jan 2023 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/01/25/how-to-through-a-path-with-m1-for-mac/</guid><description>Mac(M1) でパスを通す際に Intel の場合と同じ手順では上手くいかなかったので備忘録として残しておく
手順 例. mysql の path を通す場合 ※Homebrew でインストールしたもの
インストール先の path を確認 $ brew --prefix mysql@5.7 #=&amp;gt; /opt/homebrew/opt/mysql@5.7 ~/.zshrc に追記する $ echo &amp;#39;export PATH=&amp;#34;$PATH:/opt/homebrew/opt/mysql@5.7/bin&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc $ source ~/.zshrc 動作確認 $ mysql--version #=&amp;gt; mysql Ver 14.14 Distrib 5.7.40, for osx10.17 (x86_64) using EditLine wrapper</description></item><item><title>rails で画面表示時に小数部分の0を省略して表示する方法</title><link>https://kkawazoe.github.io/blog/2023/01/12/how-to-omit-0s-in-decimals-when-displaying-on-screen-in-rails/</link><pubDate>Thu, 12 Jan 2023 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/01/12/how-to-omit-0s-in-decimals-when-displaying-on-screen-in-rails/</guid><description>rails で画面表示時に小数部分の0を省略して表示する方法を備忘録として残しておく
環境 ruby: 3.0.4 rails: 6.1.0 実際のコード number_to_human メソッドを使用する ※参考
※strip_insignidicant_zeros オプションのデフォルトが true のため
その他のヘルパーについてはNumberHelperを参照
# erb ファイルに記載する場合は ActiveSupport::NumberHelper. は省略可 ActiveSupport::NumberHelper.number_to_human(1.0) #=&amp;gt; &amp;#34;1&amp;#34; ActiveSupport::NumberHelper.number_to_human(1.5) #=&amp;gt; &amp;#34;1.5&amp;#34; ActiveSupport::NumberHelper.number_to_human(1.530) #=&amp;gt; &amp;#34;1.53&amp;#34; ActiveSupport::NumberHelper.number_to_human(1.5301) #=&amp;gt; &amp;#34;1.53&amp;#34; ActiveSupport::NumberHelper.number_to_human(&amp;#39;1.0&amp;#39;) #=&amp;gt; &amp;#34;1&amp;#34; ActiveSupport::NumberHelper.number_to_human(&amp;#39;1.5&amp;#39;) #=&amp;gt; &amp;#34;1.5&amp;#34; ActiveSupport::NumberHelper.number_to_human(&amp;#39;1.530&amp;#39;) #=&amp;gt; &amp;#34;1.53&amp;#34; ActiveSupport::NumberHelper.number_to_human(&amp;#39;1.5301&amp;#39;) #=&amp;gt; &amp;#34;1.53&amp;#34; ActiveSupport::NumberHelper.number_to_human(Date.parse(&amp;#39;2023-01-12&amp;#39;)) #=&amp;gt; Thu, 12 Jan 2023 ActiveSupport::NumberHelper.number_to_human(&amp;#39;2023-01-12&amp;#39;) #=&amp;gt; &amp;#34;2023-01-12&amp;#34; ActiveSupport::NumberHelper.number_to_human(&amp;#39;2023.01.12&amp;#39;) #=&amp;gt; &amp;#34;2023-01-12&amp;#34; ActiveSupport::NumberHelper.number_to_human(&amp;#39;2023.01.12&amp;#39;) #=&amp;gt; &amp;#34;2023.01.12&amp;#34;</description></item><item><title>Gem でよく見る initializer で動作を変更する方法</title><link>https://kkawazoe.github.io/blog/2023/01/11/how-to-change-behavior-with-initializer-often-seen-in-gem/</link><pubDate>Wed, 11 Jan 2023 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2023/01/11/how-to-change-behavior-with-initializer-often-seen-in-gem/</guid><description>Gem でよく見る initializer で動作を変更する方法を備忘録として残しておく
環境 ruby: 3.0.4 前提 以下のような構成になっている想定
lib ├── sample_gem │ └── configuration.rb └── sample_gem.rb spec ├── configration_spec.rb └── spec_helper.rb 実際のコード 以下のようなクラスを定義する
module SampleGem # gem のクラス名 class Configuration attr_accessor :sample_confime_name # config で使用する config 名 def initialize @sample_confime_name = false end end def self.configuration @configuration ||= Configuration.new end def self.configuration=(config) @configuration = config end # ``` # SampleGem.configure do |config| # config.sample_confime_name = false # end # ``` def self.</description></item><item><title>Ransack でソートキーを複数指定する方法</title><link>https://kkawazoe.github.io/blog/2022/12/27/how-to-assignment-multiple-sort-key-with-ransack/</link><pubDate>Tue, 27 Dec 2022 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/12/27/how-to-assignment-multiple-sort-key-with-ransack/</guid><description>Ransack でソートキーを複数指定する方法を備忘録として残しておく
環境 ruby: 3.0.4 rails: 6.1.0 実際のコード sort_link ヘルパーメソッドの第三引数に指定する
※その他の機能については参考を参照
# ソート順序 第1ソートキー: last_name, 第2ソートキー: first_name # 画面上のソートリンクをクリックする度に両方のキーの昇順、降順が入れ替わる &amp;lt;%= sort_link(@q, :last_name, %i(last_name first_name), &amp;#39;Last Name&amp;#39;) %&amp;gt; 第2ソートキーを常に昇順 or 降順固定にする場合は以下のようにする
&amp;lt;%= sort_link(@q, :last_name, [:last_name, &amp;#39;first_name asc&amp;#39;], &amp;#39;Last Name&amp;#39;) %&amp;gt;</description></item><item><title>Mac OS で mov を gif に変換する方法</title><link>https://kkawazoe.github.io/blog/2022/12/18/how-to-convert-mov-to-gif-with-mac-os/</link><pubDate>Sun, 18 Dec 2022 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/12/18/how-to-convert-mov-to-gif-with-mac-os/</guid><description>Mac OS で mov を gif に変換する方法を備忘録として残しておく
手順 ffmpeg を使用する ※ファイルのリサイズのために Image Magick も使用
ffmpeg, Image Magick のインストール brew install ffmpeg brew install imagemagick gif に変換 ファイルサイズを少なくするために圧縮も行う
cd 動画のあるディレクトリ ffmpeg -i {変換対象}.mov -an -r 20 %06d.png # 20 frames/secでpng作成 ※6 桁連番の png ファイルを生成 convert *.png -resize 50% output_%06d.png # 作成した png を 50% にリサイズ convert output_*.png result.gif # gif に変換 # 生成された gif の確認は以下で行える ※Google Chrome インストールしている場合 open -a /Applications/Google\ Chrome.</description></item><item><title>Hugo と GitHub Pages の構成で自動デプロイを行う方法</title><link>https://kkawazoe.github.io/blog/2022/12/17/how-to-auto-deploy-configure-hugo-and-github-pages/</link><pubDate>Sat, 17 Dec 2022 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/12/17/how-to-auto-deploy-configure-hugo-and-github-pages/</guid><description>元々バッチを使用して手動でデプロイを行っていたが、自動デプロイする方法がないか調査を行った
その結果を備忘録として残しておく
前提 [構成]
Hugo + GitHub Pages(master ブランチが対象)
※source ブランチを Hugo で変換して master ブランチに静的サイト用の資産を配置する Hugo テーマは submodule として取り込み 実際のコード GitHub Actions を使用する
リポジトリ直下に .github/workflows フォルダを作成して配下に yml ファイルを配置することで GitHub Actions が登録される
※ source ブランチの push をトリガーに自動デプロイを行う
source ブランチをチェックアウト Hugo(Docker) を使用して、静的サイト用の資産を作成 master ブランチに push して GitHub Pages にデプロイする name: Deploy on: push: branches: - source # Target Branch Name jobs: deploy: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .</description></item><item><title>Rails で Active Record のデータを hash 形式に変換する方法</title><link>https://kkawazoe.github.io/blog/2022/12/16/how-to-convert-active-record-to-hash-with-rails/</link><pubDate>Fri, 16 Dec 2022 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/12/16/how-to-convert-active-record-to-hash-with-rails/</guid><description>Rails で Active Record のデータを キーが id, 値が Active Record であるような Hash を作る方法を備忘録として残しておく
環境 ruby: 3.0.4 rails: 6.1.0 実際のコード index_by, inject, pluck + to_h メソッドのいずれかを使用する
前提 データの登録状態
id book_id name 1 1 少年誌 2 1 青年誌 3 1 ビジネス 4 1 自己啓発 [Rails Console]
categories = Category.all.index_by(&amp;amp;:id) #=&amp;gt; { #=&amp;gt; 1=&amp;gt; #=&amp;gt; #&amp;lt;Category:0x0000562b92c5fcb0 #=&amp;gt; id: 1, #=&amp;gt; book_id: 1, #=&amp;gt; name: &amp;#34;少年誌&amp;#34;, #=&amp;gt; created_at: Wed, 24 Aug 2022 02:54:05.</description></item><item><title>Ruby Gold 認定試験 Ver 3 への道 その5</title><link>https://kkawazoe.github.io/blog/2022/12/05/road-to-ruby-gold-ver-3-part5/</link><pubDate>Mon, 05 Dec 2022 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/12/05/road-to-ruby-gold-ver-3-part5/</guid><description>Ruby Gold 認定試験の Ver 3 の勉強時に学んだことを備忘録として残しておく
[前回までの記事]
Ruby Gold 認定試験 Ver 3 への道 Ruby Gold 認定試験 Ver 3 への道 その2 Ruby Gold 認定試験 Ver 3 への道 その3 Ruby Gold 認定試験 Ver 3 への道 その4 受験結果 無事に合格した
前回、 ver 2 受験時と難易度的には同じくらいだったように思う
なので、基本的にはオブジェクト指向周りを再確認する
3 系から追加された 「hash 明示(**hash)」などはリリースノートで確認して置いた方が良いが 2.2 〜 2.7 系での変更点についても押さえておくとより良いと思う
NEWS for Ruby 3.0.0
Ruby 3.0.0 リリースノート
勉強に使用したもの 公式の模擬問題
基本的には、上記をやって該当のコードを自分でコーディングしながら、色々変更して動作確認するのが一番良さそう</description></item><item><title>Rails における Enum について</title><link>https://kkawazoe.github.io/blog/2022/12/02/about-enum-in-rails/</link><pubDate>Fri, 02 Dec 2022 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/12/02/about-enum-in-rails/</guid><description>Rails における Enum の挙動について調査した内容を備忘録として残しておく
環境 ruby: 2.7.6 rails: 5.2.8.1 実際のコード DB のカラムに対応する enum を定義した場合、自動的に scope が定義される
※Rails 6 では not_* の scope も自動的に定義される 参考
※Rails 7 では新しい構文が追加されたため、今後オプションの指定が従来のやり方だと非推奨になる可能性がある 参考
[モデル定義]
class Article &amp;lt; ApplicationRecord enum status: { draft: 0, # 下書き published: 1, # 公開中 closed: 2, # 掲載終了 }, _prefix: true end [Rails Console]
# enum 確認 Article.statuses #=&amp;gt; {&amp;#34;draft&amp;#34;=&amp;gt;0, &amp;#34;published&amp;#34;=&amp;gt;1, &amp;#34;closed&amp;#34;=&amp;gt;2} # scope Article.status_published #=&amp;gt; Article Load (7.</description></item><item><title>Ruby Gold 認定試験 Ver 3 への道 その4</title><link>https://kkawazoe.github.io/blog/2022/12/01/road-to-ruby-gold-ver-3-part4/</link><pubDate>Thu, 01 Dec 2022 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/12/01/road-to-ruby-gold-ver-3-part4/</guid><description>Ruby Gold 認定試験の Ver 3 の勉強時に学んだことを備忘録として残しておく
[前回までの記事]
Ruby Gold 認定試験 Ver 3 への道 Ruby Gold 認定試験 Ver 3 への道 その2 Ruby Gold 認定試験 Ver 3 への道 その3 環境 ruby: 3.1.2 キーワード引数 キーワード引数で a: のようなデフォルト値を指定しない場合、構文エラーにはならないが、呼び出し時に指定しなかった場合に ArgumentError になる
class KeywordArgument def foo(a:, b: &amp;#39;bbb&amp;#39;) puts &amp;#34;a: #{a}, b: #{b}&amp;#34; end end keyword_argument = KeywordArgument.new keyword_argument.foo(a: &amp;#39;aaa&amp;#39;, b: &amp;#39;BBB&amp;#39;) #=&amp;gt; a: aaa, b: BBB keyword_argument.foo(a: &amp;#39;aaa&amp;#39;) #=&amp;gt; a: aaa, b: bbb keyword_argument.</description></item><item><title>Ruby Gold 認定試験 Ver 3 への道 その3</title><link>https://kkawazoe.github.io/blog/2022/11/25/road-to-ruby-gold-ver-3-part3/</link><pubDate>Fri, 25 Nov 2022 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/11/25/road-to-ruby-gold-ver-3-part3/</guid><description>Ruby Gold 認定試験の Ver 3 の勉強時に学んだことを備忘録として残しておく
[前回までの記事]
Ruby Gold 認定試験 Ver 3 への道 Ruby Gold 認定試験 Ver 3 への道 その2 環境 ruby: 3.1.2 public_send メソッド Object#public_send メソッドは private メソッドを呼び出せない
private_send メソッドは存在しない ※private メソッドを 呼び出す場合は Object#send or BasicObject#__send__ メソッドを使用する
class PublicTest def public_method puts &amp;#39;call public methods&amp;#39; end private def private_method puts &amp;#39;call private methods&amp;#39; end end test = PublicTest.new test.public_method test.private_method #=&amp;gt; call public methods #=&amp;gt; public_send.</description></item><item><title>Ruby Gold 認定試験 Ver 3 への道 その2</title><link>https://kkawazoe.github.io/blog/2022/11/24/road-to-ruby-gold-ver-3-part2/</link><pubDate>Thu, 24 Nov 2022 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/11/24/road-to-ruby-gold-ver-3-part2/</guid><description>Ruby Gold 認定試験の Ver 3 の勉強時に学んだことを備忘録として残しておく
[前回までの記事]
Ruby Gold 認定試験 Ver 3 への道 環境 ruby: 3.1.2 __FILE__ __FILE__ が書いてあるファイルのファイル名を表す 似たようなので $0 があるがこちらは直接実行したファイルのファイル名を表す
puts __FILE__ puts $0 require_relative &amp;#39;./file_name&amp;#39; $ ruby file_name.rb __FILE__: file_name.rb $0: file_name.rb $ ruby require_file_name.rb __FILE__: file_name.rb $0: require_file_name.rb 累乗の計算 def exponentiation(n) n ** n end puts exponentiation(-1) #=&amp;gt; -1 puts exponentiation(1i) #=&amp;gt; 0.20787957635076193+0.0i 複素数 正規表現 =~ の $1 等 &amp;#39;www.ruby.co.jp&amp;#39;.match(%r(www(\.ruby\.co)(\.jp))) do |e| puts &amp;#34;match e= #{e}&amp;#34; puts &amp;#34;match e[0]= #{e[0]}&amp;#34; puts &amp;#34;match e[1]= #{e[1]}&amp;#34; puts &amp;#34;match e[2]= #{e[2]}&amp;#34; puts &amp;#34;match $0 #{$0}&amp;#34; puts &amp;#34;match $&amp;amp; #{$&amp;amp;}&amp;#34; puts &amp;#34;match $1 #{$1}&amp;#34; puts &amp;#34;match $2 #{$2}&amp;#34; end #=&amp;gt; match e= www.</description></item><item><title>Ruby Gold 認定試験 Ver 3 への道</title><link>https://kkawazoe.github.io/blog/2022/11/23/road-to-ruby-gold-ver-3/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/11/23/road-to-ruby-gold-ver-3/</guid><description>Ruby Gold 認定試験の Ver 3 の勉強時に学んだことを備忘録として残しておく
環境 ruby: 3.1.2 Numbered parameters _1 から始まる _1, _2 で 第一引数, 第二引数の意味となる
以下は同じ意味
h = { a: 1, b: 2, c: 3 } h.transform_values{|v| v * 2} #=&amp;gt; {:a=&amp;gt;2, :b=&amp;gt;4, :c=&amp;gt;6} h.transform_values{_1 * 2} #=&amp;gt; {:a=&amp;gt;2, :b=&amp;gt;4, :c=&amp;gt;6} h = { a: 1, b: 2, c: 3 } h.map{|key, value| [key, value * 2]}.to_h #=&amp;gt; {:a=&amp;gt;2, :b=&amp;gt;4, :c=&amp;gt;6} h = { a: 1, b: 2, c: 3 } h.</description></item><item><title>Visual Studio Code で拡張子毎に設定値を変更する方法</title><link>https://kkawazoe.github.io/blog/2022/11/22/how-to-modified-config-value-for-extensions-with-visual-studio-code/</link><pubDate>Tue, 22 Nov 2022 17:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/11/22/how-to-modified-config-value-for-extensions-with-visual-studio-code/</guid><description>経緯 Visual Studio Code にて保存時の空白のトリミングの挙動を markdown の場合のみ変えたくなったため調査を行なった
その結果を備忘録として残しておく
手順 コマンドパレットを開く Configure language specific settings を入力して選択する 拡張子を質問されるので markdown を選択する settings.json ファイルに以下のように編集する 実際の設定ファイル { &amp;#34;[markdown]&amp;#34;: { &amp;#34;files.trimTrailingWhitespace&amp;#34;: false } }</description></item><item><title>rails console で オートコンプリートを無効にする方法</title><link>https://kkawazoe.github.io/blog/2022/11/22/how-to-disable-auto-complete-with-rails-console/</link><pubDate>Tue, 22 Nov 2022 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/11/22/how-to-disable-auto-complete-with-rails-console/</guid><description>ruby 3.1 以降から irb でオートコンプリートが効くようになったがそれを無効にする方法を調査した
その結果を備忘録として残しておく
環境 ruby: 3.1.2 rails: 6.1.7 方法 カレントディレクトに .irbrc ファイルを作成して以下のように編集する
※他の設定値については 参考 を参照
IRB.conf[:USE_AUTOCOMPLETE] = false IRB.conf[:SAVE_HISTORY] = nil</description></item><item><title>rails で中間テーブルをチェックボックス複数選択させて生成する方法</title><link>https://kkawazoe.github.io/blog/2022/11/03/how-to-select-check-box-for-create-through-table-with-rails/</link><pubDate>Thu, 03 Nov 2022 18:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/11/03/how-to-select-check-box-for-create-through-table-with-rails/</guid><description>環境 ruby: 2.7.6 rails: 5.2.8.1 前提 rails で has_many の ids を使用して中間テーブルの関連付けを行う方法 の構成を参照
実際のコード erb で行うパターンと javascript で行うパターンはそれぞれ以下
※基本的には erb で行うと思うが、 erb の構成に対して値を受け渡す場合にjavascript のパターンを使用する
erb のパターン association を使用して as: :check_boxes オプションを指定する
&amp;lt;%= simple_form_for @book do |f| %&amp;gt; &amp;lt;%= f.association :categories, as: :check_boxes %&amp;gt; &amp;lt;%= f.button :submit %&amp;gt; &amp;lt;% end %&amp;gt; javascript のパターン 最終的に生成される params が以下のようになるように組み立てる
[&amp;quot;&amp;quot;, 1, 3]
$(&amp;#39;form&amp;#39;).append( `&amp;lt;input type=&amp;#34;hidden&amp;#34; value=&amp;#34;&amp;#34; name=&amp;#34;book[category_ids][]&amp;#34; /&amp;gt;`, ); book.</description></item><item><title>rails で has_many の ids を使用して中間テーブルの関連付けを行う方法</title><link>https://kkawazoe.github.io/blog/2022/11/01/how-to-use-has-many-ids-for-create-relation-through-table-with-rails/</link><pubDate>Tue, 01 Nov 2022 13:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/11/01/how-to-use-has-many-ids-for-create-relation-through-table-with-rails/</guid><description>環境 ruby: 2.7.6 rails: 5.2.8.1 実際のコード [ER 図]
ER 図 [model]
class Book has_many :book_categories, dependent: :destroy has_many :categories, through: :book_categories end class BookCategory belongs_to :book belongs_to :category end class Category has_many :book_categories has_many :books, through: :book_categories end [controller]
category_ids を配列形式で許可する
def create @book = Book.save!(book_params) end private def book_params params.require(:book).permit( :title, category_ids: [] ) end</description></item><item><title>ransack で scope を使用して link_to で表示する方法</title><link>https://kkawazoe.github.io/blog/2022/11/01/how-to-user-scope-for-link-to-with-ransack/</link><pubDate>Tue, 01 Nov 2022 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/11/01/how-to-user-scope-for-link-to-with-ransack/</guid><description>方法 ransackable_scopes メソッドを使用して実現する
環境 ruby: 2.7.6 rails: 5.2.8.1 実際のコード 例. User モデルの created_at カラムを基準として N 以内に作成されたユーザを取得する
[model]
# 引数なし scope :within_one_month, -&amp;gt; { where(&amp;#39;created_at &amp;gt;=&amp;#39;, Time.zone.now - 1.months) } # 引数あり scope :within_days, -&amp;gt; (day) { where(&amp;#39;created_at &amp;gt;=&amp;#39;, Time.zone.now - (day).days) } def self.ransackable_scopes(_auth_object = nil) %i(within_days within_one_month) end [erb]
&amp;lt;%= link_to( &amp;#34;1ヶ月以内に作成されたユーザ一覧&amp;#34;, users_path(@q, q: { within_one_month: true }), class: &amp;#34;btn btn-primary mr-5&amp;#34; ) link_to( &amp;#34;7日以内に作成されたユーザ一覧&amp;#34;, users_path(@q, q: { within_days: 7 }), class: &amp;#34;btn btn-primary mr-5&amp;#34; ) %&amp;gt; [controller]</description></item><item><title>rspec で factory bot を使用して複数テストを作成すると同時に関連するクラスを紐づけて動的に生成する方法</title><link>https://kkawazoe.github.io/blog/2022/10/30/how-to-dynamic-create-test-data-for-factory-bot-with-rspec/</link><pubDate>Sun, 30 Oct 2022 21:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/10/30/how-to-dynamic-create-test-data-for-factory-bot-with-rspec/</guid><description>方法 create_list と send メソッドを使用して実現する
環境 ruby: 2.7.6 rails: 5.2.8.1 rspec 3.7.0 実際のコード user のテストデータを3つ作成 かつ 関連する user_status のテストデータを紐付けおよびカラム status を動的に生成する
let(:user_status1) { UserStatus::Active } let(:user_status2) { UserStatus::Locked } let(:user_status3) { UserStatus::InActive } before do create_list(:user, 3).each.with_index(1) do |user, i| create( :user_status, user: user, status: send(&amp;#34;user_status#{i}&amp;#34;), ) end end rspec 5.2 以降であれば以下も可能 参考
let(:user_status1) { UserStatus::Active } let(:user_status2) { UserStatus::Locked } let(:user_status3) { UserStatus::InActive } before do create_list(:user, 3) do |user, i| create( :user_status, user: user, status: send(&amp;#34;user_status#{i + 1}&amp;#34;), ) end end</description></item><item><title>CSS テキストを左揃えのまま中央寄せにする方法</title><link>https://kkawazoe.github.io/blog/2022/09/14/text-align-left-center-with-css/</link><pubDate>Wed, 14 Sep 2022 23:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/09/14/text-align-left-center-with-css/</guid><description>css でテキストを左揃えのまま中央寄せにする方法を備忘録として残しておく
実際のソースおよび実行結果 中央寄せかつテキストの行頭を揃える</description></item><item><title>rails で 巨大な csv ファイルをストリーム処理する方法</title><link>https://kkawazoe.github.io/blog/2022/09/03/how-to-excute-stream-too-big-file-size-csv-with-rails/</link><pubDate>Sat, 03 Sep 2022 21:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/09/03/how-to-excute-stream-too-big-file-size-csv-with-rails/</guid><description>1 GB を超えるような csv ファイルを一度に読み込むとメモリエラーが発生する場合がある
さらに処理時間もすごくかかるため、ストリーム処理に変更などして処理の高速化した際の方法を備忘録として残しておく
方法 File#open メソッドと CSV#new メソッドを組み合わせて実現する
環境 ruby: 3.0.4 rails: 6.1.6.1 実際のコード csv ファイルの特定の文字列を置換する処理
前提 header 付の csv ファイル
リファクタリング前
class Converter def self.convert # 読み取り専用でファイルを開く read_only_file = File.open(&amp;#34;{ファイルパス}&amp;#34; , &amp;#34;r&amp;#34;) # 保存用バッファ buffer = read_only_file.read() # バッファの中身を変換 buffer.gsub!({置換対象文字列}, {置換文字列}) # ファイルを書き込みモードで開き直す file = File.open(&amp;#34;{ファイルパス}&amp;#34; , &amp;#34;w&amp;#34;) # 変更内容を出力する file.write(buffer) # close read_only_file.close() file.close() end end リファクタリング後
require &amp;#39;csv&amp;#39; require &amp;#39;fileutils&amp;#39; class Converter def self.</description></item><item><title>rails で文字列置換を行う際に対応表で置換する方法</title><link>https://kkawazoe.github.io/blog/2022/09/03/how-to-substring-map-with-rails/</link><pubDate>Sat, 03 Sep 2022 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/09/03/how-to-substring-map-with-rails/</guid><description>rails で文字列置換を行う際に対応表で置換する方法を備忘録として残しておく
方法 gsub メソッドに対して、第1引数に正規表現、第2引数に Hash を渡すことで実現する
環境 ruby: 3.0.4 rails: 6.1.6.1 実際のコード # 変換用の対応表 convert_map = { &amp;#39;a&amp;#39; =&amp;gt; &amp;#39;A&amp;#39;, &amp;#39;b&amp;#39; =&amp;gt; &amp;#39;B&amp;#39;, &amp;#39;d&amp;#39; =&amp;gt; &amp;#39;D&amp;#39; } #=&amp;gt; {&amp;#34;a&amp;#34;=&amp;gt;&amp;#34;A&amp;#34;, &amp;#34;b&amp;#34;=&amp;gt;&amp;#34;B&amp;#34;, &amp;#34;d&amp;#34;=&amp;gt;&amp;#34;D&amp;#34;} # 以下と同義 # &amp;#34;adcacbd&amp;#34;.gsub(/a|b|d/, { &amp;#39;a&amp;#39; =&amp;gt; &amp;#39;A&amp;#39;, &amp;#39;b&amp;#39; =&amp;gt; &amp;#39;B&amp;#39;, &amp;#39;d&amp;#39; =&amp;gt; &amp;#39;D&amp;#39; }) &amp;#34;adcacbd&amp;#34;.gsub(Regexp.new(&amp;#34;#{convert_map.keys.join(&amp;#39;|&amp;#39;)}&amp;#34;), convert_map) #=&amp;gt; &amp;#34;ADcAcBD&amp;#34;</description></item><item><title>CentOS でファイル内の行数を取得する方法</title><link>https://kkawazoe.github.io/blog/2022/08/28/how-to-get-number-of-lines-with-cent-os/</link><pubDate>Sun, 28 Aug 2022 22:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/08/28/how-to-get-number-of-lines-with-cent-os/</guid><description>CentOS でファイル内の行数を取得する方法を備忘録として残しておく
方法 wc コマンドの -l オプションを使用する
環境 CentOS: CentOS Linux release 8.4.2105 実際のコード # 該当のファイルが存在するディレクトリに移動して実行 wc -l # 拡張子で対象を絞りたい場合は以下 # 例. 拡張子が「.csv」のファイルの行数を取得 wc -l `find ./ -name &amp;#39;*.csv&amp;#39;`</description></item><item><title>rails で別名がつけられているカラムを pluck で取得する方法</title><link>https://kkawazoe.github.io/blog/2022/08/23/how-to-get-alias-column-pluck-method-with-rails/</link><pubDate>Tue, 23 Aug 2022 22:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/08/23/how-to-get-alias-column-pluck-method-with-rails/</guid><description>rails で別名がつけられているカラムを pluck で取得する方法を備忘録として残しておく
方法 シンボルでの指定ではなく、文字列で as 句含めて指定する
環境 rails: 6.1.6.1 実際のコード 例. Book と Category クラスの関係が 1 対 多 である場合
# Book クラス class Book &amp;lt; ApplicationRecord has_many :categories end # Category クラス class Category &amp;lt; ApplicationRecord belongs_to :book end # データ準備 book = Book.create!(name: &amp;#39;サンプル書籍&amp;#39;) book.categories &amp;lt;&amp;lt; Category.create(name: &amp;#39;ビジネス&amp;#39;) book.categories &amp;lt;&amp;lt; Category.create(name: &amp;#39;自己啓発&amp;#39;) # 別名を付与したカラムを取得 category_names = Book.joins(:categories) .select(:name, &amp;#39;categories.name as category_name&amp;#39;) .where(id: 1) .pluck(&amp;#39;categories.name as category_name&amp;#39;) # (1.</description></item><item><title>PostgreSQL で テーブルのカラム内の特定の文字数を取得する方法</title><link>https://kkawazoe.github.io/blog/2022/08/22/how-to-get-count-specific-string-with-postgre-sql/</link><pubDate>Mon, 22 Aug 2022 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/08/22/how-to-get-count-specific-string-with-postgre-sql/</guid><description>PostgreSQL で テーブルのカラム内の特定の文字数を取得する方法を備忘録として残しておく
方法 sum, length, regexp_replace を使用する
環境 PostgreSQL: 13.3 実際のコード regexp_replace 関数で name カラム内の 「仼」、「鶴」を空文字に置換 length 関数で 1 の置換前の文字数および置換後の文字数を取得 sum 関数で 2 で取得したものを計算(置換前文字数 - 置換後文字数) ※coalsesce 関数は null が返却された場合のデフォルト値を設定 select &amp;#39;ユーザテーブル--名前カラム中の「仼」または「鶴」の件数&amp;#39;, coalesce(sum(length(name)-length(regexp_replace(name, &amp;#39;[仼鶴]&amp;#39;,&amp;#39;&amp;#39;,&amp;#39;g&amp;#39;))), 0) from users;</description></item><item><title>PostgreSQL で CSVをインポートする方法</title><link>https://kkawazoe.github.io/blog/2022/05/24/how-to-import-csv-with-postgre-sql/</link><pubDate>Tue, 24 May 2022 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/05/24/how-to-import-csv-with-postgre-sql/</guid><description>PostgreSQL で CSV をインポートする方法を備忘録として残しておく
方法 \COPY を使用する
環境 PostgreSQL: 13.3 実際のコード su - postgres psql \c {DB 名}; \COPY {テーブル名} FROM &amp;#39;{csvファイルパス}&amp;#39; DELIMITER &amp;#39;,&amp;#39; CSV; # 例 HEADER なしの場合 \COPY users FROM &amp;#39;./users.csv&amp;#39; DELIMITER &amp;#39;,&amp;#39; CSV; # 例 HEADER ありの場合 \COPY users FROM &amp;#39;./users.csv&amp;#39; DELIMITER &amp;#39;,&amp;#39; CSV HEADER; # エクスポートする場合は以下 su - postgres psql \c {DB 名}; \COPY {テーブル名} TO &amp;#39;{csvファイルパス}&amp;#39; WITH CSV DELIMITER &amp;#39;,&amp;#39;; # 例 HEADER なしの場合 \COPY users TO &amp;#39;.</description></item><item><title>rails で id 等の自動採番項目の不整合を修正する方法(PostgreSQL)</title><link>https://kkawazoe.github.io/blog/2022/05/24/how-to-auto-seq-for-postgre-sql-with-rails/</link><pubDate>Tue, 24 May 2022 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/05/24/how-to-auto-seq-for-postgre-sql-with-rails/</guid><description>rails で 自動採番項目の不整合を修正する方法を備忘録として残しておく
方法 reset_pk_sequence! を使用する
環境 rails: 6.1.4 実際のコード ActiveRecord::Base.connection.tables.each do |table_name| ActiveRecord::Base.connection.reset_pk_sequence!(table_name) end</description></item><item><title>rails でメソッドの定義場所を表示する方法</title><link>https://kkawazoe.github.io/blog/2022/02/26/how-to-source-location-rails/</link><pubDate>Sat, 26 Feb 2022 01:28:11 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2022/02/26/how-to-source-location-rails/</guid><description>rails で エラーが出てどのクラスのメソッドが呼ばれているかを確認する方法を備忘録として残しておく
方法 XXX.method(:{method}).source_location を使用する
例. ActiveRecord::Base.method(:transaction).source_location
環境 ruby: 2.6.10 rails: 5.2.3 実際のコード ActiveRecord::Base.method(:transaction).source_location =&amp;gt; [&amp;#34;/usr/local/bundle/ruby/2.6.0/gems/activerecord-5.2.3/lib/active_record/transactions.rb&amp;#34;, 211]</description></item><item><title>libreoffice を使用して Excel を PDF に変換する方法</title><link>https://kkawazoe.github.io/blog/2021/12/11/how-to-convert-excel-to-pdf-with-libreoffice/</link><pubDate>Sat, 11 Dec 2021 14:24:49 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2021/12/11/how-to-convert-excel-to-pdf-with-libreoffice/</guid><description>アップロードされた Excel を PDF に変換して保存する必要があり
調査を行った LibreOffice で変換する方法を備忘録として残しておく
※図形など綺麗に変換されないパターンもあるため注意が必要
前提 LibreOffice を事前にインストールしておく
/Applications/LibreOffice.app/Contents/MacOS/soffice にインストールしている場合
方法 以下のコマンドで変換を行う ※Calc を使用して PDF に変換
参考
指定できるフィルタ
/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to pdf:&amp;#34;calc_pdf_Export&amp;#34; {Excel File Path} その他 以下のようにすることで soffice コマンドを登録可能
/usr/local/bin/soffice を作成して中に以下を記載する #!/bin/bash # Need to do this because symlink won&amp;#39;t work # It complains about some .plist files /Applications/LibreOffice.app/Contents/MacOS/soffice &amp;#34;$@&amp;#34; 以下のコマンドで実行権限を付与する sudo chmod +x /usr/loca/bin/soffice 上記を sh として gist に置いているので以下でも可
sudo curl https://gist.</description></item><item><title>GitHub で自分にレビュー依頼が来ているプルリクエストを一覧で表示する方法</title><link>https://kkawazoe.github.io/blog/2021/06/02/how-to-show-reviewer-pullrequest-assign-self/</link><pubDate>Wed, 02 Jun 2021 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2021/06/02/how-to-show-reviewer-pullrequest-assign-self/</guid><description>経緯 表題の件を行う必要があり調査を行ったため備忘録として残しておく
手順 1. GitHub にログインする 2. 以下を GitHub 内で検索する is:open is:pr review-requested:{自分のユーザー名} もしくは rewiew-requested で確認可能 ※PR 内でコメントをつけたりすると対象から外れてしまうため注意が必要
追記 以下で検索すればコメント等つけた場合も含めて検索されそう ※こちらは逆に未レビューのものが対象から外れてしまうため注意が必要
is:open is:pr reviewed-by:{自分のユーザー名} その他 他のコマンドについては 参考 を参照</description></item><item><title>特定の RSpec のみ実行されるようにする方法</title><link>https://kkawazoe.github.io/blog/2021/05/14/how-to-execute-specified-rspec/</link><pubDate>Fri, 14 May 2021 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2021/05/14/how-to-execute-specified-rspec/</guid><description>個別カスタマイズ等で追加した RSpec のみ実行させる必要があり、調査した結果を備忘録として残しておく
方法 tag オプション を使用して実現する
環境 rspec: rspec 3.8 実際のコード # # :key =&amp;gt; &amp;#39;value&amp;#39; 形式でタグを付与可能 # Group(describe, context, it) に対して付与可能 # RSpec.describe &amp;#34;group with tagged specs&amp;#34; do it &amp;#34;example I&amp;#39;m working now&amp;#34;, focus: true do; end it &amp;#34;special example with string&amp;#34;, type: &amp;#39;special&amp;#39; do; end it &amp;#34;special example with symbol&amp;#34;, type: :special do; end it &amp;#34;slow example&amp;#34;, skip: true do; end it &amp;#34;ordinary example&amp;#34;, speed: &amp;#39;slow&amp;#39; do; end end 実行方法 例.</description></item><item><title>Hash の Key が Symbol または String どちらでも取得可能にする方法</title><link>https://kkawazoe.github.io/blog/2021/05/12/how-to-either-obtained-value-symbol-or-string-key-of-hash/</link><pubDate>Wed, 12 May 2021 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2021/05/12/how-to-either-obtained-value-symbol-or-string-key-of-hash/</guid><description>HashWithIndifferentAccess に変換して実現する
環境 rails: rails 6.0.3.6 実際のコード rgb = { black: &amp;#39;#0000&amp;#39;, white: &amp;#39;#FFFFFF&amp;#39; }.with_indifferent_access rgb[:black] # =&amp;gt; &amp;#34;#0000&amp;#34; rgb[&amp;#39;black&amp;#39;] # =&amp;gt; &amp;#34;#0000&amp;#34; rgb[:&amp;#39;black&amp;#39;] # =&amp;gt; &amp;#34;#0000&amp;#34; rgb[:white] # =&amp;gt; &amp;#34;#FFFFFF&amp;#34; rgb[&amp;#39;white&amp;#39;] # =&amp;gt; &amp;#34;#FFFFFF&amp;#34; rgb[:&amp;#39;white&amp;#39;] # =&amp;gt; &amp;#34;#FFFFFF&amp;#34;</description></item><item><title>nkf を使用して UTF-8 を CP932 に文字コード変換する方法</title><link>https://kkawazoe.github.io/blog/2021/04/11/convert-string-code-utf8-to-cp932-with-nkf/</link><pubDate>Sun, 11 Apr 2021 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2021/04/11/convert-string-code-utf8-to-cp932-with-nkf/</guid><description>CSV 出力処理実装時に文字コード変換を行う必要があり対応を行った
その対処方法を備忘録として残しておく
環境 rails: rails 6.0.3.6 仕様 UTF-8 の文字列を CP932 に変換する ※変換不可能な文字は'〓'に変換する
実際のコード str = &amp;#39;〜変換不可能文字を含む文字列〜&amp;#39; NKF.nkf(&amp;#39;--ic=UTF-8 --oc=CP932 --fb-subchar=0x3013&amp;#39;, str).encode(&amp;#39;UTF-8&amp;#39;, &amp;#39;CP932&amp;#39;) #=&amp;gt; &amp;#34;〓変換不可能文字を含む文字列〓&amp;#34;</description></item><item><title>windows terminal でターミナル毎に起動時のディレクトリを変更する方法</title><link>https://kkawazoe.github.io/blog/2021/03/14/modify-starting-directory-for-windows-terminal/</link><pubDate>Sun, 14 Mar 2021 15:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2021/03/14/modify-starting-directory-for-windows-terminal/</guid><description>windows terminal でターミナル毎に起動時のディレクトリを変更する方法を備忘録として残しておく
環境 windows: Windows 10 Pro wsl: version 2 ディストリビューション: Ubuntu 18.04 方法 Windows Terminal を起動する 「Ctrl」+「,」を押下して setting.json を開く setting.json の設定に以下を追加する { &amp;#34;$schema&amp;#34;: &amp;#34;https://aka.ms/terminal-profiles-schema&amp;#34;, &amp;#34;defaultProfile&amp;#34;: &amp;#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&amp;#34;, &amp;#34;profiles&amp;#34;: { &amp;#34;defaults&amp;#34;: { &amp;#34;startingDirectory&amp;#34;: &amp;#34;c:\\work&amp;#34; // 追加 ターミナル共通の起動時のディレクトリを指定 }, &amp;#34;list&amp;#34;: [ { &amp;#34;guid&amp;#34;: &amp;#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Windows PowerShell&amp;#34;, &amp;#34;commandline&amp;#34;: &amp;#34;powershell.exe&amp;#34;, &amp;#34;hidden&amp;#34;: false }, { &amp;#34;guid&amp;#34;: &amp;#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Command Prompt&amp;#34;, &amp;#34;commandline&amp;#34;: &amp;#34;cmd.exe&amp;#34;, &amp;#34;hidden&amp;#34;: false }, { &amp;#34;guid&amp;#34;: &amp;#34;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&amp;#34;, &amp;#34;hidden&amp;#34;: false, &amp;#34;name&amp;#34;: &amp;#34;Azure Cloud Shell&amp;#34;, &amp;#34;source&amp;#34;: &amp;#34;Windows.</description></item><item><title>wsl ディストリビューションに ubuntu を選択した際に起動時のユーザを root に変更する方法</title><link>https://kkawazoe.github.io/blog/2021/03/14/modify-root-user-distribution-for-wsl-on-ubuntu/</link><pubDate>Sun, 14 Mar 2021 10:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2021/03/14/modify-root-user-distribution-for-wsl-on-ubuntu/</guid><description>wsl の起動時のユーザを root にする方法を備忘録として残しておく
環境 windows: Windows 10 Pro wsl: version 2 ディストリビューション: Ubuntu 18.04 前提 wsl の有効化およびディストリビューションのインストールは完了している前提
※ wsl のインストールについては 参考 を参照
方法 PowerShell で以下のコマンドを実行する $ wsl $ sudo passwd root $ exit $ wsl -s Ubuntu-18.04 $ ubuntu1804 config --default-user root $ wsl #=&amp;gt; root でログインしていることを確認</description></item><item><title>docker-compose で管理しているコンテナ内にファイルをコピーする方法</title><link>https://kkawazoe.github.io/blog/2021/03/14/copy-file-into-container-with-docker-compose/</link><pubDate>Sun, 14 Mar 2021 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2021/03/14/copy-file-into-container-with-docker-compose/</guid><description>docker-compose で管理しているコンテナにホストに存在するファイルをコピーする方法を備忘録として残しておく
環境 dokcer: 20.10.5 docker-compose: 1.28.5 前提 ファイルをコピーする対象のコンテナに紐づいているサービス名 app
方法 docker cp {コピーする対象ファイル} `docker-compose ps -q {サービス名}`:/ # 例 サービス名 app に紐付いているコンテナに test.txt をコピーする docker cp test.txt `docker-compose ps -q app`:/</description></item><item><title>Gem rubyXL を使用した際に起こったエラーおよび対応について</title><link>https://kkawazoe.github.io/blog/2020/10/06/about-error-with-rubyxl/</link><pubDate>Tue, 06 Oct 2020 09:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2020/10/06/about-error-with-rubyxl/</guid><description>Gem rubyXL を使用している際に起こったエラーとその対処方法を備忘録として残しておく
環境 rails: rails 5.2.2 rubyXL: Ver.3.4.0 rubyXL について 拡張子「xlsx」を読み書き可能なライブラリ
使用感としてはテンプレートとなる Excel に対して読み書きする場合には
問題なく使用可能
但し、テンプレートに数式やグラフが含まれている場合に行などを
追加した場合に出力された Excel ファイルが破損して起動不可になる場合が
あるため注意が必要
rubyXL 発生した障害とその対応 テキストの折り返しがsheet.add_cellではできない sheet.add_cell(col, row, 'text').change_text_wrap によって実装可能
テキストを折り返して表示してくれるようになる
change_contents が使えない version 3.4.0 以降は convenience_methods を呼び出さないと利用不可
# require が必要なメソッド require &amp;#39;rubyXL/convenience_methods/cell&amp;#39; require &amp;#39;rubyXL/convenience_methods/color&amp;#39; require &amp;#39;rubyXL/convenience_methods/font&amp;#39; require &amp;#39;rubyXL/convenience_methods/workbook&amp;#39; require &amp;#39;rubyXL/convenience_methods/worksheet&amp;#39; もしくは以下で全て使用可
require &amp;#39;rubyXL/convenience_methods&amp;#39; シートのコピーができない Marshal.load なども試してみたが、上手くいかなかったので以下を参考にして対応
参考サイト
シートコピー後、コピーしたシートを編集したら他のシートの内容も一緒に変わってしまう change_contents の仕様と上記のシートコピーによって生じた現象
① シートの書式等をコピー ② change_contents で書式設定を保持したまま内容を変更 ③ 該当するコピーシートすべての内容が書き換わる という動作をしている</description></item><item><title>vagrant halt 失敗時の対応方法</title><link>https://kkawazoe.github.io/blog/2020/10/04/how-to-deal-with-vagrant-halt-failure/</link><pubDate>Sun, 04 Oct 2020 09:00:30 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2020/10/04/how-to-deal-with-vagrant-halt-failure/</guid><description>経緯 vagrant halt を行った際に以下のエラーが発生したため、その対処方法を備忘録として残しておく
手順 vagrant halt を行う 以下のエラーが発生
An action &amp;#39;halt&amp;#39; was attempted on the machine &amp;#39;default&amp;#39;, but another process is already executing an action on the machine. ess at a time. Please wait until the other Vagrant process finishes modifying this machine, then try again. If you believe this message is in error, please check the process listing for any &amp;#34;ruby&amp;#34; or &amp;#34;vagrant&amp;#34; processes and kill them.</description></item><item><title>Hugo に数式を挿入する その2</title><link>https://kkawazoe.github.io/blog/2020/05/23/insert-formula-into-hugo-part2/</link><pubDate>Sat, 23 May 2020 15:11:31 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2020/05/23/insert-formula-into-hugo-part2/</guid><description>[前回までの記事]
Hugo に数式を挿入する 経緯 mathjax のバージョンを 3 系 にアップデートした際に単純にいかなかったので備忘録として残しておく
手順 参考 を見ながらアップデートする ※version2 から version 3 への変換を利用
partials フォルダ配下の以下のファイルを修正する CDN で提供されている最新の MathJax.js の URL は、cdnjs.com で確認する
&amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; MathJax = { tex: { inlineMath: [[&amp;#39;$&amp;#39;,&amp;#39;$&amp;#39;], [&amp;#39;\\(&amp;#39;,&amp;#39;\\)&amp;#39;]], processEscapes: true, tags: &amp;#34;ams&amp;#34;, autoload: { color: [], colorV2: [&amp;#39;color&amp;#39;] }, packages: {&amp;#39;[+]&amp;#39;: [&amp;#39;noerrors&amp;#39;]} }, chtml: { matchFontHeight: false, displayAlign: &amp;#34;left&amp;#34;, // version 2 で css で変更していた 数式の表示位置の設定 displayIndent: &amp;#34;2em&amp;#34; }, options: { skipHtmlTags: [&amp;#39;script&amp;#39;, &amp;#39;noscript&amp;#39;, &amp;#39;style&amp;#39;, &amp;#39;textarea&amp;#39;, &amp;#39;pre&amp;#39;], renderActions: { /* これを記述しないと インライン数式(例.</description></item><item><title>Rails で静的エラーページにレイアウトを適用する</title><link>https://kkawazoe.github.io/blog/2020/05/17/apply-layout-to-static-error-page-with-rails/</link><pubDate>Sun, 17 May 2020 11:56:06 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2020/05/17/apply-layout-to-static-error-page-with-rails/</guid><description>環境 rails: rails 5.2.3 方法 Gem Errgent を使用して実現する
確認 config/environments/development.rb の以下を編集して確認する
config.consider_all_requests_local = false 実際のコード 例. エラーコード 404, 500 ロケール毎に静的エラーページを生成する
=&amp;gt; 生成されるファイル 例. public/404.ja.html
desc &amp;#39;Generate Error Pages&amp;#39; task generate_error_pages: :environment do I18n.available_locales.each do |locale| I18n.locale = locale renderer = Errgent::Renderer.new( codes: [404, 500] layout: &amp;#39;layouts/error_page&amp;#39;, # where to find your layout by default output: &amp;#34;public/%s.#{locale}.html&amp;#34; # where to put generated pages by default, %s is the replacement for @code ) renderer.</description></item><item><title>Docker Compose 上で Rails の秘匿情報を扱う</title><link>https://kkawazoe.github.io/blog/2020/04/04/handle-credentials-info-of-rails-on-docker-compose/</link><pubDate>Sat, 04 Apr 2020 10:46:01 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2020/04/04/handle-credentials-info-of-rails-on-docker-compose/</guid><description>環境 rails: rails 5.2.3 方法 前提 credentials.yml.enc を使用 docker 上での rails のコンテナ名: rails 確認 例. production 環境の秘匿情報を確認する
以下のコマンドを使用して確認する
$ docker-compose exec rails bash #=&amp;gt; コンテナが起動していない場合は docker-compose run rails bash $ EDITOR=&amp;#34;vim&amp;#34; bin/rails env_credentials:show -e production 編集 例. production 環境の秘匿情報を編集する
以下のコマンドを使用して確認する
$ docker-compose exec rails bash #=&amp;gt; コンテナが起動していない場合は docker-compose run rails bash $ EDITOR=&amp;#34;vim&amp;#34; bin/rails env_credentials:edit -e production</description></item><item><title>Google Apps Script で Gmail から 特定条件のスレッドを検索しメールを取り出す</title><link>https://kkawazoe.github.io/blog/2020/03/19/use-gas-to-search-for-gmail-and-retrieve-emails/</link><pubDate>Thu, 19 Mar 2020 15:25:56 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2020/03/19/use-gas-to-search-for-gmail-and-retrieve-emails/</guid><description>実際のソース function searchContactMail() { /* Gmail から件名が「noreply」のスレッドを検索して内容を取り出す */ var strTerms = &amp;#39;noreply&amp;#39;; var myThreads = GmailApp.search(strTerms, 0, 100); var myMsgs = GmailApp.getMessagesForThreads(myThreads); //二次元配列 var contents = []; /* 各メールの内容を取り出す */ for (var i = 0; i &amp;lt; myMsgs.length; i++) { for (var j = 0; j &amp;lt; myMsgs[i].length; j++) { var data = myMsgs[i][j].getTo(); if (data !== null) { contents.push([data]); } } } /* スプレッドシートのシート「output」に出力 */ if (myMsgs.length &amp;gt; 0) { var mySheet = SpreadsheetApp.</description></item><item><title>RSpec 内で動的に I18n の訳文を追加する</title><link>https://kkawazoe.github.io/blog/2019/09/14/dynamic-translate-for-i18n-with-rspec/</link><pubDate>Sat, 14 Sep 2019 09:56:37 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/09/14/dynamic-translate-for-i18n-with-rspec/</guid><description>環境 rails: rails 5.2.3 方法 I18n::Backend::Base#store_translations を使用する
I18n.backend.store_translations( :ja, test: &amp;#39;テスト&amp;#39; ) I18n.t(:test) #=&amp;gt; テスト</description></item><item><title>Rails でトークンを扱う方法</title><link>https://kkawazoe.github.io/blog/2019/07/21/how-to-handle-tokens-in-rails/</link><pubDate>Sun, 21 Jul 2019 18:12:58 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/07/21/how-to-handle-tokens-in-rails/</guid><description>環境 rails: rails 5.2.3 方法 トークンの認証 トークンの認証については authenticate_with_http_token を使用する
以下が対象
Authorization: Token XXX Authorization: Bearer XXX class ApplicationController &amp;lt; ActionController::API # authenticate_with_http_token を使用するために必要 include ActionController::HttpAuthentication::Token::ControllerMethods before_action :authenticate def authenticate authenticate_with_http_token do |token, options| # 認証処理 および レスポンスが必要な場合は記述 end end end トークンの取得 トークンの取得については token_and_options を使用する
以下が対象
Authorization: Token XXX Authorization: Bearer XXX class ApplicationController &amp;lt; ActionController::API # token_and_options を使用するために必要 include ActionController::HttpAuthentication::Token def access_token token_and_options(request)&amp;amp;.first end end</description></item><item><title>FP3級への道 その7</title><link>https://kkawazoe.github.io/blog/2019/07/06/road-to-fp3-part7/</link><pubDate>Sat, 06 Jul 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/07/06/road-to-fp3-part7/</guid><description>学習中に間違えやすいと思った点を備忘録として残しておく
[前回までの記事]
FP3級への道 FP3級への道 その2 FP3級への道 その3 FP3級への道 その4 FP3級への道 その5 FP3級への道 その6 受験結果 2019年5月 一応　FP 3級合格
勉強時間は一月半程度
後半 2週間は過去2, 3年分の過去問を中心に解いて解説および関連する分野を勉強した
FP に関しては試験受ける・受けないはともかくとして勉強自体はやって良かったと思う
2級以上を受験するかどうかは今のところ不明だがモチベーションが上がれば挑戦したい
【種目別試験結果】ファイナンシャル・プランニング技能検定 公式サイトで確認すると今回の合格率は以下
等級 学科/実技 試験科目 合格率 3級 学科 42.76％ 3級 実技 個人資産相談業務 54.35％ 大体例年通りくらいの合格率だったらしい</description></item><item><title>github で access token を使用してリポジトリを clone する</title><link>https://kkawazoe.github.io/blog/2019/06/20/clone-repository-use-access-token-with-github/</link><pubDate>Thu, 20 Jun 2019 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/06/20/clone-repository-use-access-token-with-github/</guid><description>経緯 表題の件を行う必要があり対応を行ったため備忘録として残しておく
手順 1. アクセストークンを作成する GitHub アカウントにログインし，Settings &amp;gt; Developer settings から Personal access tokens を選択する
Generate new token を押下する
2. 以下のコマンドを実行してリポジトリを clone する git clone https://{アカウント名}:{アクセストークン}@github.com/{アカウント名}/{リポジトリ名} 3. ローカルの設定を追加する git config --local user.name {アカウント名} git config --local user.email {アカウントのメールアドレス}</description></item><item><title>electron-builder で Lint および UnitTest が通った場合のみビルドするようにする</title><link>https://kkawazoe.github.io/blog/2019/05/24/pass-lint-and-unit-test-to-build-with-electron-builder/</link><pubDate>Fri, 24 May 2019 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/05/24/pass-lint-and-unit-test-to-build-with-electron-builder/</guid><description>経緯 electron にて ビルドするのに electron-builder を使用してみた
その際に最低限 Lint, UnitTest を通ることを担保するようにしたため備忘録として残しておく
構築環境 electron: 5.0.1 electron-builder: 20.39.0 実際のコード package.json に以下の定義がしてある前提 ※以下は electron x angular(Angular Cli で生成)
{ ・・・ &amp;#34;scripts&amp;#34;: { &amp;#34;ng&amp;#34;: &amp;#34;ng&amp;#34;, &amp;#34;start&amp;#34;: &amp;#34;ng build --prod &amp;amp;&amp;amp; electron .&amp;#34;, &amp;#34;build&amp;#34;: &amp;#34;ng build&amp;#34;, &amp;#34;test&amp;#34;: &amp;#34;jest&amp;#34;, &amp;#34;lint&amp;#34;: &amp;#34;ng lint&amp;#34;, &amp;#34;postinstall&amp;#34;: &amp;#34;electron-builder install-app-deps&amp;#34;, &amp;#34;release&amp;#34;: &amp;#34;ng build --prod &amp;amp;&amp;amp; node build.js&amp;#34;, }, ・・・ } electron-builder のオプションについては公式を参照
&amp;#39;use strict&amp;#39;; const builder = require(&amp;#39;electron-builder&amp;#39;); const Platform = builder.Platform; const childProcess = require(&amp;#39;child_process&amp;#39;); const unitTest = new Promise((resolve, reject) =&amp;gt; { childProcess.</description></item><item><title>Angular Cli で作成したプロジェクトに Jest を追加する</title><link>https://kkawazoe.github.io/blog/2019/05/15/add-jest-at-angular-cli/</link><pubDate>Wed, 15 May 2019 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/05/15/add-jest-at-angular-cli/</guid><description>Angular Cli でプロジェクトを作成すると Karma + Jasmine が単体テストとして入るため
Jest に変更する手順を備忘録として残しておく
構築環境 Angular CLI: 7.3.9 Node: 10.15.3 OS: darwin x64 Angular: ... Package Version ------------------------------------------------------ @angular-devkit/architect 0.13.9 @angular-devkit/core 7.3.9 @angular-devkit/schematics 7.3.9 @schematics/angular 7.3.9 @schematics/update 0.13.9 rxjs 6.3.3 typescript 3.2.4 手順 1. プロジェクトを作成 $ ng new JEST-EXAMPLE --style=styl ? Would you like to add Angular routing? Yes 2. 以下のコマンドを実行する yarn global add @briebug/jest-schematic ng g @briebug/jest-schematic:add ng add @briebug/jest-schematic 3. 以下のコマンドを実行して動作確認する $ yarn test $ jest PASS src/app/app.</description></item><item><title>FP3級への道 その6</title><link>https://kkawazoe.github.io/blog/2019/04/30/road-to-fp3-part6/</link><pubDate>Tue, 30 Apr 2019 00:00:19 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/30/road-to-fp3-part6/</guid><description>学習中に間違えやすいと思った点を備忘録として残しておく
[前回までの記事]
FP3級への道 FP3級への道 その2 FP3級への道 その3 FP3級への道 その4 FP3級への道 その5 金融資産運用 債権 債権の利回り 直接利回り
投資金額(購入価格)に対する毎年の利息収入の割合
$$ 直接利回り(\%) = \frac{表面利率}{購入価格} \times 100 $$
$$ 直接利回り(\%) = \frac{表面利率}{購入価格} \times 100 $$
例えば、表面利率1%の債権を102万円で購入した場合(小数点以下第3位を四捨五入)
$$ \frac{1%}{102円} \times 100 ≒ 0.98% $$
応募者利回り
債権の発行時に購入し、償還まで所有した場合の利回り
$$ 応募者利回り(\%) = \frac{表面利率 + \frac{額面(100円) - 発行価格}{償還期限(年)}}{発行価格} \times 100 $$
例えば、表面利率1%、発行価格98円、償還期限5年の債権を購入した場合(小数点以下第3位を四捨五入)
$$ \frac{1% + \frac{100円 - 98円}{5年}}{98円} \times 100 ≒ 1.43% $$
最終利回り</description></item><item><title>Excel でテスト用シートを自動生成するツールを作成する</title><link>https://kkawazoe.github.io/blog/2019/04/28/auto-generate-test-sheet-tool-with-excel/</link><pubDate>Sun, 28 Apr 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/28/auto-generate-test-sheet-tool-with-excel/</guid><description>経緯 結合テストなのでエビデンスを残しておく必要があり
テスト項目ごとにシートを分ける必要があった
テスト項目が多い場合手作業で シート作成 =&amp;gt; シート名変更をするのは手間だったため
ツール化をすることにした
使用方法 「パラメータ」シートにて以下を指定する
[設定項目]
シート数: 作成するシート数 表示倍率: 作成するシートの表示倍率 シート作成後ワークグループ設定: チェックをつけるとシートを作成後に
ワークグループ(各シートが選択状態)になる 「パラメータ」シートの「実行」ボタンを押下する
実際のコード Rem Attribute VBA_ModuleType=VBAModule Option VBASupport 1 Sub ExecuteButtonClick() Dim ws As Worksheet Dim wsArray() As String Dim chkFlg As Long &amp;#39;ワークシートの初期化 For Each ws In Worksheets &amp;#39;ワークシート名が&amp;#34;パラメータ&amp;#34;以外の場合 If ws.Name &amp;lt;&amp;gt; &amp;#34;パラメータ&amp;#34; Then Application.DisplayAlerts = False ws.Delete Application.DisplayAlerts = True End If Next ws &amp;#39;チェックボックスの値を取得 chkFlg = Worksheets(&amp;#34;パラメータ&amp;#34;).</description></item><item><title>Hugo に数式を挿入する</title><link>https://kkawazoe.github.io/blog/2019/04/27/insert-formula-into-hugo/</link><pubDate>Sat, 27 Apr 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/27/insert-formula-into-hugo/</guid><description>経緯 Hugo で運用しているサイトに数式を埋め込む必要があり 調査した結果を備忘録として残しておく
手順 参考 と同じく Mathjax を使用して実現する
partials フォルダ配下に以下のファイルを作成する CDN で提供されている最新の MathJax.js の URL は、cdnjs.com で確認する
&amp;lt;script type=&amp;#34;text/javascript&amp;#34; async src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;#34;&amp;gt; MathJax.Hub.Config({ tex2jax: { inlineMath: [[&amp;#39;$&amp;#39;,&amp;#39;$&amp;#39;], [&amp;#39;\\(&amp;#39;,&amp;#39;\\)&amp;#39;]], displayMath: [[&amp;#39;$$&amp;#39;,&amp;#39;$$&amp;#39;]], processEscapes: true, processEnvironments: true, skipTags: [&amp;#39;script&amp;#39;, &amp;#39;noscript&amp;#39;, &amp;#39;style&amp;#39;, &amp;#39;textarea&amp;#39;, &amp;#39;pre&amp;#39;], TeX: { equationNumbers: { autoNumber: &amp;#34;AMS&amp;#34; }, extensions: [&amp;#34;AMSmath.js&amp;#34;, &amp;#34;AMSsymbols.js&amp;#34;] } } }); MathJax.Hub.Queue(function() { // Fix &amp;lt;code&amp;gt; tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown.</description></item><item><title>FP3級への道 その5</title><link>https://kkawazoe.github.io/blog/2019/04/26/road-to-fp3-part5/</link><pubDate>Fri, 26 Apr 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/26/road-to-fp3-part5/</guid><description>学習中に間違えやすいと思った点を備忘録として残しておく
[前回までの記事]
FP3級への道 FP3級への道 その2 FP3級への道 その3 FP3級への道 その4 金融資産運用 株式 株式投資に用いる指標 $$ PER(倍) = \frac{株価}{一株当たりの純利益(EPS)} $$
※PER が低い銘柄は 割安 、高い銘柄は割高
$$ PBR(倍) = \frac{株価}{一株当たりの純資産(BPS)} $$
※PBR が低い(1倍に近い)銘柄は 割安 、高い銘柄は割高
$$ ROE(\%) = \frac{税引後当期純利益}{自己資本(純資産)} \times 100 $$
$$ 配当利回り(\%) = \frac{一株当たりの配当金}{株価} \times 100 $$
$$ 配当性向(\%) = \frac{配当金総額}{税引後当期純利益} \times 100 $$
$$ 自己資本比率(\%) = \frac{自己資本(純資産)}{総資産(負債 + 純資産)} \times 100 $$
参考にした教本 上記内容は以下の教本の内容を参考にしてます
2018-2019年版　みんなが欲しかった！　FPの問題集3級
滝澤ななみ TAC 2018年05月22日</description></item><item><title>FP3級への道 その4</title><link>https://kkawazoe.github.io/blog/2019/04/25/road-to-fp3-part4/</link><pubDate>Thu, 25 Apr 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/25/road-to-fp3-part4/</guid><description>学習中に間違えやすいと思った点を備忘録として残しておく
[前回までの記事]
FP3級への道 FP3級への道 その2 FP3級への道 その3 リスクマネジメント 火災保険 補償の範囲 損害 住宅火災保険 住宅総合保険 火災、落雷、爆発、破裂
風災、雹災、雪災 ◯ ◯ 水害(水災) × ◯ 給排水設備事故による水漏れ × ◯ 盗難 × ◯ 外部からの落下、飛来、衝突 × ◯ 持出家財の損害 × ◯ 地震、噴火、津波 × × 傷害保険 主な傷害保険 普通傷害保険 国内外を問わず、日常生活で起こる傷害を補償する保険
※病気、細菌性食中毒、自殺、地震、噴火、津波を原因とする傷害は対象外
=&amp;gt; 1つの契約で家族全員が補償される「家族傷害保険」もある 交通事故傷害保険 国内外で起きた交通事故、建物や乗り物の火災などによる傷害を保証する保険</description></item><item><title>FP3級への道 その3</title><link>https://kkawazoe.github.io/blog/2019/04/24/road-to-fp3-part3/</link><pubDate>Wed, 24 Apr 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/24/road-to-fp3-part3/</guid><description>学習中に間違えやすいと思った点を備忘録として残しておく
[前回までの記事]
FP3級への道 FP3級への道 その2 リスクマネジメント 生命保険と税金 生命保険金を受け取った時の税金 契約や、被保険者、受取人が誰かによって課される税金が異なる
[死亡保険金の場合]
契約者 被保険者 受取人 税金 A A B 相続税 A B A 所得税(一時所得)
住民税 A B C 贈与税 [満期保険金の場合]
契約者 被保険者 受取人 税金 A 誰でも A 所得税(一時所得)
住民税 A 誰でも B 贈与税 [非課税となる保険金や給付金]</description></item><item><title>Access でパラメータクエリが未入力の場合は全検索する</title><link>https://kkawazoe.github.io/blog/2019/04/23/when-not-input-parameter-query-execute-full-search-with-access/</link><pubDate>Tue, 23 Apr 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/23/when-not-input-parameter-query-execute-full-search-with-access/</guid><description>実際のコード パラメータが未入力の際に全ての検索条件を無視して全検索する場合
抽出条件として抽出したいフィールドの「抽出条件」欄に以下を入力する
[抽出条件]
[パラメータ] Or [パラメータ] Is Null パラメータが未入力の際に関係する抽出条件のみを全検索する場合
パラメータ用のフィールドを追加して「抽出条件」欄に以下を入力する
[抽出条件]
[抽出対象フィールド] Or Is Null ※一番右側にフィールドを配置しないと意図しないSQLになることもあるため必ずSQLビューで作成されたSQLを確認すること</description></item><item><title>FP3級への道 その2</title><link>https://kkawazoe.github.io/blog/2019/04/22/road-to-fp3-part2/</link><pubDate>Mon, 22 Apr 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/22/road-to-fp3-part2/</guid><description>学習中に間違えやすいと思った点を備忘録として残しておく
前回の記事: FP3級への道
ライフプランニングの手法 ライフプランニングを行う際に利用するツール ライフイベント表
家族の将来のライフイベントと、それに必要な資金の額を時系列にまとめた表 キャッシュフロー表
ライフイベント表と現在の収支状況に基づいて、将来の収支状況と貯蓄残高の予想を
まとめた表 個人バランスシート
一定時点における資産と負債のバランスを見るための表
※[可処分所得] = [年収] - (社会保険料 + 所得税 + 住民税) 資金計画を立てる際の6つの係数 終価係数 現在の金額を複利で運用した場合の、一定期間後の金額を求める場合に用いる係数
例. 100万円を年利3%で運用した場合の7年後の金額はいくらか？
現価係数 一定期間後に一定金額に達するために必要な原本を求めるのに用いる係数
例. 年利3%で7年後に100万円を用意するためには、元本がいくら必要になるか？
年金終価係数 毎年一定金額を積み立てた場合の、一定期間後の元利合計を求める場合に用いる係数
例. 年利3%、毎年10万円を7年後の金額はいくらか？
減債基金係数 一定期間後に一定金額を用意するための、毎年の積立額を計算するための係数
例. 年利3%、７年後に100万円を用意するためには毎年いくら積み立てる必要があるか？
資本回収係数 現在の一定金額を一定期間で取り崩した場合の、毎年の受取金額を計算するための係数
例. 100万円を年利2%で運用しながら7年噛んで取り崩した場合の毎年の受取金額はいくら？
年金現価係数 将来の一定期間に渡って、一定額を受け取るために必要な元本を計算するための係数
例. 7年間に渡って、10万円ずつ受け取りたい
年利3%とした場合、必要な元本はいくらか？
終価係数と年金終価係数の違い 終価係数は、現在の金額を複利で運用した場合の金額を求めるための係数
=&amp;gt; 定期預金のイメージ
年金終価係数は、毎年一定金額を積み立てた場合の一定期間後の元利合計を求めるための係数
=&amp;gt; 積立定期預金のイメージ
減債基金係数と資本回収係数の違い 減債基金係数は毎年の積立額を求めるための係数
資本回収係数は毎年の受取金額を求めるための係数
現価係数はと年金現価係数の違い 現価係数は一定金額に達するために必要な原本を求めるための係数
年金現価係数は一定額を受け取るために必要な元本を求めるための係数
参考にした教本 上記内容は以下の教本の内容を参考にしてます
2018-2019年版　みんなが欲しかった！　FPの問題集3級
滝澤ななみ TAC 2018年05月22日</description></item><item><title>AWS 認定ソリューションアーキテクト - アソシエイトへの道</title><link>https://kkawazoe.github.io/blog/2019/04/19/road-to-aws-certified-solutions-architect-associate/</link><pubDate>Fri, 19 Apr 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/19/road-to-aws-certified-solutions-architect-associate/</guid><description>試験概要 詳細は、試験ガイド(試験概要 の「試験ガイドのダウンロード」を参照)
受験料 15,000 円 (日本語版/税別)
出題範囲 分野 試験に占める 割合 分野 1: 回復性の高いアーキテクチャを設計する 34% 分野 2: パフォーマンスに優れたアーキテクチャを定義する 24% 分野 3: セキュアなアプリケーションおよびアーキテクチャを規定する 26% 分野 4: コスト最適化アーキテクチャを設計する 10% 分野 5: オペレーショナルエクセレンスを備えたアーキテクチャを定義する 6% 合計 100% 出題範囲詳細 分野 1: 回復性の高いアーキテクチャを設計する 1.1 信頼性と回復性の高いストレージを選択する 1.2 AWS サービスを使用した分離機構を設計する方法を定義する 1.3 多層アーキテクチャソリューションを設計する方法を定義する 1.4 可用性またはフォルトトレラント性 (あるいはその両方) が高いアーキテクチャを設計する方法を定義する 分野 2: パフォーマンスに優れたアーキテクチャを定義する 2.</description></item><item><title>Git コマンドについて</title><link>https://kkawazoe.github.io/blog/2019/04/18/about-git-command/</link><pubDate>Thu, 18 Apr 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/18/about-git-command/</guid><description>基本的なコマンドを含めて備忘録として残しておく
実際のコード 基本的な流れ Git 初期化 git init Git 接続先設定 git remote add {Fork 元リモート名} {Fork 元接続先URL} git remote add {Fork 先リモート名} {Fork 先接続先URL} 最新ソース取得 git pull {Fork 元リモート名} {ブランチ名} トピックブランチ作成 git checkout -b topic/#{issue番号}-作業者名 開発 ステージングにあげる git add -A # untracked files を除いてステージングに挙げる場合は以下 git add -u コミットする git commit -m &amp;#34;コメント&amp;#34; プルリクエストを投げる git push {Fork 元リモート名} {ブランチ名} ※修正がある場合はgit addから先を繰り返し
その他 ローカルの修正を元に戻す 一部ファイルのみ戻す場合</description></item><item><title>Vue.js ＋ Rails で RailsHelper と組み合わせた場合の記述方法</title><link>https://kkawazoe.github.io/blog/2019/04/17/description-rails-helper-with-vuejs-and-rails/</link><pubDate>Wed, 17 Apr 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/17/description-rails-helper-with-vuejs-and-rails/</guid><description>経緯 Vue.js を Rails のフロントとして使用した場合に RailsHelper と組み合わせると若干記述が複雑になったため備忘録として残しておく
実際のコード(html テンプレートエンジンは slim を使用) 通常 a タグ a.btn.home href=&amp;#34;#{root_path}&amp;#34; @touchStart=&amp;#34;onTouchStartForBtn&amp;#34; @touchEnd=&amp;#34;onTouchEndForBtn&amp;#34; @touchmove=&amp;#34;onTouchMoveForBtn&amp;#34; RailsHelper での a タグ Vue.js の bind を'(シングルコート)で括る
= link_to national_rankings_path, class: &amp;#39;btn ranking&amp;#39;, &amp;#39;@touchStart&amp;#39;: &amp;#34;onTouchStartForBtn&amp;#34;, &amp;#39;@touchEnd&amp;#39;: &amp;#34;onTouchEndForBtn&amp;#34;, &amp;#39;@touchmove&amp;#39;: &amp;#34;onTouchMoveForBtn&amp;#34;</description></item><item><title>GitHub への公開鍵の登録</title><link>https://kkawazoe.github.io/blog/2019/04/15/register-public-key-on-github/</link><pubDate>Mon, 15 Apr 2019 11:51:14 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/15/register-public-key-on-github/</guid><description>毎回、PC をセットアップする際に調べてしまうため備忘録として残しておく
実際のコード Mac 以下のコマンドを GitHub のEメールアドレスに置き換えて実行 $ ssh-keygen -t rsa -b 4096 -C &amp;#34;your_email@example.com&amp;#34; -f &amp;#34;id_rsa&amp;#34; &amp;gt; Generating public/private rsa key pair. 以下が表示されるのでファイル場所を入力(デフォルトでいい場合は「Enter」押下) &amp;gt; Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter] 以下が表示されるのでパスフレーズを入力(なしでいい場合は「Enter」押下) &amp;gt; Enter passphrase (empty for no passphrase): [Type a passphrase] &amp;gt; Enter same passphrase again: [Type passphrase again] SSH キーを ssh-agent に追加する
4-1. バックグラウンドでssh-agentを起動
$ eval &amp;#34;$(ssh-agent -s)&amp;#34; &amp;gt; Agent pid 59566 ※ macOS Sierra 10.</description></item><item><title>Vue.js でモーダルが表示/非表示された際に呼ばれる処理の実装</title><link>https://kkawazoe.github.io/blog/2019/04/12/show-hide-modal-call-process-with-vuejs/</link><pubDate>Fri, 12 Apr 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/12/show-hide-modal-call-process-with-vuejs/</guid><description>実際のコード HTML側 transition を指定
&amp;lt;template&amp;gt; &amp;lt;transition name=&amp;#34;app-modal&amp;#34; v-on:after-enter=&amp;#34;afterEnter&amp;#34; v-on:leave=&amp;#34;leave&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;overlay&amp;#34; v-on:click=&amp;#34;clickEvent&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;content&amp;#34; v-on:click=&amp;#34;stopEvent&amp;#34;&amp;gt; &amp;lt;p&amp;gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;button @click=&amp;#34;clickEvent&amp;#34;&amp;gt;close&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/transition&amp;gt; &amp;lt;/template&amp;gt; JavaScript側 以下のイベントがフックされるようになる
Vue.transition(&amp;#39;expand&amp;#39;, { beforeEnter: function (el) { el.textContent = &amp;#39;beforeEnter&amp;#39; }, enter: function (el) { el.textContent = &amp;#39;enter&amp;#39; }, afterEnter: function (el) { el.textContent = &amp;#39;afterEnter&amp;#39; }, enterCancelled: function (el) { // 取り消しハンドル }, beforeLeave: function (el) { el.textContent = &amp;#39;beforeLeave&amp;#39; }, leave: function (el) { el.</description></item><item><title>Ruby on Rails の Gem CarrierWave でアップロードする際に画像をリサイズする</title><link>https://kkawazoe.github.io/blog/2019/04/11/resize-when-uploading-for-carrierwave-with-rails/</link><pubDate>Thu, 11 Apr 2019 13:49:45 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/11/resize-when-uploading-for-carrierwave-with-rails/</guid><description>Carrier Wave について ファイルアップロード機能を提供する Gem github
実際のコード 尚、アスペクト比固定で width および height のみ指定する場合は nil を指定する
heightのみ指定 class MyUploader &amp;lt; CarrierWave::Uploader::Base include CarrierWave::MiniMagick process resize_to_limit: [1200, nil] end widthのみ指定 class MyUploader &amp;lt; CarrierWave::Uploader::Base include CarrierWave::MiniMagick process resize_to_limit: [1200, nil] end resize_to_fit と resize_to_limit の違いについて resize_to_fit 画像が指定したサイズ未満の時
=&amp;gt; アスペクト比を維持しながら指定したサイズまで拡大する resize_to_limit 画像が指定したサイズ未満の時
=&amp;gt; なにもしない</description></item><item><title>Ruby on Rails の Gem Gretel で項目の前に画像を置く</title><link>https://kkawazoe.github.io/blog/2019/04/09/set-image-before-gretel-with-rails/</link><pubDate>Tue, 09 Apr 2019 17:36:18 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/09/set-image-before-gretel-with-rails/</guid><description>Gretel について パンくずリストを表示する Gem
github
実際のコード # articles#index crumb :articles do |article| icon = article.flg ? image_tag(&amp;#34;表示したい画像&amp;#34;) : &amp;#34;&amp;#34; link icon + {表示文字}, {URL} parent :parent_articles, article.category end</description></item><item><title>Windows10 に Ruby1.8.7 ＋ Rails2.3.18 を構築する</title><link>https://kkawazoe.github.io/blog/2019/04/07/build-to-rails2-and-ruby1-with-windows10/</link><pubDate>Sun, 07 Apr 2019 04:24:08 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/04/07/build-to-rails2-and-ruby1-with-windows10/</guid><description>経緯 仕事で必要となり表題の環境を準備することになった 苦労したためその際の手順およびハマった点等を備忘録として残しておく
構築環境 ruby: ruby 1.8.7 rails: rails 2.3.18 手順 Ruby Installer で Ruby(1.8.7 p-374) および DevKit(DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe) をダウンロードする Ruby をインストールする(オプションで環境変数パスへの登録を有効にする) DevKit を展開する(自己解凍形式の圧縮ファイルなので、実行して適当なところに展開する) 3-1. コマンドプロンプトで展開した場所に移動し以下のコマンドを入力する ruby dk.rb init ruby dk.rb install rubygems-update のバージョンをダウングレードする 4-1. 以下のコマンドを入力する gem update --system 1.3.7 ※以下のエラーが起きる場合はこのサイトを参考に手動で rubygems-update をダウングレードする
$ gem update --system ERROR: While executing gem ... (Gem::RemoteFetcher::FetchError) SSL_connect returned=1 errno=0 state=SSLv2/v3 read server hello A: tlsv1 alert protocol version (https://rubygems.</description></item><item><title>Slack ＋ Todoist ＋ Integromat でタスク管理 その２</title><link>https://kkawazoe.github.io/blog/2019/03/28/manage-task-with-slack-and-todoist-and-integromat-2/</link><pubDate>Thu, 28 Mar 2019 12:09:59 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/03/28/manage-task-with-slack-and-todoist-and-integromat-2/</guid><description>前回の残りTODO operation を使いすぎなためAPIの戻り値を配列化してメッセージを構築するようにする 手順 前回構築した API と Slack の処理の間に以下の処理を追加する
「スパナ」アイコンを押下後「JSON」を選択して以下を指定
「Parse JSON」 「Data structure」 「Add data structure」 「Specification」 「Generate」を押下して API の戻り値を貼り付けて生成 「JSON string」 「Data」を指定 「スパナ」アイコンを押下後「Flow Control」を選択して以下を指定
「Array aggregator」 「Source Module」 手順１ で作成したJSON 「Target structure type」 「Custom」を指定 「Aggregated fields」 必要な項目を指定 前回作成した slack の Text を以下のように修正</description></item><item><title>Slack ＋ Todoist ＋ Integromat でタスク管理 その１</title><link>https://kkawazoe.github.io/blog/2019/03/25/manage-task-with-slack-and-todoist-and-integromat/</link><pubDate>Mon, 25 Mar 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/03/25/manage-task-with-slack-and-todoist-and-integromat/</guid><description>したいこと 日々のタスクを管理したいというよりも忘れがちな〇月に契約更新とかの数か月、数年先のタスクを管理したい
タスク管理 完了/未完了を切り替え 期日を指定 リマインダー機能 昨日完了したタスク 今日期日のタスク 上記以外のタスク 今回使用するツール タスク管理 シンプルで管理しやすい todoist を使用 リマインダー機能 slack の channel への通知を使用 google calendar リマインダーが直前になる todoist と連携可能だが「期日指定なし」が連携されない integromat サイトが英語のみ integromat での todoist について integromat から使用できる todoist の 「Search for a task」では以下の項目しか返ってこないため要件を満たせない
足りない項目 サブタスクかどうか? 期限の情報 [OUTPUT] Bundle 1: (Collection) Task ID: タスクID User ID: ユーザID Project ID: プロジェクトID Content: 内容 Deleted: 削除されているかどうか(true/false) Archived: アーカイブされているかどうか(true/false) Completed: 完了されているかどうか(true/false) The ID of the assigned user: アサインされているユーザID Date created: 作成日時 LabelsArray ラベル配列 そのため、todoist api を叩くことで実装する</description></item><item><title>バッチファイルでタイムスタンプを付与する</title><link>https://kkawazoe.github.io/blog/2019/03/23/add-time-stamp-with-bat-file/</link><pubDate>Sat, 23 Mar 2019 00:07:49 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/03/23/add-time-stamp-with-bat-file/</guid><description>ファイル名などにタイムスタンプを付与したい場合に毎回検索してしまうため備忘録として残しておく
実際のコード 例 2019/03/23 0:07:49.91 に実行した場合
yyyy/mm/dd 表示 @echo off echo %DATE% =&amp;gt; 2019/03/23
yyyy/mm/dd-hh:MM:ss.fff 表示 午前0時～午前9時の間は 0:00:00.00」(頭に半角スペース)になるため0埋め
@echo off set timeStamp=%DATE%-%TIME% set timeStamp=%timeStamp: =0% echo %timeStamp% =&amp;gt; 2019/03/23-00:07:49.91
yyyymmddhhMMss 表示 %timeStamp:~m,n% の部分は変数 timeStamp の m 文字目から n 文字を切り出す(mは0始まり)
@echo off set timeStamp=%DATE%-%TIME% set timeStamp=%timeStamp: =0% set formatTimeStamp=%timeStamp:~0,4%%timeStamp:~5,2%%timeStamp:~8,2%%timeStamp:~11,2%%timeStamp:~14,2%%timeStamp:~17,2% echo %formatTimeStamp% =&amp;gt; 20190323000749</description></item><item><title>Microsoft Edge Developer(旧Modern IE)でhostsファイルを設定する方法</title><link>https://kkawazoe.github.io/blog/2019/03/19/config-hosts-file-for-microsoft-edge-developer/</link><pubDate>Tue, 19 Mar 2019 23:35:30 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/03/19/config-hosts-file-for-microsoft-edge-developer/</guid><description>経緯 普段 Mac にて開発を行っているが動作端末は Windows であることが多い
そのため、表題のツールを使用することがあるがその際に Mac 上の hosts ファイルと同様の設定をしたい場合があり苦労したため備忘録として残しておく
Microsoft Edge Developer(旧Modern IE)について ダウンロードは以下から行う
ダウンロードページの「Virtual Machines」より「Virtual machine」と「platform」を選択してダウンロードする
手順 hostsファイルの権限変更 Microsoft Edge Developer 上で以下を行う
「C:/Windows/System32/drivers/etc」に hosts ファイルがある
そのファイルを右クリック&amp;gt;Properties&amp;gt;Security&amp;gt;Editボタンで、 Users の権限に全部チェックを入れる
Mac の hosts ファイルを複製 Mac の hosts ファイルは「/private/etc/hosts」にあるので、それを前述のファイルに中身をコピーする
※hosts ファイルのループバックアドレスは固定のホスト側のIPアドレスに置き換えて記述すること
Rails での確認の際の注意点 確認作業を Rails で行う場合には追加で以下の作業を行う
IEの場合 サーバの起動の際に以下のコマンドで行う bundle exec rails s -b 0.0.0.0 インターネットオプションのLocal intranetに「localhost:3000」を登録 Edgeの場合 サーバの起動の際に以下のコマンドで行う bundle exec rails s -b 0.0.0.0 インターネットオプションの Local intranet に「localhost:3000」を登録 about:flags を入力し、「Developer Settings」の「allow localhost loopback(this might put your device at risk)」のチェックを外す</description></item><item><title>FP3級への道</title><link>https://kkawazoe.github.io/blog/2019/03/11/road-to-fp3/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/03/11/road-to-fp3/</guid><description>ここ最近今まで縁のなかった確定申告や高額医療制度のお世話になることがあった 上記のこともあり知識として必要だと感じため、学習しその記録を残しておく
受験する科目 学科 FP 協会・金融財政事情研究会で共通 実技 ※難易度的には FP 協会の「資産設計提案業務」が初心者には易しいらしい FP 協会 資産設計提案業務 金融財政事情研究会 個人資産相談業務 ※今回受験 保険顧客資産相談業務 使用する教材 今回使用する教材は以下
2018-2019年版　みんなが欲しかった！　FPの教科書3級
滝澤ななみ TAC 2018年05月22日
売り上げランキング : 楽天ブックスで購入Amazonで購入 by ヨメレバ 他の人の評価等を確認する限り、これ１冊でもいけそう 必要があれば追加で購入する とりあえず、5月の受験を目指す
2019/03/26 追記 試験用の電卓を購入
CANON HS-1220TUG 実務電卓 12桁楽天市場で購入Amazonで購入by カエレバ こっちと迷ったが現状だとあまり必要なさそうなので安さで選択上位の級で必要になれば購入する
シャープ EL-N942-X 実務電卓 12桁楽天市場で購入Amazonで購入by カエレバ 2019/04/15 追記 問題集として追加で以下を購入 ※教本だけだと習熟度がわからないため
2018-2019年版　みんなが欲しかった！　FPの問題集3級
滝澤ななみ TAC 2018年05月22日</description></item><item><title>CofeeScript で JQuery の each を使用する場合の注意点</title><link>https://kkawazoe.github.io/blog/2019/03/08/attention-use-each-for-jquery-with-cofee-script/</link><pubDate>Fri, 08 Mar 2019 17:21:18 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/03/08/attention-use-each-for-jquery-with-cofee-script/</guid><description>JQueryの取得した要素分繰り返すeachを使用した場合にeachの内部でCoffeeScriptの@を使用するとJQueryのthisとして扱われてしまいReferenceErrorが発生する
その場合は以下のように修正する
実際のソース 修正前 processRows: -&amp;gt; $(&amp;#34;#my-table&amp;gt;tr&amp;#34;).each -&amp;gt; id = $(this).attr(&amp;#34;id&amp;#34;) @processRow id 修正後 processRows: -&amp;gt; $(&amp;#34;#my-table&amp;gt;tr&amp;#34;).each (index, element) =&amp;gt; id = $(element).attr(&amp;#34;id&amp;#34;) @processRow id</description></item><item><title>Vue.js で画面初期表示時に特定の要素をスクロールエリア中央に表示する</title><link>https://kkawazoe.github.io/blog/2019/03/07/initial-screen-display-scroll-to-center-specific-elementelement-with-vuejs/</link><pubDate>Thu, 07 Mar 2019 18:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/03/07/initial-screen-display-scroll-to-center-specific-elementelement-with-vuejs/</guid><description>経緯 web アプリでランキング画面のようにリスト内の自分の行を中心に表示のようなことを行いたい場合があり調査した結果を備忘録として残しておく
実際のソースおよび実行結果 画面初期表示時に id = 1(Taro) のデータをスクロールエリアの中央に表示する
created のタイミングで API 等からデータが取得される想定のため変数 users 監視しておいて変わったタイミングで画面中央にスクロール位置を移動させる
例はスクロールエリアの height が固定のパターンであるが可変の場合は画面サイズを使用して計算する</description></item><item><title>CSS で複数行でも3点リーダーを表示する</title><link>https://kkawazoe.github.io/blog/2019/03/06/show-ellipsis-multiple-lines-with-css/</link><pubDate>Wed, 06 Mar 2019 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/03/06/show-ellipsis-multiple-lines-with-css/</guid><description>経緯 CSS で3点リーダーを表示したい場合がよくあるが複数行の場合でも同様の対応を行いたい場合があり調査した結果を備忘録として残しておく
実際のソースおよび実行結果</description></item><item><title>VB.NET でふりがな機能を実装する</title><link>https://kkawazoe.github.io/blog/2019/03/04/ime-comp-with-vbnet/</link><pubDate>Mon, 04 Mar 2019 00:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/03/04/ime-comp-with-vbnet/</guid><description>経緯 最近、周りで VB.NET を使っている人が複数人出てきた恐らく2020年にWindows7 サポート終了となるため VB6 =&amp;gt; VB.NET へのコンバージョンの案件が増えていると思われる そのため、以前行った際に苦労したふりがな機能について備忘録として残しておくことにする
実際のコード ふりがな取得機能の実装クラス 以下のふりがなに対応(半角および全角英数はそのまま取得) ひらがな 全角カナ 半角カナ Option Strict Off Option Explicit On Imports System.Runtime.InteropServices Delegate Function fncDelegate(ByVal hWnd As Integer, ByVal uMsg As Integer, ByVal wParam As Integer, ByVal lParam As Integer) As Integer &amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; &amp;#39;&amp;#39;&amp;#39; 変換イベントクラス &amp;#39;&amp;#39;&amp;#39; &amp;lt;/summary&amp;gt; Public Class ConvertedEventArgs Inherits EventArgs &amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; &amp;#39;&amp;#39;&amp;#39; 変換イベントクラスのコンストラクタ &amp;#39;&amp;#39;&amp;#39; &amp;lt;/summary&amp;gt; &amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;#34;f&amp;#34;&amp;gt;ふりがな文字列&amp;lt;/param&amp;gt; &amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;#34;r&amp;#34;&amp;gt;変換後文字列&amp;lt;/param&amp;gt; Public Sub New(ByVal f As String, ByVal r As String) Furigana = f Result = r End Sub Public ReadOnly Property Furigana() As String Public ReadOnly Property Result() As String End Class &amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; &amp;#39;&amp;#39;&amp;#39; 自動ふりがな取得クラス &amp;#39;&amp;#39;&amp;#39; &amp;lt;/summary&amp;gt; Public Class Imecomp Private m_TxtSrcControl As Control Private m_TxtDestControl As Control Private WithEvents M_MsgListner As MsgListner Private ReadOnly m_StrConvMode As Integer &amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; &amp;#39;&amp;#39;&amp;#39; ふりがな取得完了通知イベント &amp;#39;&amp;#39;&amp;#39; &amp;#39;&amp;#39;&amp;#39; ふりがな取得が完了したことを通知する &amp;#39;&amp;#39;&amp;#39; &amp;lt;/summary&amp;gt; &amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;#34;txtSrc&amp;#34;&amp;gt;ふりがな取得対象テキストボックス&amp;lt;/param&amp;gt; &amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;#34;txtDest&amp;#34;&amp;gt;ふりがな出力対象テキストボックス&amp;lt;/param&amp;gt; &amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;#34;e&amp;#34;&amp;gt;変換イベントクラス&amp;lt;/param&amp;gt; Public Event Converted(ByVal txtSrc As System.</description></item><item><title>Rambox で ChatWork の未読メッセージを通知する</title><link>https://kkawazoe.github.io/blog/2019/02/28/unread-chatwork-notice-with-rambox/</link><pubDate>Thu, 28 Feb 2019 12:00:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/02/28/unread-chatwork-notice-with-rambox/</guid><description>確認環境 Windows10 Rambox: 0.6.3 経緯 普段、 仕事で Chatwork や Slack を使用しているが別々のアプリを切り替えるのが手間だったためまとめて管理できるツールがないか調査した
候補 Franz Station Rambox Franz, Station だと ChatWork で PDF ファイルのプレビューを表示した際にダウンロード用のダイアログが表示されるため 「保存」 =&amp;gt; 「PDF を開く」の手間が発生してしまうため Rambox に決定
Rambox の ChatWork の挙動 Rambox で ChatWork をサービスとして追加した場合自分にメンションがついているメッセージの場合は以下のようにバッジと未読数が表示される
Rambox バッジおよび未読数 しかし、自分にメンションがついていないメッセージについてはバッジおよび未読数は表示されないため見逃してしまう
対処方法 Rambox のサービス設定画面でカスタムコードを使用して対応する ※未読数(未読のあるルーム数) アプリ版 ChatWork と同じ挙動
Rambox サービス設定画面 実際のコード [Custom Code]
function checkUnread() { const elements = document.querySelectorAll(&amp;#34;.roomListBadges__unreadBadgeText&amp;#34;); updateBadge(elements.length); } function updateBadge(e) { e &amp;gt;= 1 ?</description></item><item><title>Vue.js で画像の読み込みの開始および完了を検知する</title><link>https://kkawazoe.github.io/blog/2019/02/26/detect-loaded-and-start-reading-for-img-with-vuejs/</link><pubDate>Tue, 26 Feb 2019 17:29:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/02/26/detect-loaded-and-start-reading-for-img-with-vuejs/</guid><description>確認環境 Vue.js: v2.6.7 方法 読み込み開始検知 img タグの :src に展開する URL を変数化 ※1 Vue.js 側の watch で1.の変数を監視 ※2 読み込み完了検知 img タグに以下のイベントを追加 v-on:load=&amp;quot;メソッド名&amp;quot; ※3 Vue.js 側に1.で指定したメソッドを定義 ※4 実際のソース &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;ja&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;画像の読み込みの開始および完了を検知する方法&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;img :src=&amp;#34;url&amp;#34; v-on:load=&amp;#34;load&amp;#34; /&amp;gt; &amp;lt;!-- ※3 --&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; var app = new Vue({ el: &amp;#39;#app&amp;#39;, data: { url: &amp;#34;https://raw.githubusercontent.com/vuejs/art/master/logo.png&amp;#34; // ※1 }, methods: { // ※4 load: function() { console.</description></item><item><title>Rails の order by で自分を優先的に取得する(MySql 限定)</title><link>https://kkawazoe.github.io/blog/2019/02/25/order-by-prefer-yourself-with-rails/</link><pubDate>Mon, 25 Feb 2019 16:50:14 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/02/25/order-by-prefer-yourself-with-rails/</guid><description>確認環境 ruby: ruby 2.5.3 rails: rails 5.2.2 方法 Mysqlの FIELD 関数を使用する※FIELD 関数の結果で ORDER BY する 例. レコードを order 昇順, user_id 昇順で並び替える場合
※同じ順位の場合は自分を優先
order(:order, [&amp;#34;field(user_id , #{current_user.id}) desc&amp;#34;], :user_id) ※ ポイントとしては第２ソートキーの前に ORDER BY FIELD を使用すること
また、ORDER BY FIELD で指定した分に対して desc を指定すること
※ desc を指定しないと自分以外が優先的に並び替えられてしまう)</description></item><item><title>Rails で階層構造になっているテーブルに自分自身への関連を設定する</title><link>https://kkawazoe.github.io/blog/2019/02/21/set-self-association-with-rails/</link><pubDate>Thu, 21 Feb 2019 18:10:43 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/02/21/set-self-association-with-rails/</guid><description>テーブル構成例 [Nodesテーブル] 最上位のノード以外は親ノードを持っている
id name parent_id 1 parrent_node null 2 child_node_1 1 3 child_node_2 1 4 child_node_1_1 2 5 child_node_1_2 2 6 child_node_2_1 3 7 child_node_2_2 3 確認環境 ruby: ruby 2.5.3 rails: rails 5.2.2 実際のコード class Node &amp;lt; ApplicationRecord has_many :children, class_name: &amp;#34;Node&amp;#34;, foreign_key: &amp;#34;parrent_id&amp;#34; belongs_to :parrent, class_name: &amp;#34;Node&amp;#34;, optional: true # rails5 から default が require になっているため　`optional: true` を指定しないと `nil` での保存が不可 end class CreateNodes &amp;lt; ActiveRecord::Migration[5.</description></item><item><title>Visual Studio Code で Markdown PDF を使用してPDF出力する際に任意の場所で改行させる</title><link>https://kkawazoe.github.io/blog/2019/02/20/markdown-pdf-page-break/</link><pubDate>Wed, 20 Feb 2019 00:24:14 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2019/02/20/markdown-pdf-page-break/</guid><description>経緯 普段、 VS Code を使用しておりちょっとしたメモや資料は Markdown を使用して作成している
資料を共有をする場合に拡張機能である Markdown PDF を使用しているが、出力後のPDFで改ページが微妙な場所でされてしまったため任意の場所で改ページできないか調査した
情報元 Markdown PDF の「Page Break」の項目に記載あり
実際のコード # h1 ## h2 ### h3 &amp;lt;!-- 改行させたい位置 --&amp;gt; &amp;lt;div class=&amp;#34;page&amp;#34;/&amp;gt; # h1 ## h2 ### h3</description></item><item><title>Windows 環境でバッチファイルからiniファイルを読込んで値を取得する</title><link>https://kkawazoe.github.io/blog/2014/06/22/get-value-from-initialize-file/</link><pubDate>Sun, 22 Jun 2014 09:01:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2014/06/22/get-value-from-initialize-file/</guid><description>対応方法 バッチファイルから ini ファイルを読込む場合 VBS を使用することで実現する
具体的には、バッチファイルから VBS を呼び出して ini ファイルより値を取得して VBS から戻り値を受け取り、実現する
取得する ini ファイルの中身 &amp;lt;設定値&amp;gt;*****************************************************&amp;#39;&amp;lt;コメント&amp;gt;####################################### [Path] WorkPath=C:/src/wk &amp;#39;Work Folder Path 実際のコード @echo off set iniFileName=sample.ini for /f &amp;#34;usebackq tokens=* delims=&amp;#34; %%A in (`call cscript //Nologo getProfileString.vbs &amp;#34;%iniFileName%&amp;#34; Path WorkPath`) do set ret=%%A echo &amp;#34;%ret%&amp;#34; pause exit Option Explicit rem /***************************************************************** rem * getProfileString.vbs iniFileName, sectionName, entryName rem * rem * 引数 rem * iniFileName : 設定ファイル名(フルパス) rem * sectionName : セクション名 rem * entryName : エントリー名 rem * 動作 rem * 引数に指定された設定ファイルより指定した rem * 「セクション」,「エントリー」に対応する設定値を返す rem * 先頭がカンマの場合はコメント行として扱う rem * 行の途中でカンマがある場合は直前までの文字列(右空白除去)を rem * 設定値として扱う rem * 戻り値 rem * 設定値(見つからなかった場合およびエラーの場合は空を返す) rem *****************************************************************/ Dim ret Dim fs Dim readLineObj Dim searchFlg Dim buffer rem ファイルシステムアクセス用 Set fs = CreateObject( &amp;quot;Scripting.</description></item><item><title>Windows 環境でバッチファイルからメッセージボックスを表示して押下されたボタンによって処理を切り替える</title><link>https://kkawazoe.github.io/blog/2014/02/09/switch-processing-by-message-box/</link><pubDate>Sun, 09 Feb 2014 18:46:00 +0900</pubDate><guid>https://kkawazoe.github.io/blog/2014/02/09/switch-processing-by-message-box/</guid><description>対応方法 バッチファイルからメッセージボックスを表示する場合バッチファイル単体では実現不可のため VBS を使用して実現する
※具体的には、バッチファイルから VBS を呼び出してメッセージボックスを表示し、 VBS から戻り値を受け取り、処理を切り替える
実際のコード @echo off rem メッセージボックスの表示 set msg=&amp;#34;メッセージボックスのテスト [\n] で改行します&amp;#34; set title=&amp;#34;メッセージボックステスト&amp;#34; for /f &amp;#34;usebackq tokens=* delims=&amp;#34; %%A in (`call cscript //Nologo msgbox.vbs %msg%&amp;#34;%title%&amp;#34;`) do set ret=%%A echo %ret% pause exit Option Explicit rem /******************************************************* rem * msgbox.vbs msg [,title] rem * rem * 引数 rem * msg :表示するメッセージ rem * title :メッセージボックスのタイトル rem * 動作 rem * メッセージボックスを表示し、クリックされたボタンに rem * 対応する数値を返す rem * msg中の 「\n」という文字列は改行に変換する rem * 戻り値 rem * 0:[はい]/1:[いいえ] rem ********************************************************/ Dim args Dim arg(99) Dim value Dim cnt Dim retBtn Dim ret Dim eLevel rem 引数を変数にセット Set args = WScript.</description></item></channel></rss>